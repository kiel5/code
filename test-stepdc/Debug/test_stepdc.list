
test_stepdc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08005bbc  08005bbc  00015bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d58  08005d58  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005d58  08005d58  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d58  08005d58  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d58  08005d58  00015d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d5c  08005d5c  00015d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000070  08005dd0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08005dd0  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010099  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000271d  00000000  00000000  00030132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00032850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001040  00000000  00000000  00033970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195ba  00000000  00000000  000349b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b6f  00000000  00000000  0004df6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092a70  00000000  00000000  00061ad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4549  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dfc  00000000  00000000  000f459c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08005ba4 	.word	0x08005ba4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08005ba4 	.word	0x08005ba4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_frsub>:
 800099c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009a0:	e002      	b.n	80009a8 <__addsf3>
 80009a2:	bf00      	nop

080009a4 <__aeabi_fsub>:
 80009a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009a8 <__addsf3>:
 80009a8:	0042      	lsls	r2, r0, #1
 80009aa:	bf1f      	itttt	ne
 80009ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009b0:	ea92 0f03 	teqne	r2, r3
 80009b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009bc:	d06a      	beq.n	8000a94 <__addsf3+0xec>
 80009be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009c6:	bfc1      	itttt	gt
 80009c8:	18d2      	addgt	r2, r2, r3
 80009ca:	4041      	eorgt	r1, r0
 80009cc:	4048      	eorgt	r0, r1
 80009ce:	4041      	eorgt	r1, r0
 80009d0:	bfb8      	it	lt
 80009d2:	425b      	neglt	r3, r3
 80009d4:	2b19      	cmp	r3, #25
 80009d6:	bf88      	it	hi
 80009d8:	4770      	bxhi	lr
 80009da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4249      	negne	r1, r1
 80009fa:	ea92 0f03 	teq	r2, r3
 80009fe:	d03f      	beq.n	8000a80 <__addsf3+0xd8>
 8000a00:	f1a2 0201 	sub.w	r2, r2, #1
 8000a04:	fa41 fc03 	asr.w	ip, r1, r3
 8000a08:	eb10 000c 	adds.w	r0, r0, ip
 8000a0c:	f1c3 0320 	rsb	r3, r3, #32
 8000a10:	fa01 f103 	lsl.w	r1, r1, r3
 8000a14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a18:	d502      	bpl.n	8000a20 <__addsf3+0x78>
 8000a1a:	4249      	negs	r1, r1
 8000a1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a24:	d313      	bcc.n	8000a4e <__addsf3+0xa6>
 8000a26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a2a:	d306      	bcc.n	8000a3a <__addsf3+0x92>
 8000a2c:	0840      	lsrs	r0, r0, #1
 8000a2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a32:	f102 0201 	add.w	r2, r2, #1
 8000a36:	2afe      	cmp	r2, #254	; 0xfe
 8000a38:	d251      	bcs.n	8000ade <__addsf3+0x136>
 8000a3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a42:	bf08      	it	eq
 8000a44:	f020 0001 	biceq.w	r0, r0, #1
 8000a48:	ea40 0003 	orr.w	r0, r0, r3
 8000a4c:	4770      	bx	lr
 8000a4e:	0049      	lsls	r1, r1, #1
 8000a50:	eb40 0000 	adc.w	r0, r0, r0
 8000a54:	3a01      	subs	r2, #1
 8000a56:	bf28      	it	cs
 8000a58:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a5c:	d2ed      	bcs.n	8000a3a <__addsf3+0x92>
 8000a5e:	fab0 fc80 	clz	ip, r0
 8000a62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a66:	ebb2 020c 	subs.w	r2, r2, ip
 8000a6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a6e:	bfaa      	itet	ge
 8000a70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a74:	4252      	neglt	r2, r2
 8000a76:	4318      	orrge	r0, r3
 8000a78:	bfbc      	itt	lt
 8000a7a:	40d0      	lsrlt	r0, r2
 8000a7c:	4318      	orrlt	r0, r3
 8000a7e:	4770      	bx	lr
 8000a80:	f092 0f00 	teq	r2, #0
 8000a84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a88:	bf06      	itte	eq
 8000a8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a8e:	3201      	addeq	r2, #1
 8000a90:	3b01      	subne	r3, #1
 8000a92:	e7b5      	b.n	8000a00 <__addsf3+0x58>
 8000a94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa2:	d021      	beq.n	8000ae8 <__addsf3+0x140>
 8000aa4:	ea92 0f03 	teq	r2, r3
 8000aa8:	d004      	beq.n	8000ab4 <__addsf3+0x10c>
 8000aaa:	f092 0f00 	teq	r2, #0
 8000aae:	bf08      	it	eq
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea90 0f01 	teq	r0, r1
 8000ab8:	bf1c      	itt	ne
 8000aba:	2000      	movne	r0, #0
 8000abc:	4770      	bxne	lr
 8000abe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ac2:	d104      	bne.n	8000ace <__addsf3+0x126>
 8000ac4:	0040      	lsls	r0, r0, #1
 8000ac6:	bf28      	it	cs
 8000ac8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	4770      	bx	lr
 8000ace:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ad2:	bf3c      	itt	cc
 8000ad4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bxcc	lr
 8000ada:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ade:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ae2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae6:	4770      	bx	lr
 8000ae8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aec:	bf16      	itet	ne
 8000aee:	4608      	movne	r0, r1
 8000af0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af4:	4601      	movne	r1, r0
 8000af6:	0242      	lsls	r2, r0, #9
 8000af8:	bf06      	itte	eq
 8000afa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000afe:	ea90 0f01 	teqeq	r0, r1
 8000b02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_ui2f>:
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	e004      	b.n	8000b18 <__aeabi_i2f+0x8>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_i2f>:
 8000b10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b14:	bf48      	it	mi
 8000b16:	4240      	negmi	r0, r0
 8000b18:	ea5f 0c00 	movs.w	ip, r0
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b24:	4601      	mov	r1, r0
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	e01c      	b.n	8000b66 <__aeabi_l2f+0x2a>

08000b2c <__aeabi_ul2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e00a      	b.n	8000b50 <__aeabi_l2f+0x14>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_l2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b48:	d502      	bpl.n	8000b50 <__aeabi_l2f+0x14>
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	ea5f 0c01 	movs.w	ip, r1
 8000b54:	bf02      	ittt	eq
 8000b56:	4684      	moveq	ip, r0
 8000b58:	4601      	moveq	r1, r0
 8000b5a:	2000      	moveq	r0, #0
 8000b5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b60:	bf08      	it	eq
 8000b62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b6a:	fabc f28c 	clz	r2, ip
 8000b6e:	3a08      	subs	r2, #8
 8000b70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b74:	db10      	blt.n	8000b98 <__aeabi_l2f+0x5c>
 8000b76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b80:	f1c2 0220 	rsb	r2, r2, #32
 8000b84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b88:	fa20 f202 	lsr.w	r2, r0, r2
 8000b8c:	eb43 0002 	adc.w	r0, r3, r2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f102 0220 	add.w	r2, r2, #32
 8000b9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba0:	f1c2 0220 	rsb	r2, r2, #32
 8000ba4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bac:	eb43 0002 	adc.w	r0, r3, r2
 8000bb0:	bf08      	it	eq
 8000bb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_fmul>:
 8000bb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bc6:	ea92 0f0c 	teqne	r2, ip
 8000bca:	ea93 0f0c 	teqne	r3, ip
 8000bce:	d06f      	beq.n	8000cb0 <__aeabi_fmul+0xf8>
 8000bd0:	441a      	add	r2, r3
 8000bd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd6:	0240      	lsls	r0, r0, #9
 8000bd8:	bf18      	it	ne
 8000bda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bde:	d01e      	beq.n	8000c1e <__aeabi_fmul+0x66>
 8000be0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000be4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000be8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bec:	fba0 3101 	umull	r3, r1, r0, r1
 8000bf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bf8:	bf3e      	ittt	cc
 8000bfa:	0049      	lslcc	r1, r1, #1
 8000bfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c00:	005b      	lslcc	r3, r3, #1
 8000c02:	ea40 0001 	orr.w	r0, r0, r1
 8000c06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c0a:	2afd      	cmp	r2, #253	; 0xfd
 8000c0c:	d81d      	bhi.n	8000c4a <__aeabi_fmul+0x92>
 8000c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c16:	bf08      	it	eq
 8000c18:	f020 0001 	biceq.w	r0, r0, #1
 8000c1c:	4770      	bx	lr
 8000c1e:	f090 0f00 	teq	r0, #0
 8000c22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c26:	bf08      	it	eq
 8000c28:	0249      	lsleq	r1, r1, #9
 8000c2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c32:	3a7f      	subs	r2, #127	; 0x7f
 8000c34:	bfc2      	ittt	gt
 8000c36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c3e:	4770      	bxgt	lr
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	dc5d      	bgt.n	8000d08 <__aeabi_fmul+0x150>
 8000c4c:	f112 0f19 	cmn.w	r2, #25
 8000c50:	bfdc      	itt	le
 8000c52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c56:	4770      	bxle	lr
 8000c58:	f1c2 0200 	rsb	r2, r2, #0
 8000c5c:	0041      	lsls	r1, r0, #1
 8000c5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c62:	f1c2 0220 	rsb	r2, r2, #32
 8000c66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c6e:	f140 0000 	adc.w	r0, r0, #0
 8000c72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c76:	bf08      	it	eq
 8000c78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c7c:	4770      	bx	lr
 8000c7e:	f092 0f00 	teq	r2, #0
 8000c82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c86:	bf02      	ittt	eq
 8000c88:	0040      	lsleq	r0, r0, #1
 8000c8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c8e:	3a01      	subeq	r2, #1
 8000c90:	d0f9      	beq.n	8000c86 <__aeabi_fmul+0xce>
 8000c92:	ea40 000c 	orr.w	r0, r0, ip
 8000c96:	f093 0f00 	teq	r3, #0
 8000c9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c9e:	bf02      	ittt	eq
 8000ca0:	0049      	lsleq	r1, r1, #1
 8000ca2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ca6:	3b01      	subeq	r3, #1
 8000ca8:	d0f9      	beq.n	8000c9e <__aeabi_fmul+0xe6>
 8000caa:	ea41 010c 	orr.w	r1, r1, ip
 8000cae:	e78f      	b.n	8000bd0 <__aeabi_fmul+0x18>
 8000cb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb4:	ea92 0f0c 	teq	r2, ip
 8000cb8:	bf18      	it	ne
 8000cba:	ea93 0f0c 	teqne	r3, ip
 8000cbe:	d00a      	beq.n	8000cd6 <__aeabi_fmul+0x11e>
 8000cc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cc4:	bf18      	it	ne
 8000cc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cca:	d1d8      	bne.n	8000c7e <__aeabi_fmul+0xc6>
 8000ccc:	ea80 0001 	eor.w	r0, r0, r1
 8000cd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f090 0f00 	teq	r0, #0
 8000cda:	bf17      	itett	ne
 8000cdc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ce0:	4608      	moveq	r0, r1
 8000ce2:	f091 0f00 	teqne	r1, #0
 8000ce6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cea:	d014      	beq.n	8000d16 <__aeabi_fmul+0x15e>
 8000cec:	ea92 0f0c 	teq	r2, ip
 8000cf0:	d101      	bne.n	8000cf6 <__aeabi_fmul+0x13e>
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	d10f      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000cf6:	ea93 0f0c 	teq	r3, ip
 8000cfa:	d103      	bne.n	8000d04 <__aeabi_fmul+0x14c>
 8000cfc:	024b      	lsls	r3, r1, #9
 8000cfe:	bf18      	it	ne
 8000d00:	4608      	movne	r0, r1
 8000d02:	d108      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000d04:	ea80 0001 	eor.w	r0, r0, r1
 8000d08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d14:	4770      	bx	lr
 8000d16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_fdiv>:
 8000d20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d28:	bf1e      	ittt	ne
 8000d2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2e:	ea92 0f0c 	teqne	r2, ip
 8000d32:	ea93 0f0c 	teqne	r3, ip
 8000d36:	d069      	beq.n	8000e0c <__aeabi_fdiv+0xec>
 8000d38:	eba2 0203 	sub.w	r2, r2, r3
 8000d3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d40:	0249      	lsls	r1, r1, #9
 8000d42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d46:	d037      	beq.n	8000db8 <__aeabi_fdiv+0x98>
 8000d48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	bf38      	it	cc
 8000d5c:	005b      	lslcc	r3, r3, #1
 8000d5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d66:	428b      	cmp	r3, r1
 8000d68:	bf24      	itt	cs
 8000d6a:	1a5b      	subcs	r3, r3, r1
 8000d6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d74:	bf24      	itt	cs
 8000d76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d82:	bf24      	itt	cs
 8000d84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d90:	bf24      	itt	cs
 8000d92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000da2:	d1e0      	bne.n	8000d66 <__aeabi_fdiv+0x46>
 8000da4:	2afd      	cmp	r2, #253	; 0xfd
 8000da6:	f63f af50 	bhi.w	8000c4a <__aeabi_fmul+0x92>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db0:	bf08      	it	eq
 8000db2:	f020 0001 	biceq.w	r0, r0, #1
 8000db6:	4770      	bx	lr
 8000db8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc0:	327f      	adds	r2, #127	; 0x7f
 8000dc2:	bfc2      	ittt	gt
 8000dc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dcc:	4770      	bxgt	lr
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	3a01      	subs	r2, #1
 8000dd8:	e737      	b.n	8000c4a <__aeabi_fmul+0x92>
 8000dda:	f092 0f00 	teq	r2, #0
 8000dde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de2:	bf02      	ittt	eq
 8000de4:	0040      	lsleq	r0, r0, #1
 8000de6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dea:	3a01      	subeq	r2, #1
 8000dec:	d0f9      	beq.n	8000de2 <__aeabi_fdiv+0xc2>
 8000dee:	ea40 000c 	orr.w	r0, r0, ip
 8000df2:	f093 0f00 	teq	r3, #0
 8000df6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0049      	lsleq	r1, r1, #1
 8000dfe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e02:	3b01      	subeq	r3, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fdiv+0xda>
 8000e06:	ea41 010c 	orr.w	r1, r1, ip
 8000e0a:	e795      	b.n	8000d38 <__aeabi_fdiv+0x18>
 8000e0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e10:	ea92 0f0c 	teq	r2, ip
 8000e14:	d108      	bne.n	8000e28 <__aeabi_fdiv+0x108>
 8000e16:	0242      	lsls	r2, r0, #9
 8000e18:	f47f af7d 	bne.w	8000d16 <__aeabi_fmul+0x15e>
 8000e1c:	ea93 0f0c 	teq	r3, ip
 8000e20:	f47f af70 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e776      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e28:	ea93 0f0c 	teq	r3, ip
 8000e2c:	d104      	bne.n	8000e38 <__aeabi_fdiv+0x118>
 8000e2e:	024b      	lsls	r3, r1, #9
 8000e30:	f43f af4c 	beq.w	8000ccc <__aeabi_fmul+0x114>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e76e      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e42:	d1ca      	bne.n	8000dda <__aeabi_fdiv+0xba>
 8000e44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e48:	f47f af5c 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e50:	f47f af3c 	bne.w	8000ccc <__aeabi_fmul+0x114>
 8000e54:	e75f      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e56:	bf00      	nop

08000e58 <__aeabi_f2iz>:
 8000e58:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e60:	d30f      	bcc.n	8000e82 <__aeabi_f2iz+0x2a>
 8000e62:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e6a:	d90d      	bls.n	8000e88 <__aeabi_f2iz+0x30>
 8000e6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e74:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e78:	fa23 f002 	lsr.w	r0, r3, r2
 8000e7c:	bf18      	it	ne
 8000e7e:	4240      	negne	r0, r0
 8000e80:	4770      	bx	lr
 8000e82:	f04f 0000 	mov.w	r0, #0
 8000e86:	4770      	bx	lr
 8000e88:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e8c:	d101      	bne.n	8000e92 <__aeabi_f2iz+0x3a>
 8000e8e:	0242      	lsls	r2, r0, #9
 8000e90:	d105      	bne.n	8000e9e <__aeabi_f2iz+0x46>
 8000e92:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e96:	bf08      	it	eq
 8000e98:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e9c:	4770      	bx	lr
 8000e9e:	f04f 0000 	mov.w	r0, #0
 8000ea2:	4770      	bx	lr

08000ea4 <bufclr>:
#include "stdio.h"
#include "string.h"


void bufclr (char *buf)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	int len = strlen (buf);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff f94f 	bl	8000150 <strlen>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<len; i++) buf[i] = '\0';
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	e007      	b.n	8000ecc <bufclr+0x28>
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	dbf3      	blt.n	8000ebc <bufclr+0x18>
}
 8000ed4:	bf00      	nop
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <ESP_Init>:


void ESP_Init (char *SSID, char *PASSWD)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b096      	sub	sp, #88	; 0x58
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 8000eea:	f000 f8a9 	bl	8001040 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n");
 8000eee:	481d      	ldr	r0, [pc, #116]	; (8000f64 <ESP_Init+0x84>)
 8000ef0:	f000 f92a 	bl	8001148 <Uart_sendstring>
HAL_Delay(2000);
 8000ef4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ef8:	f001 f948 	bl	800218c <HAL_Delay>

	Uart_flush();
 8000efc:	f000 f8e4 	bl	80010c8 <Uart_flush>

	/********* AT **********/
	Uart_sendstring("AT\r\n");
 8000f00:	4819      	ldr	r0, [pc, #100]	; (8000f68 <ESP_Init+0x88>)
 8000f02:	f000 f921 	bl	8001148 <Uart_sendstring>
//	while(!(Wait_for("OK\r\n")));
HAL_Delay(2000);
 8000f06:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f0a:	f001 f93f 	bl	800218c <HAL_Delay>
	Uart_flush();
 8000f0e:	f000 f8db 	bl	80010c8 <Uart_flush>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n");
 8000f12:	4816      	ldr	r0, [pc, #88]	; (8000f6c <ESP_Init+0x8c>)
 8000f14:	f000 f918 	bl	8001148 <Uart_sendstring>
//	while (!(Wait_for("OK\r\n")));
HAL_Delay(2000);
 8000f18:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f1c:	f001 f936 	bl	800218c <HAL_Delay>
	Uart_flush();
 8000f20:	f000 f8d2 	bl	80010c8 <Uart_flush>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8000f24:	f107 0008 	add.w	r0, r7, #8
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	4910      	ldr	r1, [pc, #64]	; (8000f70 <ESP_Init+0x90>)
 8000f2e:	f004 f9bf 	bl	80052b0 <siprintf>
	Uart_sendstring(data);
 8000f32:	f107 0308 	add.w	r3, r7, #8
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f906 	bl	8001148 <Uart_sendstring>
//	while (!(Wait_for("OK\r\n")));
HAL_Delay(8000);
 8000f3c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000f40:	f001 f924 	bl	800218c <HAL_Delay>
	Uart_flush();
 8000f44:	f000 f8c0 	bl	80010c8 <Uart_flush>

	/********* AT+CIPMUX=0 **********/
	Uart_sendstring("AT+CIPMUX=0\r\n");
 8000f48:	480a      	ldr	r0, [pc, #40]	; (8000f74 <ESP_Init+0x94>)
 8000f4a:	f000 f8fd 	bl	8001148 <Uart_sendstring>
//	while (!(Wait_for("OK\r\n")));
HAL_Delay(2000);
 8000f4e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f52:	f001 f91b 	bl	800218c <HAL_Delay>
	Uart_flush();
 8000f56:	f000 f8b7 	bl	80010c8 <Uart_flush>

}
 8000f5a:	bf00      	nop
 8000f5c:	3758      	adds	r7, #88	; 0x58
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	08005bbc 	.word	0x08005bbc
 8000f68:	08005bc8 	.word	0x08005bc8
 8000f6c:	08005bd0 	.word	0x08005bd0
 8000f70:	08005be0 	.word	0x08005be0
 8000f74:	08005bf8 	.word	0x08005bf8

08000f78 <ESP_Send_Data>:

void ESP_Send_Data (char *APIkey, int Field_num, uint16_t value)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b0a8      	sub	sp, #160	; 0xa0
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	4613      	mov	r3, r2
 8000f84:	80fb      	strh	r3, [r7, #6]
	char local_buf[100] = {0};
 8000f86:	2300      	movs	r3, #0
 8000f88:	633b      	str	r3, [r7, #48]	; 0x30
 8000f8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f8e:	2260      	movs	r2, #96	; 0x60
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f004 f984 	bl	80052a0 <memset>
	char local_buf2[30] = {0};
 8000f98:	2300      	movs	r3, #0
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
 8000fac:	615a      	str	r2, [r3, #20]
 8000fae:	831a      	strh	r2, [r3, #24]

	Uart_sendstring("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n");
 8000fb0:	4820      	ldr	r0, [pc, #128]	; (8001034 <ESP_Send_Data+0xbc>)
 8000fb2:	f000 f8c9 	bl	8001148 <Uart_sendstring>
//	while (!(Wait_for("OK\r\n")));
HAL_Delay(5000);
 8000fb6:	f241 3088 	movw	r0, #5000	; 0x1388
 8000fba:	f001 f8e7 	bl	800218c <HAL_Delay>

	sprintf (local_buf, "GET /update?api_key=%s&field%d=%u\r\n", APIkey, Field_num, value);
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	68fa      	ldr	r2, [r7, #12]
 8000fca:	491b      	ldr	r1, [pc, #108]	; (8001038 <ESP_Send_Data+0xc0>)
 8000fcc:	f004 f970 	bl	80052b0 <siprintf>
	int len = strlen (local_buf);
 8000fd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff f8bb 	bl	8000150 <strlen>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	sprintf (local_buf2, "AT+CIPSEND=%d\r\n", len);
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000fe8:	4914      	ldr	r1, [pc, #80]	; (800103c <ESP_Send_Data+0xc4>)
 8000fea:	4618      	mov	r0, r3
 8000fec:	f004 f960 	bl	80052b0 <siprintf>
	Uart_sendstring(local_buf2);
 8000ff0:	f107 0310 	add.w	r3, r7, #16
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 f8a7 	bl	8001148 <Uart_sendstring>
//while (!(Wait_for(">")));
HAL_Delay(8000);
 8000ffa:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000ffe:	f001 f8c5 	bl	800218c <HAL_Delay>
	Uart_sendstring (local_buf);
 8001002:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f89e 	bl	8001148 <Uart_sendstring>
//  while (!(Wait_for("SEND OK\r\n")));

//	while (!(Wait_for("CLOSED")));
HAL_Delay(5000);
 800100c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001010:	f001 f8bc 	bl	800218c <HAL_Delay>
	bufclr(local_buf);
 8001014:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff43 	bl	8000ea4 <bufclr>
	bufclr(local_buf2);
 800101e:	f107 0310 	add.w	r3, r7, #16
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ff3e 	bl	8000ea4 <bufclr>

	Ringbuf_init();
 8001028:	f000 f80a 	bl	8001040 <Ringbuf_init>

}
 800102c:	bf00      	nop
 800102e:	3798      	adds	r7, #152	; 0x98
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	08005c08 	.word	0x08005c08
 8001038:	08005c34 	.word	0x08005c34
 800103c:	08005c58 	.word	0x08005c58

08001040 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <Ringbuf_init+0x38>)
 8001046:	4a0d      	ldr	r2, [pc, #52]	; (800107c <Ringbuf_init+0x3c>)
 8001048:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 800104a:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <Ringbuf_init+0x40>)
 800104c:	4a0d      	ldr	r2, [pc, #52]	; (8001084 <Ringbuf_init+0x44>)
 800104e:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8001050:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <Ringbuf_init+0x48>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	695a      	ldr	r2, [r3, #20]
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <Ringbuf_init+0x48>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f042 0201 	orr.w	r2, r2, #1
 800105e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <Ringbuf_init+0x48>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	68da      	ldr	r2, [r3, #12]
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <Ringbuf_init+0x48>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f042 0220 	orr.w	r2, r2, #32
 800106e:	60da      	str	r2, [r3, #12]
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr
 8001078:	2000011c 	.word	0x2000011c
 800107c:	2000008c 	.word	0x2000008c
 8001080:	20000120 	.word	0x20000120
 8001084:	200000d4 	.word	0x200000d4
 8001088:	200001f0 	.word	0x200001f0

0800108c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	3301      	adds	r3, #1
 800109e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010a2:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d007      	beq.n	80010be <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	79f9      	ldrb	r1, [r7, #7]
 80010b6:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80010be:	bf00      	nop
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <Uart_flush>:

void Uart_flush (void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0

	  _rx_buffer->head = _rx_buffer->tail;
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <Uart_flush+0x18>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <Uart_flush+0x18>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80010d6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	2000011c 	.word	0x2000011c

080010e4 <Uart_write>:
    return c;
  }
}

void Uart_write(int c)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	if (c>=0)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	db21      	blt.n	8001136 <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <Uart_write+0x5c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	3301      	adds	r3, #1
 80010fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010fe:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 8001100:	bf00      	nop
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <Uart_write+0x5c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	429a      	cmp	r2, r3
 800110c:	d0f9      	beq.n	8001102 <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <Uart_write+0x5c>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <Uart_write+0x5c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	b2c9      	uxtb	r1, r1
 800111c:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <Uart_write+0x5c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <Uart_write+0x60>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	68da      	ldr	r2, [r3, #12]
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <Uart_write+0x60>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001134:	60da      	str	r2, [r3, #12]
	}
}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	20000120 	.word	0x20000120
 8001144:	200001f0 	.word	0x200001f0

08001148 <Uart_sendstring>:
{
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
}

void Uart_sendstring (const char *s)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 8001150:	e006      	b.n	8001160 <Uart_sendstring+0x18>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	1c5a      	adds	r2, r3, #1
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ffc2 	bl	80010e4 <Uart_write>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1f4      	bne.n	8001152 <Uart_sendstring+0xa>
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	f003 0320 	and.w	r3, r3, #32
 8001192:	2b00      	cmp	r3, #0
 8001194:	d013      	beq.n	80011be <Uart_isr+0x4a>
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	f003 0320 	and.w	r3, r3, #32
 800119c:	2b00      	cmp	r3, #0
 800119e:	d00e      	beq.n	80011be <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80011ae:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <Uart_isr+0xac>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	4611      	mov	r1, r2
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ff68 	bl	800108c <store_char>
        return;
 80011bc:	e02c      	b.n	8001218 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d027      	beq.n	8001218 <Uart_isr+0xa4>
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d022      	beq.n	8001218 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <Uart_isr+0xb0>)
 80011d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011d6:	4b13      	ldr	r3, [pc, #76]	; (8001224 <Uart_isr+0xb0>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	429a      	cmp	r2, r3
 80011dc:	d108      	bne.n	80011f0 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	68da      	ldr	r2, [r3, #12]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011ec:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80011ee:	e012      	b.n	8001216 <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <Uart_isr+0xb0>)
 80011f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f4:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <Uart_isr+0xb0>)
 80011f6:	5cd3      	ldrb	r3, [r2, r3]
 80011f8:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80011fa:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <Uart_isr+0xb0>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	3301      	adds	r3, #1
 8001200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001204:	4a07      	ldr	r2, [pc, #28]	; (8001224 <Uart_isr+0xb0>)
 8001206:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	7bba      	ldrb	r2, [r7, #14]
 8001214:	605a      	str	r2, [r3, #4]
    	return;
 8001216:	bf00      	nop
    }
}
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	2000011c 	.word	0x2000011c
 8001224:	200000d4 	.word	0x200000d4

08001228 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af02      	add	r7, sp, #8
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	f023 030f 	bic.w	r3, r3, #15
 8001238:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	011b      	lsls	r3, r3, #4
 800123e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	f043 030c 	orr.w	r3, r3, #12
 8001246:	b2db      	uxtb	r3, r3
 8001248:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	f043 0308 	orr.w	r3, r3, #8
 8001250:	b2db      	uxtb	r3, r3
 8001252:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001254:	7bbb      	ldrb	r3, [r7, #14]
 8001256:	f043 030c 	orr.w	r3, r3, #12
 800125a:	b2db      	uxtb	r3, r3
 800125c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800125e:	7bbb      	ldrb	r3, [r7, #14]
 8001260:	f043 0308 	orr.w	r3, r3, #8
 8001264:	b2db      	uxtb	r3, r3
 8001266:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001268:	f107 0208 	add.w	r2, r7, #8
 800126c:	2364      	movs	r3, #100	; 0x64
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	2304      	movs	r3, #4
 8001272:	214e      	movs	r1, #78	; 0x4e
 8001274:	4803      	ldr	r0, [pc, #12]	; (8001284 <lcd_send_cmd+0x5c>)
 8001276:	f002 f8a3 	bl	80033c0 <HAL_I2C_Master_Transmit>
}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000154 	.word	0x20000154

08001288 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af02      	add	r7, sp, #8
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	f023 030f 	bic.w	r3, r3, #15
 8001298:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	011b      	lsls	r3, r3, #4
 800129e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	f043 030d 	orr.w	r3, r3, #13
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	f043 0309 	orr.w	r3, r3, #9
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80012b4:	7bbb      	ldrb	r3, [r7, #14]
 80012b6:	f043 030d 	orr.w	r3, r3, #13
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80012be:	7bbb      	ldrb	r3, [r7, #14]
 80012c0:	f043 0309 	orr.w	r3, r3, #9
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80012c8:	f107 0208 	add.w	r2, r7, #8
 80012cc:	2364      	movs	r3, #100	; 0x64
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	2304      	movs	r3, #4
 80012d2:	214e      	movs	r1, #78	; 0x4e
 80012d4:	4803      	ldr	r0, [pc, #12]	; (80012e4 <lcd_send_data+0x5c>)
 80012d6:	f002 f873 	bl	80033c0 <HAL_I2C_Master_Transmit>
}
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000154 	.word	0x20000154

080012e8 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
    switch (row)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <lcd_put_cur+0x18>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d005      	beq.n	800130a <lcd_put_cur+0x22>
 80012fe:	e009      	b.n	8001314 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001306:	603b      	str	r3, [r7, #0]
            break;
 8001308:	e004      	b.n	8001314 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001310:	603b      	str	r3, [r7, #0]
            break;
 8001312:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff85 	bl	8001228 <lcd_send_cmd>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <lcd_init>:


void lcd_init (void)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800132a:	2032      	movs	r0, #50	; 0x32
 800132c:	f000 ff2e 	bl	800218c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001330:	2030      	movs	r0, #48	; 0x30
 8001332:	f7ff ff79 	bl	8001228 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001336:	2005      	movs	r0, #5
 8001338:	f000 ff28 	bl	800218c <HAL_Delay>
	lcd_send_cmd (0x30);
 800133c:	2030      	movs	r0, #48	; 0x30
 800133e:	f7ff ff73 	bl	8001228 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001342:	2001      	movs	r0, #1
 8001344:	f000 ff22 	bl	800218c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001348:	2030      	movs	r0, #48	; 0x30
 800134a:	f7ff ff6d 	bl	8001228 <lcd_send_cmd>
	HAL_Delay(10);
 800134e:	200a      	movs	r0, #10
 8001350:	f000 ff1c 	bl	800218c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001354:	2020      	movs	r0, #32
 8001356:	f7ff ff67 	bl	8001228 <lcd_send_cmd>
	HAL_Delay(10);
 800135a:	200a      	movs	r0, #10
 800135c:	f000 ff16 	bl	800218c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001360:	2028      	movs	r0, #40	; 0x28
 8001362:	f7ff ff61 	bl	8001228 <lcd_send_cmd>
	HAL_Delay(1);
 8001366:	2001      	movs	r0, #1
 8001368:	f000 ff10 	bl	800218c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800136c:	2008      	movs	r0, #8
 800136e:	f7ff ff5b 	bl	8001228 <lcd_send_cmd>
	HAL_Delay(1);
 8001372:	2001      	movs	r0, #1
 8001374:	f000 ff0a 	bl	800218c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001378:	2001      	movs	r0, #1
 800137a:	f7ff ff55 	bl	8001228 <lcd_send_cmd>
	HAL_Delay(1);
 800137e:	2001      	movs	r0, #1
 8001380:	f000 ff04 	bl	800218c <HAL_Delay>
	HAL_Delay(1);
 8001384:	2001      	movs	r0, #1
 8001386:	f000 ff01 	bl	800218c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800138a:	2006      	movs	r0, #6
 800138c:	f7ff ff4c 	bl	8001228 <lcd_send_cmd>
	HAL_Delay(1);
 8001390:	2001      	movs	r0, #1
 8001392:	f000 fefb 	bl	800218c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001396:	200c      	movs	r0, #12
 8001398:	f7ff ff46 	bl	8001228 <lcd_send_cmd>
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}

080013a0 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80013a8:	e006      	b.n	80013b8 <lcd_send_string+0x18>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	1c5a      	adds	r2, r3, #1
 80013ae:	607a      	str	r2, [r7, #4]
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ff68 	bl	8001288 <lcd_send_data>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1f4      	bne.n	80013aa <lcd_send_string+0xa>
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <delay>:
#define IN8Pin  GPIO_PIN_15


#define stepsperrev 2048

void delay(uint16_t us){
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <delay+0x2c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2200      	movs	r2, #0
 80013dc:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1)<us);
 80013de:	bf00      	nop
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <delay+0x2c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d3f9      	bcc.n	80013e0 <delay+0x14>
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	200001a8 	.word	0x200001a8

080013fc <SetPin>:

void SetPin (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8001408:	887b      	ldrh	r3, [r7, #2]
 800140a:	2201      	movs	r2, #1
 800140c:	4619      	mov	r1, r3
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f001 fe7a 	bl	8003108 <HAL_GPIO_WritePin>
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <ResetPin>:

void ResetPin (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001428:	887b      	ldrh	r3, [r7, #2]
 800142a:	2200      	movs	r2, #0
 800142c:	4619      	mov	r1, r3
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f001 fe6a 	bl	8003108 <HAL_GPIO_WritePin>
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <stepper_wave_drive>:

void stepper_wave_drive (int step)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	switch (step){
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b03      	cmp	r3, #3
 8001448:	d84e      	bhi.n	80014e8 <stepper_wave_drive+0xac>
 800144a:	a201      	add	r2, pc, #4	; (adr r2, 8001450 <stepper_wave_drive+0x14>)
 800144c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001450:	08001461 	.word	0x08001461
 8001454:	08001483 	.word	0x08001483
 8001458:	080014a5 	.word	0x080014a5
 800145c:	080014c7 	.word	0x080014c7
		case 0:
			  SetPin(IN1Port, IN1Pin);   // IN1 SET
 8001460:	2101      	movs	r1, #1
 8001462:	4823      	ldr	r0, [pc, #140]	; (80014f0 <stepper_wave_drive+0xb4>)
 8001464:	f7ff ffca 	bl	80013fc <SetPin>
			  ResetPin(IN2Port, IN2Pin);   // IN2 RESET
 8001468:	2102      	movs	r1, #2
 800146a:	4821      	ldr	r0, [pc, #132]	; (80014f0 <stepper_wave_drive+0xb4>)
 800146c:	f7ff ffd6 	bl	800141c <ResetPin>
			  ResetPin(IN3Port, IN3Pin);   // IN3 RESET
 8001470:	2104      	movs	r1, #4
 8001472:	481f      	ldr	r0, [pc, #124]	; (80014f0 <stepper_wave_drive+0xb4>)
 8001474:	f7ff ffd2 	bl	800141c <ResetPin>
			  ResetPin(IN4Port, IN4Pin);   // IN4 RESET
 8001478:	2108      	movs	r1, #8
 800147a:	481d      	ldr	r0, [pc, #116]	; (80014f0 <stepper_wave_drive+0xb4>)
 800147c:	f7ff ffce 	bl	800141c <ResetPin>
			  break;
 8001480:	e032      	b.n	80014e8 <stepper_wave_drive+0xac>

		case 1:
			  ResetPin(IN1Port, IN1Pin);   // IN1 RESET
 8001482:	2101      	movs	r1, #1
 8001484:	481a      	ldr	r0, [pc, #104]	; (80014f0 <stepper_wave_drive+0xb4>)
 8001486:	f7ff ffc9 	bl	800141c <ResetPin>
			  SetPin(IN2Port, IN2Pin);   // IN2 SET
 800148a:	2102      	movs	r1, #2
 800148c:	4818      	ldr	r0, [pc, #96]	; (80014f0 <stepper_wave_drive+0xb4>)
 800148e:	f7ff ffb5 	bl	80013fc <SetPin>
			  ResetPin(IN3Port, IN3Pin);   // IN3 RESET
 8001492:	2104      	movs	r1, #4
 8001494:	4816      	ldr	r0, [pc, #88]	; (80014f0 <stepper_wave_drive+0xb4>)
 8001496:	f7ff ffc1 	bl	800141c <ResetPin>
			  ResetPin(IN4Port, IN4Pin);   // IN4 RESET
 800149a:	2108      	movs	r1, #8
 800149c:	4814      	ldr	r0, [pc, #80]	; (80014f0 <stepper_wave_drive+0xb4>)
 800149e:	f7ff ffbd 	bl	800141c <ResetPin>
			  break;
 80014a2:	e021      	b.n	80014e8 <stepper_wave_drive+0xac>

		case 2:
			  ResetPin(IN1Port, IN1Pin);   // IN1 RESET
 80014a4:	2101      	movs	r1, #1
 80014a6:	4812      	ldr	r0, [pc, #72]	; (80014f0 <stepper_wave_drive+0xb4>)
 80014a8:	f7ff ffb8 	bl	800141c <ResetPin>
			  ResetPin(IN2Port, IN2Pin);   // IN2 RESET
 80014ac:	2102      	movs	r1, #2
 80014ae:	4810      	ldr	r0, [pc, #64]	; (80014f0 <stepper_wave_drive+0xb4>)
 80014b0:	f7ff ffb4 	bl	800141c <ResetPin>
			  SetPin(IN3Port, IN3Pin);   // IN3 SET
 80014b4:	2104      	movs	r1, #4
 80014b6:	480e      	ldr	r0, [pc, #56]	; (80014f0 <stepper_wave_drive+0xb4>)
 80014b8:	f7ff ffa0 	bl	80013fc <SetPin>
			  ResetPin(IN4Port, IN4Pin);   // IN4 RESET
 80014bc:	2108      	movs	r1, #8
 80014be:	480c      	ldr	r0, [pc, #48]	; (80014f0 <stepper_wave_drive+0xb4>)
 80014c0:	f7ff ffac 	bl	800141c <ResetPin>
			  break;
 80014c4:	e010      	b.n	80014e8 <stepper_wave_drive+0xac>

		case 3:
			  ResetPin(IN1Port, IN1Pin);   // IN1 RESET
 80014c6:	2101      	movs	r1, #1
 80014c8:	4809      	ldr	r0, [pc, #36]	; (80014f0 <stepper_wave_drive+0xb4>)
 80014ca:	f7ff ffa7 	bl	800141c <ResetPin>
			  ResetPin(IN2Port, IN2Pin);   // IN2 RESET
 80014ce:	2102      	movs	r1, #2
 80014d0:	4807      	ldr	r0, [pc, #28]	; (80014f0 <stepper_wave_drive+0xb4>)
 80014d2:	f7ff ffa3 	bl	800141c <ResetPin>
			  ResetPin(IN3Port, IN3Pin);   // IN3 RESET
 80014d6:	2104      	movs	r1, #4
 80014d8:	4805      	ldr	r0, [pc, #20]	; (80014f0 <stepper_wave_drive+0xb4>)
 80014da:	f7ff ff9f 	bl	800141c <ResetPin>
			  SetPin(IN4Port, IN4Pin);   // IN4 SET
 80014de:	2108      	movs	r1, #8
 80014e0:	4803      	ldr	r0, [pc, #12]	; (80014f0 <stepper_wave_drive+0xb4>)
 80014e2:	f7ff ff8b 	bl	80013fc <SetPin>

		}
}
 80014e6:	e7ff      	b.n	80014e8 <stepper_wave_drive+0xac>
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40010800 	.word	0x40010800

080014f4 <stepper_wave_drive1>:
void stepper_wave_drive1 (int step)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
	switch (step){
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d85e      	bhi.n	80015c0 <stepper_wave_drive1+0xcc>
 8001502:	a201      	add	r2, pc, #4	; (adr r2, 8001508 <stepper_wave_drive1+0x14>)
 8001504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001508:	08001519 	.word	0x08001519
 800150c:	08001543 	.word	0x08001543
 8001510:	0800156d 	.word	0x0800156d
 8001514:	08001597 	.word	0x08001597
		case 0:
			  SetPin  (IN5Port, IN5Pin);
 8001518:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800151c:	482a      	ldr	r0, [pc, #168]	; (80015c8 <stepper_wave_drive1+0xd4>)
 800151e:	f7ff ff6d 	bl	80013fc <SetPin>
			  ResetPin(IN6Port, IN6Pin);
 8001522:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001526:	4828      	ldr	r0, [pc, #160]	; (80015c8 <stepper_wave_drive1+0xd4>)
 8001528:	f7ff ff78 	bl	800141c <ResetPin>
			  ResetPin(IN7Port, IN7Pin);
 800152c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001530:	4825      	ldr	r0, [pc, #148]	; (80015c8 <stepper_wave_drive1+0xd4>)
 8001532:	f7ff ff73 	bl	800141c <ResetPin>
			  ResetPin(IN8Port, IN8Pin);
 8001536:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800153a:	4823      	ldr	r0, [pc, #140]	; (80015c8 <stepper_wave_drive1+0xd4>)
 800153c:	f7ff ff6e 	bl	800141c <ResetPin>
			  break;
 8001540:	e03e      	b.n	80015c0 <stepper_wave_drive1+0xcc>

		case 1:
			  ResetPin(IN5Port, IN5Pin);
 8001542:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001546:	4820      	ldr	r0, [pc, #128]	; (80015c8 <stepper_wave_drive1+0xd4>)
 8001548:	f7ff ff68 	bl	800141c <ResetPin>
			  SetPin  (IN6Port, IN6Pin);
 800154c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001550:	481d      	ldr	r0, [pc, #116]	; (80015c8 <stepper_wave_drive1+0xd4>)
 8001552:	f7ff ff53 	bl	80013fc <SetPin>
			  ResetPin(IN7Port, IN7Pin);
 8001556:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800155a:	481b      	ldr	r0, [pc, #108]	; (80015c8 <stepper_wave_drive1+0xd4>)
 800155c:	f7ff ff5e 	bl	800141c <ResetPin>
			  ResetPin(IN8Port, IN8Pin);
 8001560:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001564:	4818      	ldr	r0, [pc, #96]	; (80015c8 <stepper_wave_drive1+0xd4>)
 8001566:	f7ff ff59 	bl	800141c <ResetPin>
			  break;
 800156a:	e029      	b.n	80015c0 <stepper_wave_drive1+0xcc>

		case 2:
			  ResetPin(IN5Port, IN5Pin);
 800156c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001570:	4815      	ldr	r0, [pc, #84]	; (80015c8 <stepper_wave_drive1+0xd4>)
 8001572:	f7ff ff53 	bl	800141c <ResetPin>
			  ResetPin(IN6Port, IN6Pin);
 8001576:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800157a:	4813      	ldr	r0, [pc, #76]	; (80015c8 <stepper_wave_drive1+0xd4>)
 800157c:	f7ff ff4e 	bl	800141c <ResetPin>
			  SetPin  (IN7Port, IN7Pin);
 8001580:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001584:	4810      	ldr	r0, [pc, #64]	; (80015c8 <stepper_wave_drive1+0xd4>)
 8001586:	f7ff ff39 	bl	80013fc <SetPin>
			  ResetPin(IN8Port, IN8Pin);
 800158a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800158e:	480e      	ldr	r0, [pc, #56]	; (80015c8 <stepper_wave_drive1+0xd4>)
 8001590:	f7ff ff44 	bl	800141c <ResetPin>
			  break;
 8001594:	e014      	b.n	80015c0 <stepper_wave_drive1+0xcc>

		case 3:
			  ResetPin(IN5Port, IN5Pin);
 8001596:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800159a:	480b      	ldr	r0, [pc, #44]	; (80015c8 <stepper_wave_drive1+0xd4>)
 800159c:	f7ff ff3e 	bl	800141c <ResetPin>
			  ResetPin(IN6Port, IN6Pin);
 80015a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a4:	4808      	ldr	r0, [pc, #32]	; (80015c8 <stepper_wave_drive1+0xd4>)
 80015a6:	f7ff ff39 	bl	800141c <ResetPin>
			  ResetPin(IN7Port, IN7Pin);
 80015aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ae:	4806      	ldr	r0, [pc, #24]	; (80015c8 <stepper_wave_drive1+0xd4>)
 80015b0:	f7ff ff34 	bl	800141c <ResetPin>
			  SetPin  (IN8Port, IN8Pin);
 80015b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015b8:	4803      	ldr	r0, [pc, #12]	; (80015c8 <stepper_wave_drive1+0xd4>)
 80015ba:	f7ff ff1f 	bl	80013fc <SetPin>

		}
}
 80015be:	e7ff      	b.n	80015c0 <stepper_wave_drive1+0xcc>
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40010c00 	.word	0x40010c00

080015cc <stepper_set_rpm>:
void stepper_set_rpm (int rpm)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	delay(60000000/stepsperrev/rpm);
 80015d4:	f247 2270 	movw	r2, #29296	; 0x7270
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	fb92 f3f3 	sdiv	r3, r2, r3
 80015de:	b29b      	uxth	r3, r3
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fef3 	bl	80013cc <delay>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <stepper_step_angle>:

void stepper_step_angle (int angle, int direction, int rpm)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
	float anglepersequence = 0.703125;  // 360 = 512 sequences
 80015fc:	4b21      	ldr	r3, [pc, #132]	; (8001684 <stepper_step_angle+0x94>)
 80015fe:	61bb      	str	r3, [r7, #24]
	int numberofsequences = (int) (angle/anglepersequence);
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f7ff fa85 	bl	8000b10 <__aeabi_i2f>
 8001606:	4603      	mov	r3, r0
 8001608:	69b9      	ldr	r1, [r7, #24]
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fb88 	bl	8000d20 <__aeabi_fdiv>
 8001610:	4603      	mov	r3, r0
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fc20 	bl	8000e58 <__aeabi_f2iz>
 8001618:	4603      	mov	r3, r0
 800161a:	617b      	str	r3, [r7, #20]

	for (int seq=0; seq<numberofsequences; seq++)
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
 8001620:	e027      	b.n	8001672 <stepper_step_angle+0x82>
	{
		if (direction == 0)  // for clockwise
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10f      	bne.n	8001648 <stepper_step_angle+0x58>
		{
			for (int step=3; step>=0; step--)
 8001628:	2303      	movs	r3, #3
 800162a:	623b      	str	r3, [r7, #32]
 800162c:	e008      	b.n	8001640 <stepper_step_angle+0x50>
			{
				stepper_wave_drive(step);
 800162e:	6a38      	ldr	r0, [r7, #32]
 8001630:	f7ff ff04 	bl	800143c <stepper_wave_drive>
				stepper_set_rpm(rpm);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff ffc9 	bl	80015cc <stepper_set_rpm>
			for (int step=3; step>=0; step--)
 800163a:	6a3b      	ldr	r3, [r7, #32]
 800163c:	3b01      	subs	r3, #1
 800163e:	623b      	str	r3, [r7, #32]
 8001640:	6a3b      	ldr	r3, [r7, #32]
 8001642:	2b00      	cmp	r3, #0
 8001644:	daf3      	bge.n	800162e <stepper_step_angle+0x3e>
 8001646:	e011      	b.n	800166c <stepper_step_angle+0x7c>
			}

		}

		else if (direction == 1)  // for anti-clockwise
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d10e      	bne.n	800166c <stepper_step_angle+0x7c>
		{
			for (int step=0; step<4; step++)
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
 8001652:	e008      	b.n	8001666 <stepper_step_angle+0x76>
			{
				stepper_wave_drive(step);
 8001654:	69f8      	ldr	r0, [r7, #28]
 8001656:	f7ff fef1 	bl	800143c <stepper_wave_drive>
				stepper_set_rpm(rpm);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ffb6 	bl	80015cc <stepper_set_rpm>
			for (int step=0; step<4; step++)
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	3301      	adds	r3, #1
 8001664:	61fb      	str	r3, [r7, #28]
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	2b03      	cmp	r3, #3
 800166a:	ddf3      	ble.n	8001654 <stepper_step_angle+0x64>
	for (int seq=0; seq<numberofsequences; seq++)
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	3301      	adds	r3, #1
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
 8001672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	429a      	cmp	r2, r3
 8001678:	dbd3      	blt.n	8001622 <stepper_step_angle+0x32>
			}
		}
	}
}
 800167a:	bf00      	nop
 800167c:	bf00      	nop
 800167e:	3728      	adds	r7, #40	; 0x28
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	3f340000 	.word	0x3f340000

08001688 <stepper_step_angle1>:
void stepper_step_angle1 (int angle, int direction, int rpm)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
	float anglepersequence = 0.703125;  // 360 = 512 sequences
 8001694:	4b21      	ldr	r3, [pc, #132]	; (800171c <stepper_step_angle1+0x94>)
 8001696:	61bb      	str	r3, [r7, #24]
	int numberofsequences = (int) (angle/anglepersequence);
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f7ff fa39 	bl	8000b10 <__aeabi_i2f>
 800169e:	4603      	mov	r3, r0
 80016a0:	69b9      	ldr	r1, [r7, #24]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fb3c 	bl	8000d20 <__aeabi_fdiv>
 80016a8:	4603      	mov	r3, r0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fbd4 	bl	8000e58 <__aeabi_f2iz>
 80016b0:	4603      	mov	r3, r0
 80016b2:	617b      	str	r3, [r7, #20]

	for (int seq=0; seq<numberofsequences; seq++)
 80016b4:	2300      	movs	r3, #0
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
 80016b8:	e027      	b.n	800170a <stepper_step_angle1+0x82>
	{
		if (direction == 0)  // for clockwise
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d10f      	bne.n	80016e0 <stepper_step_angle1+0x58>
		{
			for (int step=3; step>=0; step--)
 80016c0:	2303      	movs	r3, #3
 80016c2:	623b      	str	r3, [r7, #32]
 80016c4:	e008      	b.n	80016d8 <stepper_step_angle1+0x50>
			{
				stepper_wave_drive1(step);
 80016c6:	6a38      	ldr	r0, [r7, #32]
 80016c8:	f7ff ff14 	bl	80014f4 <stepper_wave_drive1>
				stepper_set_rpm(rpm);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff ff7d 	bl	80015cc <stepper_set_rpm>
			for (int step=3; step>=0; step--)
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	3b01      	subs	r3, #1
 80016d6:	623b      	str	r3, [r7, #32]
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	daf3      	bge.n	80016c6 <stepper_step_angle1+0x3e>
 80016de:	e011      	b.n	8001704 <stepper_step_angle1+0x7c>
			}

		}

		else if (direction == 1)  // for anti-clockwise
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d10e      	bne.n	8001704 <stepper_step_angle1+0x7c>
		{
			for (int step=0; step<4; step++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
 80016ea:	e008      	b.n	80016fe <stepper_step_angle1+0x76>
			{
				stepper_wave_drive1(step);
 80016ec:	69f8      	ldr	r0, [r7, #28]
 80016ee:	f7ff ff01 	bl	80014f4 <stepper_wave_drive1>
				stepper_set_rpm(rpm);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff ff6a 	bl	80015cc <stepper_set_rpm>
			for (int step=0; step<4; step++)
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	3301      	adds	r3, #1
 80016fc:	61fb      	str	r3, [r7, #28]
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	2b03      	cmp	r3, #3
 8001702:	ddf3      	ble.n	80016ec <stepper_step_angle1+0x64>
	for (int seq=0; seq<numberofsequences; seq++)
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	3301      	adds	r3, #1
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
 800170a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	429a      	cmp	r2, r3
 8001710:	dbd3      	blt.n	80016ba <stepper_step_angle1+0x32>
			}
		}
	}
}
 8001712:	bf00      	nop
 8001714:	bf00      	nop
 8001716:	3728      	adds	r7, #40	; 0x28
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	3f340000 	.word	0x3f340000

08001720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001726:	f000 fccf 	bl	80020c8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800172a:	f000 f939 	bl	80019a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800172e:	f000 fa97 	bl	8001c60 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001732:	f000 fa1b 	bl	8001b6c <MX_TIM1_Init>
  MX_I2C2_Init();
 8001736:	f000 f9eb 	bl	8001b10 <MX_I2C2_Init>
  MX_ADC1_Init();
 800173a:	f000 f98d 	bl	8001a58 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800173e:	f000 fa65 	bl	8001c0c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001742:	f7ff fdf0 	bl	8001326 <lcd_init>
 // HAL_UART_Receive_IT(&huart1, rx, sizeof(rx));
  HAL_TIM_Base_Start(&htim1);  // khởi tạo hàm-=timer
 8001746:	4884      	ldr	r0, [pc, #528]	; (8001958 <main+0x238>)
 8001748:	f002 ff20 	bl	800458c <HAL_TIM_Base_Start>

  ESP_Init("iPhone","12345678");
 800174c:	4983      	ldr	r1, [pc, #524]	; (800195c <main+0x23c>)
 800174e:	4884      	ldr	r0, [pc, #528]	; (8001960 <main+0x240>)
 8001750:	f7ff fbc6 	bl	8000ee0 <ESP_Init>
  uint32_t time=HAL_GetTick();
 8001754:	f000 fd10 	bl	8002178 <HAL_GetTick>
 8001758:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN 3 */
	  /* adc*/
	  //HAL_UART_Transmit(&huart1, data, sizeof(data), 100);


	  HAL_ADC_Start(&hadc1);
 800175a:	4882      	ldr	r0, [pc, #520]	; (8001964 <main+0x244>)
 800175c:	f000 fe12 	bl	8002384 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 300);
 8001760:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001764:	487f      	ldr	r0, [pc, #508]	; (8001964 <main+0x244>)
 8001766:	f000 fee7 	bl	8002538 <HAL_ADC_PollForConversion>
	  adc_ldr7 =HAL_ADC_GetValue(&hadc1);
 800176a:	487e      	ldr	r0, [pc, #504]	; (8001964 <main+0x244>)
 800176c:	f000 ffea 	bl	8002744 <HAL_ADC_GetValue>
 8001770:	4603      	mov	r3, r0
 8001772:	b29a      	uxth	r2, r3
 8001774:	4b7c      	ldr	r3, [pc, #496]	; (8001968 <main+0x248>)
 8001776:	801a      	strh	r2, [r3, #0]
	  V_ldr7=(float)((adc_ldr7/4095.00)*5);
 8001778:	4b7b      	ldr	r3, [pc, #492]	; (8001968 <main+0x248>)
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe fe41 	bl	8000404 <__aeabi_i2d>
 8001782:	a373      	add	r3, pc, #460	; (adr r3, 8001950 <main+0x230>)
 8001784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001788:	f7fe ffd0 	bl	800072c <__aeabi_ddiv>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	4b74      	ldr	r3, [pc, #464]	; (800196c <main+0x24c>)
 800179a:	f7fe fe9d 	bl	80004d8 <__aeabi_dmul>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4610      	mov	r0, r2
 80017a4:	4619      	mov	r1, r3
 80017a6:	f7ff f8a9 	bl	80008fc <__aeabi_d2f>
 80017aa:	4603      	mov	r3, r0
 80017ac:	4a70      	ldr	r2, [pc, #448]	; (8001970 <main+0x250>)
 80017ae:	6013      	str	r3, [r2, #0]
	  ESP_Send_Data("ETVL3RB9PHFN259M", 1, adc_ldr7);
 80017b0:	4b6d      	ldr	r3, [pc, #436]	; (8001968 <main+0x248>)
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	2101      	movs	r1, #1
 80017b8:	486e      	ldr	r0, [pc, #440]	; (8001974 <main+0x254>)
 80017ba:	f7ff fbdd 	bl	8000f78 <ESP_Send_Data>
	  HAL_ADC_PollForConversion(&hadc1, 300);
 80017be:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80017c2:	4868      	ldr	r0, [pc, #416]	; (8001964 <main+0x244>)
 80017c4:	f000 feb8 	bl	8002538 <HAL_ADC_PollForConversion>
	  adc_ldr8 =HAL_ADC_GetValue(&hadc1);
 80017c8:	4866      	ldr	r0, [pc, #408]	; (8001964 <main+0x244>)
 80017ca:	f000 ffbb 	bl	8002744 <HAL_ADC_GetValue>
 80017ce:	4603      	mov	r3, r0
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	4b69      	ldr	r3, [pc, #420]	; (8001978 <main+0x258>)
 80017d4:	801a      	strh	r2, [r3, #0]
	  V_ldr8=(float)((adc_ldr8/4095.00)*5);
 80017d6:	4b68      	ldr	r3, [pc, #416]	; (8001978 <main+0x258>)
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe fe12 	bl	8000404 <__aeabi_i2d>
 80017e0:	a35b      	add	r3, pc, #364	; (adr r3, 8001950 <main+0x230>)
 80017e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e6:	f7fe ffa1 	bl	800072c <__aeabi_ddiv>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4610      	mov	r0, r2
 80017f0:	4619      	mov	r1, r3
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	4b5d      	ldr	r3, [pc, #372]	; (800196c <main+0x24c>)
 80017f8:	f7fe fe6e 	bl	80004d8 <__aeabi_dmul>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4610      	mov	r0, r2
 8001802:	4619      	mov	r1, r3
 8001804:	f7ff f87a 	bl	80008fc <__aeabi_d2f>
 8001808:	4603      	mov	r3, r0
 800180a:	4a5c      	ldr	r2, [pc, #368]	; (800197c <main+0x25c>)
 800180c:	6013      	str	r3, [r2, #0]
	  HAL_ADC_PollForConversion(&hadc1, 300);
 800180e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001812:	4854      	ldr	r0, [pc, #336]	; (8001964 <main+0x244>)
 8001814:	f000 fe90 	bl	8002538 <HAL_ADC_PollForConversion>
	  adc_ldr9 =HAL_ADC_GetValue(&hadc1);
 8001818:	4852      	ldr	r0, [pc, #328]	; (8001964 <main+0x244>)
 800181a:	f000 ff93 	bl	8002744 <HAL_ADC_GetValue>
 800181e:	4603      	mov	r3, r0
 8001820:	b29a      	uxth	r2, r3
 8001822:	4b57      	ldr	r3, [pc, #348]	; (8001980 <main+0x260>)
 8001824:	801a      	strh	r2, [r3, #0]
	  V_ldr9=(float)((adc_ldr9/4095.00)*5);
 8001826:	4b56      	ldr	r3, [pc, #344]	; (8001980 <main+0x260>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fdea 	bl	8000404 <__aeabi_i2d>
 8001830:	a347      	add	r3, pc, #284	; (adr r3, 8001950 <main+0x230>)
 8001832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001836:	f7fe ff79 	bl	800072c <__aeabi_ddiv>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	4b49      	ldr	r3, [pc, #292]	; (800196c <main+0x24c>)
 8001848:	f7fe fe46 	bl	80004d8 <__aeabi_dmul>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4610      	mov	r0, r2
 8001852:	4619      	mov	r1, r3
 8001854:	f7ff f852 	bl	80008fc <__aeabi_d2f>
 8001858:	4603      	mov	r3, r0
 800185a:	4a4a      	ldr	r2, [pc, #296]	; (8001984 <main+0x264>)
 800185c:	6013      	str	r3, [r2, #0]
	  sprintf(buff7,"adc7_value: %d",adc_ldr7);
 800185e:	4b42      	ldr	r3, [pc, #264]	; (8001968 <main+0x248>)
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	461a      	mov	r2, r3
 8001864:	4948      	ldr	r1, [pc, #288]	; (8001988 <main+0x268>)
 8001866:	4849      	ldr	r0, [pc, #292]	; (800198c <main+0x26c>)
 8001868:	f003 fd22 	bl	80052b0 <siprintf>
   	  sprintf(buff8,"adc8_value: %d",adc_ldr8);
 800186c:	4b42      	ldr	r3, [pc, #264]	; (8001978 <main+0x258>)
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	461a      	mov	r2, r3
 8001872:	4947      	ldr	r1, [pc, #284]	; (8001990 <main+0x270>)
 8001874:	4847      	ldr	r0, [pc, #284]	; (8001994 <main+0x274>)
 8001876:	f003 fd1b 	bl	80052b0 <siprintf>
	  sprintf(buff9,"adc9_value: %d",adc_ldr9);
 800187a:	4b41      	ldr	r3, [pc, #260]	; (8001980 <main+0x260>)
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	4945      	ldr	r1, [pc, #276]	; (8001998 <main+0x278>)
 8001882:	4846      	ldr	r0, [pc, #280]	; (800199c <main+0x27c>)
 8001884:	f003 fd14 	bl	80052b0 <siprintf>
      lcd_put_cur(0, 0);
 8001888:	2100      	movs	r1, #0
 800188a:	2000      	movs	r0, #0
 800188c:	f7ff fd2c 	bl	80012e8 <lcd_put_cur>
	  lcd_send_string(buff7);
 8001890:	483e      	ldr	r0, [pc, #248]	; (800198c <main+0x26c>)
 8001892:	f7ff fd85 	bl	80013a0 <lcd_send_string>
	  lcd_put_cur(1, 0);
 8001896:	2100      	movs	r1, #0
 8001898:	2001      	movs	r0, #1
 800189a:	f7ff fd25 	bl	80012e8 <lcd_put_cur>
	  lcd_send_string(buff8);
 800189e:	483d      	ldr	r0, [pc, #244]	; (8001994 <main+0x274>)
 80018a0:	f7ff fd7e 	bl	80013a0 <lcd_send_string>
	  //HAL_UART_Transmit(&huart1, (uint8_t*)buff7, sizeof(buff7), 100);
	  HAL_ADC_Stop(&hadc1);
 80018a4:	482f      	ldr	r0, [pc, #188]	; (8001964 <main+0x244>)
 80018a6:	f000 fe1b 	bl	80024e0 <HAL_ADC_Stop>



		  if(adc_ldr7 > adc_ldr8 && (adc_ldr7- adc_ldr8)>100){
 80018aa:	4b2f      	ldr	r3, [pc, #188]	; (8001968 <main+0x248>)
 80018ac:	881a      	ldrh	r2, [r3, #0]
 80018ae:	4b32      	ldr	r3, [pc, #200]	; (8001978 <main+0x258>)
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d90d      	bls.n	80018d2 <main+0x1b2>
 80018b6:	4b2c      	ldr	r3, [pc, #176]	; (8001968 <main+0x248>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	4b2e      	ldr	r3, [pc, #184]	; (8001978 <main+0x258>)
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b64      	cmp	r3, #100	; 0x64
 80018c4:	dd05      	ble.n	80018d2 <main+0x1b2>
			  stepper_step_angle(18, 0,13);
 80018c6:	220d      	movs	r2, #13
 80018c8:	2100      	movs	r1, #0
 80018ca:	2012      	movs	r0, #18
 80018cc:	f7ff fe90 	bl	80015f0 <stepper_step_angle>
 80018d0:	e012      	b.n	80018f8 <main+0x1d8>
		  }
		  else if(adc_ldr8 > adc_ldr7 && (adc_ldr8- adc_ldr7)>100){
 80018d2:	4b29      	ldr	r3, [pc, #164]	; (8001978 <main+0x258>)
 80018d4:	881a      	ldrh	r2, [r3, #0]
 80018d6:	4b24      	ldr	r3, [pc, #144]	; (8001968 <main+0x248>)
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d90c      	bls.n	80018f8 <main+0x1d8>
 80018de:	4b26      	ldr	r3, [pc, #152]	; (8001978 <main+0x258>)
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	4b20      	ldr	r3, [pc, #128]	; (8001968 <main+0x248>)
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b64      	cmp	r3, #100	; 0x64
 80018ec:	dd04      	ble.n	80018f8 <main+0x1d8>
			  stepper_step_angle(18, 1, 13);
 80018ee:	220d      	movs	r2, #13
 80018f0:	2101      	movs	r1, #1
 80018f2:	2012      	movs	r0, #18
 80018f4:	f7ff fe7c 	bl	80015f0 <stepper_step_angle>
		  }


		  if(adc_ldr7 > adc_ldr9 && (adc_ldr7- adc_ldr9)>100){
 80018f8:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <main+0x248>)
 80018fa:	881a      	ldrh	r2, [r3, #0]
 80018fc:	4b20      	ldr	r3, [pc, #128]	; (8001980 <main+0x260>)
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d90d      	bls.n	8001920 <main+0x200>
 8001904:	4b18      	ldr	r3, [pc, #96]	; (8001968 <main+0x248>)
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <main+0x260>)
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b64      	cmp	r3, #100	; 0x64
 8001912:	dd05      	ble.n	8001920 <main+0x200>
			  stepper_step_angle1(18, 0,13);
 8001914:	220d      	movs	r2, #13
 8001916:	2100      	movs	r1, #0
 8001918:	2012      	movs	r0, #18
 800191a:	f7ff feb5 	bl	8001688 <stepper_step_angle1>
 800191e:	e014      	b.n	800194a <main+0x22a>
		  }
		  else if(adc_ldr9 > adc_ldr7 && (adc_ldr9- adc_ldr7)>100){
 8001920:	4b17      	ldr	r3, [pc, #92]	; (8001980 <main+0x260>)
 8001922:	881a      	ldrh	r2, [r3, #0]
 8001924:	4b10      	ldr	r3, [pc, #64]	; (8001968 <main+0x248>)
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	f67f af16 	bls.w	800175a <main+0x3a>
 800192e:	4b14      	ldr	r3, [pc, #80]	; (8001980 <main+0x260>)
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <main+0x248>)
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b64      	cmp	r3, #100	; 0x64
 800193c:	f77f af0d 	ble.w	800175a <main+0x3a>
		      stepper_step_angle1(18, 1, 13);
 8001940:	220d      	movs	r2, #13
 8001942:	2101      	movs	r1, #1
 8001944:	2012      	movs	r0, #18
 8001946:	f7ff fe9f 	bl	8001688 <stepper_step_angle1>
	  HAL_ADC_Start(&hadc1);
 800194a:	e706      	b.n	800175a <main+0x3a>
 800194c:	f3af 8000 	nop.w
 8001950:	00000000 	.word	0x00000000
 8001954:	40affe00 	.word	0x40affe00
 8001958:	200001a8 	.word	0x200001a8
 800195c:	08005c94 	.word	0x08005c94
 8001960:	08005ca0 	.word	0x08005ca0
 8001964:	20000124 	.word	0x20000124
 8001968:	20000234 	.word	0x20000234
 800196c:	40140000 	.word	0x40140000
 8001970:	20000238 	.word	0x20000238
 8001974:	08005ca8 	.word	0x08005ca8
 8001978:	2000023c 	.word	0x2000023c
 800197c:	20000240 	.word	0x20000240
 8001980:	20000244 	.word	0x20000244
 8001984:	20000248 	.word	0x20000248
 8001988:	08005cbc 	.word	0x08005cbc
 800198c:	2000024c 	.word	0x2000024c
 8001990:	08005ccc 	.word	0x08005ccc
 8001994:	2000025c 	.word	0x2000025c
 8001998:	08005cdc 	.word	0x08005cdc
 800199c:	2000026c 	.word	0x2000026c

080019a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b094      	sub	sp, #80	; 0x50
 80019a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019aa:	2228      	movs	r2, #40	; 0x28
 80019ac:	2100      	movs	r1, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f003 fc76 	bl	80052a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019d0:	2301      	movs	r3, #1
 80019d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019da:	2300      	movs	r3, #0
 80019dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019de:	2301      	movs	r3, #1
 80019e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e2:	2302      	movs	r3, #2
 80019e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019ec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019f6:	4618      	mov	r0, r3
 80019f8:	f001 ffe8 	bl	80039cc <HAL_RCC_OscConfig>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001a02:	f000 f98d 	bl	8001d20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a06:	230f      	movs	r3, #15
 8001a08:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a16:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	2102      	movs	r1, #2
 8001a22:	4618      	mov	r0, r3
 8001a24:	f002 fa54 	bl	8003ed0 <HAL_RCC_ClockConfig>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001a2e:	f000 f977 	bl	8001d20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a32:	2302      	movs	r3, #2
 8001a34:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a3a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f002 fbde 	bl	8004200 <HAL_RCCEx_PeriphCLKConfig>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001a4a:	f000 f969 	bl	8001d20 <Error_Handler>
  }
}
 8001a4e:	bf00      	nop
 8001a50:	3750      	adds	r7, #80	; 0x50
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a5e:	1d3b      	adds	r3, r7, #4
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a68:	4b27      	ldr	r3, [pc, #156]	; (8001b08 <MX_ADC1_Init+0xb0>)
 8001a6a:	4a28      	ldr	r2, [pc, #160]	; (8001b0c <MX_ADC1_Init+0xb4>)
 8001a6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a6e:	4b26      	ldr	r3, [pc, #152]	; (8001b08 <MX_ADC1_Init+0xb0>)
 8001a70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a76:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <MX_ADC1_Init+0xb0>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a7c:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <MX_ADC1_Init+0xb0>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a82:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <MX_ADC1_Init+0xb0>)
 8001a84:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001a88:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a8a:	4b1f      	ldr	r3, [pc, #124]	; (8001b08 <MX_ADC1_Init+0xb0>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8001a90:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <MX_ADC1_Init+0xb0>)
 8001a92:	2203      	movs	r2, #3
 8001a94:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a96:	481c      	ldr	r0, [pc, #112]	; (8001b08 <MX_ADC1_Init+0xb0>)
 8001a98:	f000 fb9c 	bl	80021d4 <HAL_ADC_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001aa2:	f000 f93d 	bl	8001d20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001aa6:	2307      	movs	r3, #7
 8001aa8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001aae:	2305      	movs	r3, #5
 8001ab0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab2:	1d3b      	adds	r3, r7, #4
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4814      	ldr	r0, [pc, #80]	; (8001b08 <MX_ADC1_Init+0xb0>)
 8001ab8:	f000 fe50 	bl	800275c <HAL_ADC_ConfigChannel>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001ac2:	f000 f92d 	bl	8001d20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001ac6:	2308      	movs	r3, #8
 8001ac8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001aca:	2302      	movs	r3, #2
 8001acc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	480d      	ldr	r0, [pc, #52]	; (8001b08 <MX_ADC1_Init+0xb0>)
 8001ad4:	f000 fe42 	bl	800275c <HAL_ADC_ConfigChannel>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001ade:	f000 f91f 	bl	8001d20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001ae2:	2309      	movs	r3, #9
 8001ae4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	4619      	mov	r1, r3
 8001aee:	4806      	ldr	r0, [pc, #24]	; (8001b08 <MX_ADC1_Init+0xb0>)
 8001af0:	f000 fe34 	bl	800275c <HAL_ADC_ConfigChannel>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001afa:	f000 f911 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000124 	.word	0x20000124
 8001b0c:	40012400 	.word	0x40012400

08001b10 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <MX_I2C2_Init+0x50>)
 8001b16:	4a13      	ldr	r2, [pc, #76]	; (8001b64 <MX_I2C2_Init+0x54>)
 8001b18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <MX_I2C2_Init+0x50>)
 8001b1c:	4a12      	ldr	r2, [pc, #72]	; (8001b68 <MX_I2C2_Init+0x58>)
 8001b1e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b20:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <MX_I2C2_Init+0x50>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <MX_I2C2_Init+0x50>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <MX_I2C2_Init+0x50>)
 8001b2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b32:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b34:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <MX_I2C2_Init+0x50>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <MX_I2C2_Init+0x50>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b40:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <MX_I2C2_Init+0x50>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <MX_I2C2_Init+0x50>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b4c:	4804      	ldr	r0, [pc, #16]	; (8001b60 <MX_I2C2_Init+0x50>)
 8001b4e:	f001 faf3 	bl	8003138 <HAL_I2C_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b58:	f000 f8e2 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000154 	.word	0x20000154
 8001b64:	40005800 	.word	0x40005800
 8001b68:	000186a0 	.word	0x000186a0

08001b6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b72:	f107 0308 	add.w	r3, r7, #8
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b80:	463b      	mov	r3, r7
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b88:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <MX_TIM1_Init+0x98>)
 8001b8a:	4a1f      	ldr	r2, [pc, #124]	; (8001c08 <MX_TIM1_Init+0x9c>)
 8001b8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001b8e:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <MX_TIM1_Init+0x98>)
 8001b90:	2247      	movs	r2, #71	; 0x47
 8001b92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b94:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <MX_TIM1_Init+0x98>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <MX_TIM1_Init+0x98>)
 8001b9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001ba0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba2:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <MX_TIM1_Init+0x98>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ba8:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <MX_TIM1_Init+0x98>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <MX_TIM1_Init+0x98>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bb4:	4813      	ldr	r0, [pc, #76]	; (8001c04 <MX_TIM1_Init+0x98>)
 8001bb6:	f002 fc99 	bl	80044ec <HAL_TIM_Base_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001bc0:	f000 f8ae 	bl	8001d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bca:	f107 0308 	add.w	r3, r7, #8
 8001bce:	4619      	mov	r1, r3
 8001bd0:	480c      	ldr	r0, [pc, #48]	; (8001c04 <MX_TIM1_Init+0x98>)
 8001bd2:	f002 fd25 	bl	8004620 <HAL_TIM_ConfigClockSource>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001bdc:	f000 f8a0 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be0:	2300      	movs	r3, #0
 8001be2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001be8:	463b      	mov	r3, r7
 8001bea:	4619      	mov	r1, r3
 8001bec:	4805      	ldr	r0, [pc, #20]	; (8001c04 <MX_TIM1_Init+0x98>)
 8001bee:	f002 fed3 	bl	8004998 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001bf8:	f000 f892 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bfc:	bf00      	nop
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	200001a8 	.word	0x200001a8
 8001c08:	40012c00 	.word	0x40012c00

08001c0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c12:	4a12      	ldr	r2, [pc, #72]	; (8001c5c <MX_USART1_UART_Init+0x50>)
 8001c14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c32:	220c      	movs	r2, #12
 8001c34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c36:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c42:	4805      	ldr	r0, [pc, #20]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c44:	f002 ff06 	bl	8004a54 <HAL_UART_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c4e:	f000 f867 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	200001f0 	.word	0x200001f0
 8001c5c:	40013800 	.word	0x40013800

08001c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c66:	f107 0310 	add.w	r3, r7, #16
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c74:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <MX_GPIO_Init+0xb4>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	4a26      	ldr	r2, [pc, #152]	; (8001d14 <MX_GPIO_Init+0xb4>)
 8001c7a:	f043 0320 	orr.w	r3, r3, #32
 8001c7e:	6193      	str	r3, [r2, #24]
 8001c80:	4b24      	ldr	r3, [pc, #144]	; (8001d14 <MX_GPIO_Init+0xb4>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f003 0320 	and.w	r3, r3, #32
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8c:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <MX_GPIO_Init+0xb4>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	4a20      	ldr	r2, [pc, #128]	; (8001d14 <MX_GPIO_Init+0xb4>)
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	6193      	str	r3, [r2, #24]
 8001c98:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <MX_GPIO_Init+0xb4>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <MX_GPIO_Init+0xb4>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	4a1a      	ldr	r2, [pc, #104]	; (8001d14 <MX_GPIO_Init+0xb4>)
 8001caa:	f043 0308 	orr.w	r3, r3, #8
 8001cae:	6193      	str	r3, [r2, #24]
 8001cb0:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <MX_GPIO_Init+0xb4>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	210f      	movs	r1, #15
 8001cc0:	4815      	ldr	r0, [pc, #84]	; (8001d18 <MX_GPIO_Init+0xb8>)
 8001cc2:	f001 fa21 	bl	8003108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001ccc:	4813      	ldr	r0, [pc, #76]	; (8001d1c <MX_GPIO_Init+0xbc>)
 8001cce:	f001 fa1b 	bl	8003108 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001cd2:	230f      	movs	r3, #15
 8001cd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce2:	f107 0310 	add.w	r3, r7, #16
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	480b      	ldr	r0, [pc, #44]	; (8001d18 <MX_GPIO_Init+0xb8>)
 8001cea:	f001 f889 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001cee:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001cf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d00:	f107 0310 	add.w	r3, r7, #16
 8001d04:	4619      	mov	r1, r3
 8001d06:	4805      	ldr	r0, [pc, #20]	; (8001d1c <MX_GPIO_Init+0xbc>)
 8001d08:	f001 f87a 	bl	8002e00 <HAL_GPIO_Init>

}
 8001d0c:	bf00      	nop
 8001d0e:	3720      	adds	r7, #32
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40010800 	.word	0x40010800
 8001d1c:	40010c00 	.word	0x40010c00

08001d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d24:	b672      	cpsid	i
}
 8001d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d28:	e7fe      	b.n	8001d28 <Error_Handler+0x8>
	...

08001d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d32:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <HAL_MspInit+0x5c>)
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	4a14      	ldr	r2, [pc, #80]	; (8001d88 <HAL_MspInit+0x5c>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6193      	str	r3, [r2, #24]
 8001d3e:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <HAL_MspInit+0x5c>)
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d4a:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <HAL_MspInit+0x5c>)
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	4a0e      	ldr	r2, [pc, #56]	; (8001d88 <HAL_MspInit+0x5c>)
 8001d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d54:	61d3      	str	r3, [r2, #28]
 8001d56:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <HAL_MspInit+0x5c>)
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	607b      	str	r3, [r7, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d62:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <HAL_MspInit+0x60>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <HAL_MspInit+0x60>)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40010000 	.word	0x40010000

08001d90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	; 0x28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0318 	add.w	r3, r7, #24
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a1f      	ldr	r2, [pc, #124]	; (8001e28 <HAL_ADC_MspInit+0x98>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d137      	bne.n	8001e20 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001db0:	4b1e      	ldr	r3, [pc, #120]	; (8001e2c <HAL_ADC_MspInit+0x9c>)
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	4a1d      	ldr	r2, [pc, #116]	; (8001e2c <HAL_ADC_MspInit+0x9c>)
 8001db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dba:	6193      	str	r3, [r2, #24]
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <HAL_ADC_MspInit+0x9c>)
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc8:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <HAL_ADC_MspInit+0x9c>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	4a17      	ldr	r2, [pc, #92]	; (8001e2c <HAL_ADC_MspInit+0x9c>)
 8001dce:	f043 0304 	orr.w	r3, r3, #4
 8001dd2:	6193      	str	r3, [r2, #24]
 8001dd4:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <HAL_ADC_MspInit+0x9c>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de0:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <HAL_ADC_MspInit+0x9c>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	4a11      	ldr	r2, [pc, #68]	; (8001e2c <HAL_ADC_MspInit+0x9c>)
 8001de6:	f043 0308 	orr.w	r3, r3, #8
 8001dea:	6193      	str	r3, [r2, #24]
 8001dec:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <HAL_ADC_MspInit+0x9c>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e00:	f107 0318 	add.w	r3, r7, #24
 8001e04:	4619      	mov	r1, r3
 8001e06:	480a      	ldr	r0, [pc, #40]	; (8001e30 <HAL_ADC_MspInit+0xa0>)
 8001e08:	f000 fffa 	bl	8002e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e10:	2303      	movs	r3, #3
 8001e12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e14:	f107 0318 	add.w	r3, r7, #24
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4806      	ldr	r0, [pc, #24]	; (8001e34 <HAL_ADC_MspInit+0xa4>)
 8001e1c:	f000 fff0 	bl	8002e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e20:	bf00      	nop
 8001e22:	3728      	adds	r7, #40	; 0x28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40012400 	.word	0x40012400
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40010800 	.word	0x40010800
 8001e34:	40010c00 	.word	0x40010c00

08001e38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 0310 	add.w	r3, r7, #16
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a16      	ldr	r2, [pc, #88]	; (8001eac <HAL_I2C_MspInit+0x74>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d124      	bne.n	8001ea2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e58:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <HAL_I2C_MspInit+0x78>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	4a14      	ldr	r2, [pc, #80]	; (8001eb0 <HAL_I2C_MspInit+0x78>)
 8001e5e:	f043 0308 	orr.w	r3, r3, #8
 8001e62:	6193      	str	r3, [r2, #24]
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <HAL_I2C_MspInit+0x78>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e70:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e76:	2312      	movs	r3, #18
 8001e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7e:	f107 0310 	add.w	r3, r7, #16
 8001e82:	4619      	mov	r1, r3
 8001e84:	480b      	ldr	r0, [pc, #44]	; (8001eb4 <HAL_I2C_MspInit+0x7c>)
 8001e86:	f000 ffbb 	bl	8002e00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e8a:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_I2C_MspInit+0x78>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	4a08      	ldr	r2, [pc, #32]	; (8001eb0 <HAL_I2C_MspInit+0x78>)
 8001e90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e94:	61d3      	str	r3, [r2, #28]
 8001e96:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_I2C_MspInit+0x78>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ea2:	bf00      	nop
 8001ea4:	3720      	adds	r7, #32
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40005800 	.word	0x40005800
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40010c00 	.word	0x40010c00

08001eb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a09      	ldr	r2, [pc, #36]	; (8001eec <HAL_TIM_Base_MspInit+0x34>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d10b      	bne.n	8001ee2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_TIM_Base_MspInit+0x38>)
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	4a08      	ldr	r2, [pc, #32]	; (8001ef0 <HAL_TIM_Base_MspInit+0x38>)
 8001ed0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ed4:	6193      	str	r3, [r2, #24]
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_TIM_Base_MspInit+0x38>)
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ee2:	bf00      	nop
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	40012c00 	.word	0x40012c00
 8001ef0:	40021000 	.word	0x40021000

08001ef4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0310 	add.w	r3, r7, #16
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a20      	ldr	r2, [pc, #128]	; (8001f90 <HAL_UART_MspInit+0x9c>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d139      	bne.n	8001f88 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f14:	4b1f      	ldr	r3, [pc, #124]	; (8001f94 <HAL_UART_MspInit+0xa0>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	4a1e      	ldr	r2, [pc, #120]	; (8001f94 <HAL_UART_MspInit+0xa0>)
 8001f1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f1e:	6193      	str	r3, [r2, #24]
 8001f20:	4b1c      	ldr	r3, [pc, #112]	; (8001f94 <HAL_UART_MspInit+0xa0>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2c:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <HAL_UART_MspInit+0xa0>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	4a18      	ldr	r2, [pc, #96]	; (8001f94 <HAL_UART_MspInit+0xa0>)
 8001f32:	f043 0304 	orr.w	r3, r3, #4
 8001f36:	6193      	str	r3, [r2, #24]
 8001f38:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <HAL_UART_MspInit+0xa0>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f52:	f107 0310 	add.w	r3, r7, #16
 8001f56:	4619      	mov	r1, r3
 8001f58:	480f      	ldr	r0, [pc, #60]	; (8001f98 <HAL_UART_MspInit+0xa4>)
 8001f5a:	f000 ff51 	bl	8002e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6c:	f107 0310 	add.w	r3, r7, #16
 8001f70:	4619      	mov	r1, r3
 8001f72:	4809      	ldr	r0, [pc, #36]	; (8001f98 <HAL_UART_MspInit+0xa4>)
 8001f74:	f000 ff44 	bl	8002e00 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	2025      	movs	r0, #37	; 0x25
 8001f7e:	f000 fe58 	bl	8002c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f82:	2025      	movs	r0, #37	; 0x25
 8001f84:	f000 fe71 	bl	8002c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f88:	bf00      	nop
 8001f8a:	3720      	adds	r7, #32
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40013800 	.word	0x40013800
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40010800 	.word	0x40010800

08001f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <NMI_Handler+0x4>

08001fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fa6:	e7fe      	b.n	8001fa6 <HardFault_Handler+0x4>

08001fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fac:	e7fe      	b.n	8001fac <MemManage_Handler+0x4>

08001fae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fb2:	e7fe      	b.n	8001fb2 <BusFault_Handler+0x4>

08001fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb8:	e7fe      	b.n	8001fb8 <UsageFault_Handler+0x4>

08001fba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr

08001fc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr

08001fd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr

08001fde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe2:	f000 f8b7 	bl	8002154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8001ff0:	4803      	ldr	r0, [pc, #12]	; (8002000 <USART1_IRQHandler+0x14>)
 8001ff2:	f7ff f8bf 	bl	8001174 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ff6:	4802      	ldr	r0, [pc, #8]	; (8002000 <USART1_IRQHandler+0x14>)
 8001ff8:	f002 fd7a 	bl	8004af0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	200001f0 	.word	0x200001f0

08002004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800200c:	4a14      	ldr	r2, [pc, #80]	; (8002060 <_sbrk+0x5c>)
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <_sbrk+0x60>)
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002018:	4b13      	ldr	r3, [pc, #76]	; (8002068 <_sbrk+0x64>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d102      	bne.n	8002026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <_sbrk+0x64>)
 8002022:	4a12      	ldr	r2, [pc, #72]	; (800206c <_sbrk+0x68>)
 8002024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002026:	4b10      	ldr	r3, [pc, #64]	; (8002068 <_sbrk+0x64>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	429a      	cmp	r2, r3
 8002032:	d207      	bcs.n	8002044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002034:	f003 f90a 	bl	800524c <__errno>
 8002038:	4603      	mov	r3, r0
 800203a:	220c      	movs	r2, #12
 800203c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800203e:	f04f 33ff 	mov.w	r3, #4294967295
 8002042:	e009      	b.n	8002058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <_sbrk+0x64>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800204a:	4b07      	ldr	r3, [pc, #28]	; (8002068 <_sbrk+0x64>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	4a05      	ldr	r2, [pc, #20]	; (8002068 <_sbrk+0x64>)
 8002054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002056:	68fb      	ldr	r3, [r7, #12]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20005000 	.word	0x20005000
 8002064:	00000400 	.word	0x00000400
 8002068:	2000027c 	.word	0x2000027c
 800206c:	20000298 	.word	0x20000298

08002070 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800207c:	480c      	ldr	r0, [pc, #48]	; (80020b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800207e:	490d      	ldr	r1, [pc, #52]	; (80020b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002080:	4a0d      	ldr	r2, [pc, #52]	; (80020b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002084:	e002      	b.n	800208c <LoopCopyDataInit>

08002086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800208a:	3304      	adds	r3, #4

0800208c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800208c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800208e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002090:	d3f9      	bcc.n	8002086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002092:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002094:	4c0a      	ldr	r4, [pc, #40]	; (80020c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002098:	e001      	b.n	800209e <LoopFillZerobss>

0800209a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800209a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800209c:	3204      	adds	r2, #4

0800209e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800209e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a0:	d3fb      	bcc.n	800209a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020a2:	f7ff ffe5 	bl	8002070 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020a6:	f003 f8d7 	bl	8005258 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020aa:	f7ff fb39 	bl	8001720 <main>
  bx lr
 80020ae:	4770      	bx	lr
  ldr r0, =_sdata
 80020b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80020b8:	08005d60 	.word	0x08005d60
  ldr r2, =_sbss
 80020bc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80020c0:	20000294 	.word	0x20000294

080020c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020c4:	e7fe      	b.n	80020c4 <ADC1_2_IRQHandler>
	...

080020c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020cc:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <HAL_Init+0x28>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a07      	ldr	r2, [pc, #28]	; (80020f0 <HAL_Init+0x28>)
 80020d2:	f043 0310 	orr.w	r3, r3, #16
 80020d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d8:	2003      	movs	r0, #3
 80020da:	f000 fd9f 	bl	8002c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020de:	200f      	movs	r0, #15
 80020e0:	f000 f808 	bl	80020f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020e4:	f7ff fe22 	bl	8001d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40022000 	.word	0x40022000

080020f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020fc:	4b12      	ldr	r3, [pc, #72]	; (8002148 <HAL_InitTick+0x54>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b12      	ldr	r3, [pc, #72]	; (800214c <HAL_InitTick+0x58>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	4619      	mov	r1, r3
 8002106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800210a:	fbb3 f3f1 	udiv	r3, r3, r1
 800210e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fdb7 	bl	8002c86 <HAL_SYSTICK_Config>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e00e      	b.n	8002140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b0f      	cmp	r3, #15
 8002126:	d80a      	bhi.n	800213e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002128:	2200      	movs	r2, #0
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	f04f 30ff 	mov.w	r0, #4294967295
 8002130:	f000 fd7f 	bl	8002c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002134:	4a06      	ldr	r2, [pc, #24]	; (8002150 <HAL_InitTick+0x5c>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	e000      	b.n	8002140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000000 	.word	0x20000000
 800214c:	20000008 	.word	0x20000008
 8002150:	20000004 	.word	0x20000004

08002154 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <HAL_IncTick+0x1c>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	4b05      	ldr	r3, [pc, #20]	; (8002174 <HAL_IncTick+0x20>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4413      	add	r3, r2
 8002164:	4a03      	ldr	r2, [pc, #12]	; (8002174 <HAL_IncTick+0x20>)
 8002166:	6013      	str	r3, [r2, #0]
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	20000008 	.word	0x20000008
 8002174:	20000280 	.word	0x20000280

08002178 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return uwTick;
 800217c:	4b02      	ldr	r3, [pc, #8]	; (8002188 <HAL_GetTick+0x10>)
 800217e:	681b      	ldr	r3, [r3, #0]
}
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	20000280 	.word	0x20000280

0800218c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002194:	f7ff fff0 	bl	8002178 <HAL_GetTick>
 8002198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a4:	d005      	beq.n	80021b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021a6:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <HAL_Delay+0x44>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4413      	add	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021b2:	bf00      	nop
 80021b4:	f7ff ffe0 	bl	8002178 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d8f7      	bhi.n	80021b4 <HAL_Delay+0x28>
  {
  }
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000008 	.word	0x20000008

080021d4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021dc:	2300      	movs	r3, #0
 80021de:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e0be      	b.n	8002374 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002200:	2b00      	cmp	r3, #0
 8002202:	d109      	bne.n	8002218 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff fdbc 	bl	8001d90 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 fbf1 	bl	8002a00 <ADC_ConversionStop_Disable>
 800221e:	4603      	mov	r3, r0
 8002220:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002226:	f003 0310 	and.w	r3, r3, #16
 800222a:	2b00      	cmp	r3, #0
 800222c:	f040 8099 	bne.w	8002362 <HAL_ADC_Init+0x18e>
 8002230:	7dfb      	ldrb	r3, [r7, #23]
 8002232:	2b00      	cmp	r3, #0
 8002234:	f040 8095 	bne.w	8002362 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002240:	f023 0302 	bic.w	r3, r3, #2
 8002244:	f043 0202 	orr.w	r2, r3, #2
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002254:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	7b1b      	ldrb	r3, [r3, #12]
 800225a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800225c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	4313      	orrs	r3, r2
 8002262:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800226c:	d003      	beq.n	8002276 <HAL_ADC_Init+0xa2>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d102      	bne.n	800227c <HAL_ADC_Init+0xa8>
 8002276:	f44f 7380 	mov.w	r3, #256	; 0x100
 800227a:	e000      	b.n	800227e <HAL_ADC_Init+0xaa>
 800227c:	2300      	movs	r3, #0
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	7d1b      	ldrb	r3, [r3, #20]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d119      	bne.n	80022c0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	7b1b      	ldrb	r3, [r3, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d109      	bne.n	80022a8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	3b01      	subs	r3, #1
 800229a:	035a      	lsls	r2, r3, #13
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	e00b      	b.n	80022c0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ac:	f043 0220 	orr.w	r2, r3, #32
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b8:	f043 0201 	orr.w	r2, r3, #1
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	4b28      	ldr	r3, [pc, #160]	; (800237c <HAL_ADC_Init+0x1a8>)
 80022dc:	4013      	ands	r3, r2
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6812      	ldr	r2, [r2, #0]
 80022e2:	68b9      	ldr	r1, [r7, #8]
 80022e4:	430b      	orrs	r3, r1
 80022e6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022f0:	d003      	beq.n	80022fa <HAL_ADC_Init+0x126>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d104      	bne.n	8002304 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	3b01      	subs	r3, #1
 8002300:	051b      	lsls	r3, r3, #20
 8002302:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	430a      	orrs	r2, r1
 8002316:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	4b18      	ldr	r3, [pc, #96]	; (8002380 <HAL_ADC_Init+0x1ac>)
 8002320:	4013      	ands	r3, r2
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	429a      	cmp	r2, r3
 8002326:	d10b      	bne.n	8002340 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002332:	f023 0303 	bic.w	r3, r3, #3
 8002336:	f043 0201 	orr.w	r2, r3, #1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800233e:	e018      	b.n	8002372 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002344:	f023 0312 	bic.w	r3, r3, #18
 8002348:	f043 0210 	orr.w	r2, r3, #16
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002354:	f043 0201 	orr.w	r2, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002360:	e007      	b.n	8002372 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002366:	f043 0210 	orr.w	r2, r3, #16
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002372:	7dfb      	ldrb	r3, [r7, #23]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	ffe1f7fd 	.word	0xffe1f7fd
 8002380:	ff1f0efe 	.word	0xff1f0efe

08002384 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002396:	2b01      	cmp	r3, #1
 8002398:	d101      	bne.n	800239e <HAL_ADC_Start+0x1a>
 800239a:	2302      	movs	r3, #2
 800239c:	e098      	b.n	80024d0 <HAL_ADC_Start+0x14c>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 fad0 	bl	800294c <ADC_Enable>
 80023ac:	4603      	mov	r3, r0
 80023ae:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f040 8087 	bne.w	80024c6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c0:	f023 0301 	bic.w	r3, r3, #1
 80023c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a41      	ldr	r2, [pc, #260]	; (80024d8 <HAL_ADC_Start+0x154>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d105      	bne.n	80023e2 <HAL_ADC_Start+0x5e>
 80023d6:	4b41      	ldr	r3, [pc, #260]	; (80024dc <HAL_ADC_Start+0x158>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d115      	bne.n	800240e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d026      	beq.n	800244a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002400:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002404:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800240c:	e01d      	b.n	800244a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002412:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a2f      	ldr	r2, [pc, #188]	; (80024dc <HAL_ADC_Start+0x158>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d004      	beq.n	800242e <HAL_ADC_Start+0xaa>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a2b      	ldr	r2, [pc, #172]	; (80024d8 <HAL_ADC_Start+0x154>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d10d      	bne.n	800244a <HAL_ADC_Start+0xc6>
 800242e:	4b2b      	ldr	r3, [pc, #172]	; (80024dc <HAL_ADC_Start+0x158>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002436:	2b00      	cmp	r3, #0
 8002438:	d007      	beq.n	800244a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002442:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d006      	beq.n	8002464 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245a:	f023 0206 	bic.w	r2, r3, #6
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	62da      	str	r2, [r3, #44]	; 0x2c
 8002462:	e002      	b.n	800246a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f06f 0202 	mvn.w	r2, #2
 800247a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002486:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800248a:	d113      	bne.n	80024b4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002490:	4a11      	ldr	r2, [pc, #68]	; (80024d8 <HAL_ADC_Start+0x154>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d105      	bne.n	80024a2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002496:	4b11      	ldr	r3, [pc, #68]	; (80024dc <HAL_ADC_Start+0x158>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d108      	bne.n	80024b4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80024b0:	609a      	str	r2, [r3, #8]
 80024b2:	e00c      	b.n	80024ce <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	e003      	b.n	80024ce <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40012800 	.word	0x40012800
 80024dc:	40012400 	.word	0x40012400

080024e0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_ADC_Stop+0x1a>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e01a      	b.n	8002530 <HAL_ADC_Stop+0x50>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 fa7c 	bl	8002a00 <ADC_ConversionStop_Disable>
 8002508:	4603      	mov	r3, r0
 800250a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d109      	bne.n	8002526 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002516:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800251a:	f023 0301 	bic.w	r3, r3, #1
 800251e:	f043 0201 	orr.w	r2, r3, #1
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800252e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002538:	b590      	push	{r4, r7, lr}
 800253a:	b087      	sub	sp, #28
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800254e:	f7ff fe13 	bl	8002178 <HAL_GetTick>
 8002552:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00b      	beq.n	800257a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002566:	f043 0220 	orr.w	r2, r3, #32
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e0d3      	b.n	8002722 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002584:	2b00      	cmp	r3, #0
 8002586:	d131      	bne.n	80025ec <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002592:	2b00      	cmp	r3, #0
 8002594:	d12a      	bne.n	80025ec <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002596:	e021      	b.n	80025dc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259e:	d01d      	beq.n	80025dc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d007      	beq.n	80025b6 <HAL_ADC_PollForConversion+0x7e>
 80025a6:	f7ff fde7 	bl	8002178 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d212      	bcs.n	80025dc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10b      	bne.n	80025dc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c8:	f043 0204 	orr.w	r2, r3, #4
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e0a2      	b.n	8002722 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0d6      	beq.n	8002598 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80025ea:	e070      	b.n	80026ce <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80025ec:	4b4f      	ldr	r3, [pc, #316]	; (800272c <HAL_ADC_PollForConversion+0x1f4>)
 80025ee:	681c      	ldr	r4, [r3, #0]
 80025f0:	2002      	movs	r0, #2
 80025f2:	f001 febb 	bl	800436c <HAL_RCCEx_GetPeriphCLKFreq>
 80025f6:	4603      	mov	r3, r0
 80025f8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6919      	ldr	r1, [r3, #16]
 8002602:	4b4b      	ldr	r3, [pc, #300]	; (8002730 <HAL_ADC_PollForConversion+0x1f8>)
 8002604:	400b      	ands	r3, r1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d118      	bne.n	800263c <HAL_ADC_PollForConversion+0x104>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68d9      	ldr	r1, [r3, #12]
 8002610:	4b48      	ldr	r3, [pc, #288]	; (8002734 <HAL_ADC_PollForConversion+0x1fc>)
 8002612:	400b      	ands	r3, r1
 8002614:	2b00      	cmp	r3, #0
 8002616:	d111      	bne.n	800263c <HAL_ADC_PollForConversion+0x104>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6919      	ldr	r1, [r3, #16]
 800261e:	4b46      	ldr	r3, [pc, #280]	; (8002738 <HAL_ADC_PollForConversion+0x200>)
 8002620:	400b      	ands	r3, r1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d108      	bne.n	8002638 <HAL_ADC_PollForConversion+0x100>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68d9      	ldr	r1, [r3, #12]
 800262c:	4b43      	ldr	r3, [pc, #268]	; (800273c <HAL_ADC_PollForConversion+0x204>)
 800262e:	400b      	ands	r3, r1
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_ADC_PollForConversion+0x100>
 8002634:	2314      	movs	r3, #20
 8002636:	e020      	b.n	800267a <HAL_ADC_PollForConversion+0x142>
 8002638:	2329      	movs	r3, #41	; 0x29
 800263a:	e01e      	b.n	800267a <HAL_ADC_PollForConversion+0x142>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6919      	ldr	r1, [r3, #16]
 8002642:	4b3d      	ldr	r3, [pc, #244]	; (8002738 <HAL_ADC_PollForConversion+0x200>)
 8002644:	400b      	ands	r3, r1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d106      	bne.n	8002658 <HAL_ADC_PollForConversion+0x120>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68d9      	ldr	r1, [r3, #12]
 8002650:	4b3a      	ldr	r3, [pc, #232]	; (800273c <HAL_ADC_PollForConversion+0x204>)
 8002652:	400b      	ands	r3, r1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00d      	beq.n	8002674 <HAL_ADC_PollForConversion+0x13c>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6919      	ldr	r1, [r3, #16]
 800265e:	4b38      	ldr	r3, [pc, #224]	; (8002740 <HAL_ADC_PollForConversion+0x208>)
 8002660:	400b      	ands	r3, r1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d108      	bne.n	8002678 <HAL_ADC_PollForConversion+0x140>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68d9      	ldr	r1, [r3, #12]
 800266c:	4b34      	ldr	r3, [pc, #208]	; (8002740 <HAL_ADC_PollForConversion+0x208>)
 800266e:	400b      	ands	r3, r1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_ADC_PollForConversion+0x140>
 8002674:	2354      	movs	r3, #84	; 0x54
 8002676:	e000      	b.n	800267a <HAL_ADC_PollForConversion+0x142>
 8002678:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800267a:	fb02 f303 	mul.w	r3, r2, r3
 800267e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002680:	e021      	b.n	80026c6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002688:	d01a      	beq.n	80026c0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d007      	beq.n	80026a0 <HAL_ADC_PollForConversion+0x168>
 8002690:	f7ff fd72 	bl	8002178 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d20f      	bcs.n	80026c0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d90b      	bls.n	80026c0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	f043 0204 	orr.w	r2, r3, #4
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e030      	b.n	8002722 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	3301      	adds	r3, #1
 80026c4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d8d9      	bhi.n	8002682 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f06f 0212 	mvn.w	r2, #18
 80026d6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80026ee:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80026f2:	d115      	bne.n	8002720 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d111      	bne.n	8002720 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002700:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d105      	bne.n	8002720 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002718:	f043 0201 	orr.w	r2, r3, #1
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	371c      	adds	r7, #28
 8002726:	46bd      	mov	sp, r7
 8002728:	bd90      	pop	{r4, r7, pc}
 800272a:	bf00      	nop
 800272c:	20000000 	.word	0x20000000
 8002730:	24924924 	.word	0x24924924
 8002734:	00924924 	.word	0x00924924
 8002738:	12492492 	.word	0x12492492
 800273c:	00492492 	.word	0x00492492
 8002740:	00249249 	.word	0x00249249

08002744 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr

0800275c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800276a:	2300      	movs	r3, #0
 800276c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_ADC_ConfigChannel+0x20>
 8002778:	2302      	movs	r3, #2
 800277a:	e0dc      	b.n	8002936 <HAL_ADC_ConfigChannel+0x1da>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b06      	cmp	r3, #6
 800278a:	d81c      	bhi.n	80027c6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	3b05      	subs	r3, #5
 800279e:	221f      	movs	r2, #31
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	4019      	ands	r1, r3
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	6818      	ldr	r0, [r3, #0]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	3b05      	subs	r3, #5
 80027b8:	fa00 f203 	lsl.w	r2, r0, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	635a      	str	r2, [r3, #52]	; 0x34
 80027c4:	e03c      	b.n	8002840 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b0c      	cmp	r3, #12
 80027cc:	d81c      	bhi.n	8002808 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	4613      	mov	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	3b23      	subs	r3, #35	; 0x23
 80027e0:	221f      	movs	r2, #31
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	4019      	ands	r1, r3
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6818      	ldr	r0, [r3, #0]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	3b23      	subs	r3, #35	; 0x23
 80027fa:	fa00 f203 	lsl.w	r2, r0, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	631a      	str	r2, [r3, #48]	; 0x30
 8002806:	e01b      	b.n	8002840 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	3b41      	subs	r3, #65	; 0x41
 800281a:	221f      	movs	r2, #31
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	4019      	ands	r1, r3
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	6818      	ldr	r0, [r3, #0]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	3b41      	subs	r3, #65	; 0x41
 8002834:	fa00 f203 	lsl.w	r2, r0, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b09      	cmp	r3, #9
 8002846:	d91c      	bls.n	8002882 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68d9      	ldr	r1, [r3, #12]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	4613      	mov	r3, r2
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	4413      	add	r3, r2
 8002858:	3b1e      	subs	r3, #30
 800285a:	2207      	movs	r2, #7
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	4019      	ands	r1, r3
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	6898      	ldr	r0, [r3, #8]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	4613      	mov	r3, r2
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	4413      	add	r3, r2
 8002872:	3b1e      	subs	r3, #30
 8002874:	fa00 f203 	lsl.w	r2, r0, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	60da      	str	r2, [r3, #12]
 8002880:	e019      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6919      	ldr	r1, [r3, #16]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4613      	mov	r3, r2
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	4413      	add	r3, r2
 8002892:	2207      	movs	r2, #7
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	4019      	ands	r1, r3
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	6898      	ldr	r0, [r3, #8]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4613      	mov	r3, r2
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	4413      	add	r3, r2
 80028aa:	fa00 f203 	lsl.w	r2, r0, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b10      	cmp	r3, #16
 80028bc:	d003      	beq.n	80028c6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80028c2:	2b11      	cmp	r3, #17
 80028c4:	d132      	bne.n	800292c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a1d      	ldr	r2, [pc, #116]	; (8002940 <HAL_ADC_ConfigChannel+0x1e4>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d125      	bne.n	800291c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d126      	bne.n	800292c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80028ec:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2b10      	cmp	r3, #16
 80028f4:	d11a      	bne.n	800292c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028f6:	4b13      	ldr	r3, [pc, #76]	; (8002944 <HAL_ADC_ConfigChannel+0x1e8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a13      	ldr	r2, [pc, #76]	; (8002948 <HAL_ADC_ConfigChannel+0x1ec>)
 80028fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002900:	0c9a      	lsrs	r2, r3, #18
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800290c:	e002      	b.n	8002914 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	3b01      	subs	r3, #1
 8002912:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f9      	bne.n	800290e <HAL_ADC_ConfigChannel+0x1b2>
 800291a:	e007      	b.n	800292c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	f043 0220 	orr.w	r2, r3, #32
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002934:	7bfb      	ldrb	r3, [r7, #15]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr
 8002940:	40012400 	.word	0x40012400
 8002944:	20000000 	.word	0x20000000
 8002948:	431bde83 	.word	0x431bde83

0800294c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b01      	cmp	r3, #1
 8002968:	d040      	beq.n	80029ec <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f042 0201 	orr.w	r2, r2, #1
 8002978:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800297a:	4b1f      	ldr	r3, [pc, #124]	; (80029f8 <ADC_Enable+0xac>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a1f      	ldr	r2, [pc, #124]	; (80029fc <ADC_Enable+0xb0>)
 8002980:	fba2 2303 	umull	r2, r3, r2, r3
 8002984:	0c9b      	lsrs	r3, r3, #18
 8002986:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002988:	e002      	b.n	8002990 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	3b01      	subs	r3, #1
 800298e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f9      	bne.n	800298a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002996:	f7ff fbef 	bl	8002178 <HAL_GetTick>
 800299a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800299c:	e01f      	b.n	80029de <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800299e:	f7ff fbeb 	bl	8002178 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d918      	bls.n	80029de <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d011      	beq.n	80029de <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029be:	f043 0210 	orr.w	r2, r3, #16
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ca:	f043 0201 	orr.w	r2, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e007      	b.n	80029ee <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d1d8      	bne.n	800299e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000000 	.word	0x20000000
 80029fc:	431bde83 	.word	0x431bde83

08002a00 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d12e      	bne.n	8002a78 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0201 	bic.w	r2, r2, #1
 8002a28:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a2a:	f7ff fba5 	bl	8002178 <HAL_GetTick>
 8002a2e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a30:	e01b      	b.n	8002a6a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a32:	f7ff fba1 	bl	8002178 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d914      	bls.n	8002a6a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d10d      	bne.n	8002a6a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a52:	f043 0210 	orr.w	r2, r3, #16
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5e:	f043 0201 	orr.w	r2, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e007      	b.n	8002a7a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d0dc      	beq.n	8002a32 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a94:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ab6:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	60d3      	str	r3, [r2, #12]
}
 8002abc:	bf00      	nop
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	0a1b      	lsrs	r3, r3, #8
 8002ad6:	f003 0307 	and.w	r3, r3, #7
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	db0b      	blt.n	8002b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	f003 021f 	and.w	r2, r3, #31
 8002b00:	4906      	ldr	r1, [pc, #24]	; (8002b1c <__NVIC_EnableIRQ+0x34>)
 8002b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	2001      	movs	r0, #1
 8002b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr
 8002b1c:	e000e100 	.word	0xe000e100

08002b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	6039      	str	r1, [r7, #0]
 8002b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	db0a      	blt.n	8002b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	490c      	ldr	r1, [pc, #48]	; (8002b6c <__NVIC_SetPriority+0x4c>)
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	0112      	lsls	r2, r2, #4
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	440b      	add	r3, r1
 8002b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b48:	e00a      	b.n	8002b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	4908      	ldr	r1, [pc, #32]	; (8002b70 <__NVIC_SetPriority+0x50>)
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	3b04      	subs	r3, #4
 8002b58:	0112      	lsls	r2, r2, #4
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	761a      	strb	r2, [r3, #24]
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	e000e100 	.word	0xe000e100
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b089      	sub	sp, #36	; 0x24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f1c3 0307 	rsb	r3, r3, #7
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	bf28      	it	cs
 8002b92:	2304      	movcs	r3, #4
 8002b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	2b06      	cmp	r3, #6
 8002b9c:	d902      	bls.n	8002ba4 <NVIC_EncodePriority+0x30>
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3b03      	subs	r3, #3
 8002ba2:	e000      	b.n	8002ba6 <NVIC_EncodePriority+0x32>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43da      	mvns	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc6:	43d9      	mvns	r1, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bcc:	4313      	orrs	r3, r2
         );
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3724      	adds	r7, #36	; 0x24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002be8:	d301      	bcc.n	8002bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bea:	2301      	movs	r3, #1
 8002bec:	e00f      	b.n	8002c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bee:	4a0a      	ldr	r2, [pc, #40]	; (8002c18 <SysTick_Config+0x40>)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bf6:	210f      	movs	r1, #15
 8002bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfc:	f7ff ff90 	bl	8002b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <SysTick_Config+0x40>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c06:	4b04      	ldr	r3, [pc, #16]	; (8002c18 <SysTick_Config+0x40>)
 8002c08:	2207      	movs	r2, #7
 8002c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	e000e010 	.word	0xe000e010

08002c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff ff2d 	bl	8002a84 <__NVIC_SetPriorityGrouping>
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b086      	sub	sp, #24
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	4603      	mov	r3, r0
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c44:	f7ff ff42 	bl	8002acc <__NVIC_GetPriorityGrouping>
 8002c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68b9      	ldr	r1, [r7, #8]
 8002c4e:	6978      	ldr	r0, [r7, #20]
 8002c50:	f7ff ff90 	bl	8002b74 <NVIC_EncodePriority>
 8002c54:	4602      	mov	r2, r0
 8002c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff ff5f 	bl	8002b20 <__NVIC_SetPriority>
}
 8002c62:	bf00      	nop
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	4603      	mov	r3, r0
 8002c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff ff35 	bl	8002ae8 <__NVIC_EnableIRQ>
}
 8002c7e:	bf00      	nop
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff ffa2 	bl	8002bd8 <SysTick_Config>
 8002c94:	4603      	mov	r3, r0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b085      	sub	sp, #20
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d008      	beq.n	8002cc6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2204      	movs	r2, #4
 8002cb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e020      	b.n	8002d08 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 020e 	bic.w	r2, r2, #14
 8002cd4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0201 	bic.w	r2, r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cee:	2101      	movs	r1, #1
 8002cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr
	...

08002d14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d005      	beq.n	8002d36 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2204      	movs	r2, #4
 8002d2e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	73fb      	strb	r3, [r7, #15]
 8002d34:	e051      	b.n	8002dda <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 020e 	bic.w	r2, r2, #14
 8002d44:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0201 	bic.w	r2, r2, #1
 8002d54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a22      	ldr	r2, [pc, #136]	; (8002de4 <HAL_DMA_Abort_IT+0xd0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d029      	beq.n	8002db4 <HAL_DMA_Abort_IT+0xa0>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a20      	ldr	r2, [pc, #128]	; (8002de8 <HAL_DMA_Abort_IT+0xd4>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d022      	beq.n	8002db0 <HAL_DMA_Abort_IT+0x9c>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a1f      	ldr	r2, [pc, #124]	; (8002dec <HAL_DMA_Abort_IT+0xd8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d01a      	beq.n	8002daa <HAL_DMA_Abort_IT+0x96>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a1d      	ldr	r2, [pc, #116]	; (8002df0 <HAL_DMA_Abort_IT+0xdc>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d012      	beq.n	8002da4 <HAL_DMA_Abort_IT+0x90>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a1c      	ldr	r2, [pc, #112]	; (8002df4 <HAL_DMA_Abort_IT+0xe0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d00a      	beq.n	8002d9e <HAL_DMA_Abort_IT+0x8a>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a1a      	ldr	r2, [pc, #104]	; (8002df8 <HAL_DMA_Abort_IT+0xe4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d102      	bne.n	8002d98 <HAL_DMA_Abort_IT+0x84>
 8002d92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d96:	e00e      	b.n	8002db6 <HAL_DMA_Abort_IT+0xa2>
 8002d98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d9c:	e00b      	b.n	8002db6 <HAL_DMA_Abort_IT+0xa2>
 8002d9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002da2:	e008      	b.n	8002db6 <HAL_DMA_Abort_IT+0xa2>
 8002da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002da8:	e005      	b.n	8002db6 <HAL_DMA_Abort_IT+0xa2>
 8002daa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dae:	e002      	b.n	8002db6 <HAL_DMA_Abort_IT+0xa2>
 8002db0:	2310      	movs	r3, #16
 8002db2:	e000      	b.n	8002db6 <HAL_DMA_Abort_IT+0xa2>
 8002db4:	2301      	movs	r3, #1
 8002db6:	4a11      	ldr	r2, [pc, #68]	; (8002dfc <HAL_DMA_Abort_IT+0xe8>)
 8002db8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	4798      	blx	r3
    } 
  }
  return status;
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40020008 	.word	0x40020008
 8002de8:	4002001c 	.word	0x4002001c
 8002dec:	40020030 	.word	0x40020030
 8002df0:	40020044 	.word	0x40020044
 8002df4:	40020058 	.word	0x40020058
 8002df8:	4002006c 	.word	0x4002006c
 8002dfc:	40020000 	.word	0x40020000

08002e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b08b      	sub	sp, #44	; 0x2c
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e12:	e169      	b.n	80030e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e14:	2201      	movs	r2, #1
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69fa      	ldr	r2, [r7, #28]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	f040 8158 	bne.w	80030e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	4a9a      	ldr	r2, [pc, #616]	; (80030a0 <HAL_GPIO_Init+0x2a0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d05e      	beq.n	8002efa <HAL_GPIO_Init+0xfa>
 8002e3c:	4a98      	ldr	r2, [pc, #608]	; (80030a0 <HAL_GPIO_Init+0x2a0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d875      	bhi.n	8002f2e <HAL_GPIO_Init+0x12e>
 8002e42:	4a98      	ldr	r2, [pc, #608]	; (80030a4 <HAL_GPIO_Init+0x2a4>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d058      	beq.n	8002efa <HAL_GPIO_Init+0xfa>
 8002e48:	4a96      	ldr	r2, [pc, #600]	; (80030a4 <HAL_GPIO_Init+0x2a4>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d86f      	bhi.n	8002f2e <HAL_GPIO_Init+0x12e>
 8002e4e:	4a96      	ldr	r2, [pc, #600]	; (80030a8 <HAL_GPIO_Init+0x2a8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d052      	beq.n	8002efa <HAL_GPIO_Init+0xfa>
 8002e54:	4a94      	ldr	r2, [pc, #592]	; (80030a8 <HAL_GPIO_Init+0x2a8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d869      	bhi.n	8002f2e <HAL_GPIO_Init+0x12e>
 8002e5a:	4a94      	ldr	r2, [pc, #592]	; (80030ac <HAL_GPIO_Init+0x2ac>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d04c      	beq.n	8002efa <HAL_GPIO_Init+0xfa>
 8002e60:	4a92      	ldr	r2, [pc, #584]	; (80030ac <HAL_GPIO_Init+0x2ac>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d863      	bhi.n	8002f2e <HAL_GPIO_Init+0x12e>
 8002e66:	4a92      	ldr	r2, [pc, #584]	; (80030b0 <HAL_GPIO_Init+0x2b0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d046      	beq.n	8002efa <HAL_GPIO_Init+0xfa>
 8002e6c:	4a90      	ldr	r2, [pc, #576]	; (80030b0 <HAL_GPIO_Init+0x2b0>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d85d      	bhi.n	8002f2e <HAL_GPIO_Init+0x12e>
 8002e72:	2b12      	cmp	r3, #18
 8002e74:	d82a      	bhi.n	8002ecc <HAL_GPIO_Init+0xcc>
 8002e76:	2b12      	cmp	r3, #18
 8002e78:	d859      	bhi.n	8002f2e <HAL_GPIO_Init+0x12e>
 8002e7a:	a201      	add	r2, pc, #4	; (adr r2, 8002e80 <HAL_GPIO_Init+0x80>)
 8002e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e80:	08002efb 	.word	0x08002efb
 8002e84:	08002ed5 	.word	0x08002ed5
 8002e88:	08002ee7 	.word	0x08002ee7
 8002e8c:	08002f29 	.word	0x08002f29
 8002e90:	08002f2f 	.word	0x08002f2f
 8002e94:	08002f2f 	.word	0x08002f2f
 8002e98:	08002f2f 	.word	0x08002f2f
 8002e9c:	08002f2f 	.word	0x08002f2f
 8002ea0:	08002f2f 	.word	0x08002f2f
 8002ea4:	08002f2f 	.word	0x08002f2f
 8002ea8:	08002f2f 	.word	0x08002f2f
 8002eac:	08002f2f 	.word	0x08002f2f
 8002eb0:	08002f2f 	.word	0x08002f2f
 8002eb4:	08002f2f 	.word	0x08002f2f
 8002eb8:	08002f2f 	.word	0x08002f2f
 8002ebc:	08002f2f 	.word	0x08002f2f
 8002ec0:	08002f2f 	.word	0x08002f2f
 8002ec4:	08002edd 	.word	0x08002edd
 8002ec8:	08002ef1 	.word	0x08002ef1
 8002ecc:	4a79      	ldr	r2, [pc, #484]	; (80030b4 <HAL_GPIO_Init+0x2b4>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d013      	beq.n	8002efa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ed2:	e02c      	b.n	8002f2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	623b      	str	r3, [r7, #32]
          break;
 8002eda:	e029      	b.n	8002f30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	623b      	str	r3, [r7, #32]
          break;
 8002ee4:	e024      	b.n	8002f30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	3308      	adds	r3, #8
 8002eec:	623b      	str	r3, [r7, #32]
          break;
 8002eee:	e01f      	b.n	8002f30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	330c      	adds	r3, #12
 8002ef6:	623b      	str	r3, [r7, #32]
          break;
 8002ef8:	e01a      	b.n	8002f30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d102      	bne.n	8002f08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f02:	2304      	movs	r3, #4
 8002f04:	623b      	str	r3, [r7, #32]
          break;
 8002f06:	e013      	b.n	8002f30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d105      	bne.n	8002f1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f10:	2308      	movs	r3, #8
 8002f12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	69fa      	ldr	r2, [r7, #28]
 8002f18:	611a      	str	r2, [r3, #16]
          break;
 8002f1a:	e009      	b.n	8002f30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f1c:	2308      	movs	r3, #8
 8002f1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69fa      	ldr	r2, [r7, #28]
 8002f24:	615a      	str	r2, [r3, #20]
          break;
 8002f26:	e003      	b.n	8002f30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	623b      	str	r3, [r7, #32]
          break;
 8002f2c:	e000      	b.n	8002f30 <HAL_GPIO_Init+0x130>
          break;
 8002f2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	2bff      	cmp	r3, #255	; 0xff
 8002f34:	d801      	bhi.n	8002f3a <HAL_GPIO_Init+0x13a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	e001      	b.n	8002f3e <HAL_GPIO_Init+0x13e>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	2bff      	cmp	r3, #255	; 0xff
 8002f44:	d802      	bhi.n	8002f4c <HAL_GPIO_Init+0x14c>
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	e002      	b.n	8002f52 <HAL_GPIO_Init+0x152>
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	3b08      	subs	r3, #8
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	210f      	movs	r1, #15
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f60:	43db      	mvns	r3, r3
 8002f62:	401a      	ands	r2, r3
 8002f64:	6a39      	ldr	r1, [r7, #32]
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 80b1 	beq.w	80030e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f80:	4b4d      	ldr	r3, [pc, #308]	; (80030b8 <HAL_GPIO_Init+0x2b8>)
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	4a4c      	ldr	r2, [pc, #304]	; (80030b8 <HAL_GPIO_Init+0x2b8>)
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	6193      	str	r3, [r2, #24]
 8002f8c:	4b4a      	ldr	r3, [pc, #296]	; (80030b8 <HAL_GPIO_Init+0x2b8>)
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f98:	4a48      	ldr	r2, [pc, #288]	; (80030bc <HAL_GPIO_Init+0x2bc>)
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	089b      	lsrs	r3, r3, #2
 8002f9e:	3302      	adds	r3, #2
 8002fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	220f      	movs	r2, #15
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a40      	ldr	r2, [pc, #256]	; (80030c0 <HAL_GPIO_Init+0x2c0>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d013      	beq.n	8002fec <HAL_GPIO_Init+0x1ec>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a3f      	ldr	r2, [pc, #252]	; (80030c4 <HAL_GPIO_Init+0x2c4>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d00d      	beq.n	8002fe8 <HAL_GPIO_Init+0x1e8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a3e      	ldr	r2, [pc, #248]	; (80030c8 <HAL_GPIO_Init+0x2c8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d007      	beq.n	8002fe4 <HAL_GPIO_Init+0x1e4>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a3d      	ldr	r2, [pc, #244]	; (80030cc <HAL_GPIO_Init+0x2cc>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d101      	bne.n	8002fe0 <HAL_GPIO_Init+0x1e0>
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e006      	b.n	8002fee <HAL_GPIO_Init+0x1ee>
 8002fe0:	2304      	movs	r3, #4
 8002fe2:	e004      	b.n	8002fee <HAL_GPIO_Init+0x1ee>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e002      	b.n	8002fee <HAL_GPIO_Init+0x1ee>
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e000      	b.n	8002fee <HAL_GPIO_Init+0x1ee>
 8002fec:	2300      	movs	r3, #0
 8002fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff0:	f002 0203 	and.w	r2, r2, #3
 8002ff4:	0092      	lsls	r2, r2, #2
 8002ff6:	4093      	lsls	r3, r2
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ffe:	492f      	ldr	r1, [pc, #188]	; (80030bc <HAL_GPIO_Init+0x2bc>)
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	089b      	lsrs	r3, r3, #2
 8003004:	3302      	adds	r3, #2
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d006      	beq.n	8003026 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003018:	4b2d      	ldr	r3, [pc, #180]	; (80030d0 <HAL_GPIO_Init+0x2d0>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	492c      	ldr	r1, [pc, #176]	; (80030d0 <HAL_GPIO_Init+0x2d0>)
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	4313      	orrs	r3, r2
 8003022:	600b      	str	r3, [r1, #0]
 8003024:	e006      	b.n	8003034 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003026:	4b2a      	ldr	r3, [pc, #168]	; (80030d0 <HAL_GPIO_Init+0x2d0>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	43db      	mvns	r3, r3
 800302e:	4928      	ldr	r1, [pc, #160]	; (80030d0 <HAL_GPIO_Init+0x2d0>)
 8003030:	4013      	ands	r3, r2
 8003032:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d006      	beq.n	800304e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003040:	4b23      	ldr	r3, [pc, #140]	; (80030d0 <HAL_GPIO_Init+0x2d0>)
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	4922      	ldr	r1, [pc, #136]	; (80030d0 <HAL_GPIO_Init+0x2d0>)
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	4313      	orrs	r3, r2
 800304a:	604b      	str	r3, [r1, #4]
 800304c:	e006      	b.n	800305c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800304e:	4b20      	ldr	r3, [pc, #128]	; (80030d0 <HAL_GPIO_Init+0x2d0>)
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	43db      	mvns	r3, r3
 8003056:	491e      	ldr	r1, [pc, #120]	; (80030d0 <HAL_GPIO_Init+0x2d0>)
 8003058:	4013      	ands	r3, r2
 800305a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d006      	beq.n	8003076 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003068:	4b19      	ldr	r3, [pc, #100]	; (80030d0 <HAL_GPIO_Init+0x2d0>)
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	4918      	ldr	r1, [pc, #96]	; (80030d0 <HAL_GPIO_Init+0x2d0>)
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	4313      	orrs	r3, r2
 8003072:	608b      	str	r3, [r1, #8]
 8003074:	e006      	b.n	8003084 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003076:	4b16      	ldr	r3, [pc, #88]	; (80030d0 <HAL_GPIO_Init+0x2d0>)
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	43db      	mvns	r3, r3
 800307e:	4914      	ldr	r1, [pc, #80]	; (80030d0 <HAL_GPIO_Init+0x2d0>)
 8003080:	4013      	ands	r3, r2
 8003082:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d021      	beq.n	80030d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003090:	4b0f      	ldr	r3, [pc, #60]	; (80030d0 <HAL_GPIO_Init+0x2d0>)
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	490e      	ldr	r1, [pc, #56]	; (80030d0 <HAL_GPIO_Init+0x2d0>)
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	4313      	orrs	r3, r2
 800309a:	60cb      	str	r3, [r1, #12]
 800309c:	e021      	b.n	80030e2 <HAL_GPIO_Init+0x2e2>
 800309e:	bf00      	nop
 80030a0:	10320000 	.word	0x10320000
 80030a4:	10310000 	.word	0x10310000
 80030a8:	10220000 	.word	0x10220000
 80030ac:	10210000 	.word	0x10210000
 80030b0:	10120000 	.word	0x10120000
 80030b4:	10110000 	.word	0x10110000
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40010000 	.word	0x40010000
 80030c0:	40010800 	.word	0x40010800
 80030c4:	40010c00 	.word	0x40010c00
 80030c8:	40011000 	.word	0x40011000
 80030cc:	40011400 	.word	0x40011400
 80030d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <HAL_GPIO_Init+0x304>)
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	43db      	mvns	r3, r3
 80030dc:	4909      	ldr	r1, [pc, #36]	; (8003104 <HAL_GPIO_Init+0x304>)
 80030de:	4013      	ands	r3, r2
 80030e0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	3301      	adds	r3, #1
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	fa22 f303 	lsr.w	r3, r2, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f47f ae8e 	bne.w	8002e14 <HAL_GPIO_Init+0x14>
  }
}
 80030f8:	bf00      	nop
 80030fa:	bf00      	nop
 80030fc:	372c      	adds	r7, #44	; 0x2c
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr
 8003104:	40010400 	.word	0x40010400

08003108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	807b      	strh	r3, [r7, #2]
 8003114:	4613      	mov	r3, r2
 8003116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003118:	787b      	ldrb	r3, [r7, #1]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800311e:	887a      	ldrh	r2, [r7, #2]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003124:	e003      	b.n	800312e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003126:	887b      	ldrh	r3, [r7, #2]
 8003128:	041a      	lsls	r2, r3, #16
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	611a      	str	r2, [r3, #16]
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr

08003138 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e12b      	b.n	80033a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d106      	bne.n	8003164 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fe fe6a 	bl	8001e38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2224      	movs	r2, #36	; 0x24
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0201 	bic.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800318a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800319a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800319c:	f000 ffea 	bl	8004174 <HAL_RCC_GetPCLK1Freq>
 80031a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4a81      	ldr	r2, [pc, #516]	; (80033ac <HAL_I2C_Init+0x274>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d807      	bhi.n	80031bc <HAL_I2C_Init+0x84>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4a80      	ldr	r2, [pc, #512]	; (80033b0 <HAL_I2C_Init+0x278>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	bf94      	ite	ls
 80031b4:	2301      	movls	r3, #1
 80031b6:	2300      	movhi	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	e006      	b.n	80031ca <HAL_I2C_Init+0x92>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4a7d      	ldr	r2, [pc, #500]	; (80033b4 <HAL_I2C_Init+0x27c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	bf94      	ite	ls
 80031c4:	2301      	movls	r3, #1
 80031c6:	2300      	movhi	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e0e7      	b.n	80033a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4a78      	ldr	r2, [pc, #480]	; (80033b8 <HAL_I2C_Init+0x280>)
 80031d6:	fba2 2303 	umull	r2, r3, r2, r3
 80031da:	0c9b      	lsrs	r3, r3, #18
 80031dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	4a6a      	ldr	r2, [pc, #424]	; (80033ac <HAL_I2C_Init+0x274>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d802      	bhi.n	800320c <HAL_I2C_Init+0xd4>
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	3301      	adds	r3, #1
 800320a:	e009      	b.n	8003220 <HAL_I2C_Init+0xe8>
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003212:	fb02 f303 	mul.w	r3, r2, r3
 8003216:	4a69      	ldr	r2, [pc, #420]	; (80033bc <HAL_I2C_Init+0x284>)
 8003218:	fba2 2303 	umull	r2, r3, r2, r3
 800321c:	099b      	lsrs	r3, r3, #6
 800321e:	3301      	adds	r3, #1
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6812      	ldr	r2, [r2, #0]
 8003224:	430b      	orrs	r3, r1
 8003226:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003232:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	495c      	ldr	r1, [pc, #368]	; (80033ac <HAL_I2C_Init+0x274>)
 800323c:	428b      	cmp	r3, r1
 800323e:	d819      	bhi.n	8003274 <HAL_I2C_Init+0x13c>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	1e59      	subs	r1, r3, #1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	fbb1 f3f3 	udiv	r3, r1, r3
 800324e:	1c59      	adds	r1, r3, #1
 8003250:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003254:	400b      	ands	r3, r1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <HAL_I2C_Init+0x138>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	1e59      	subs	r1, r3, #1
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	fbb1 f3f3 	udiv	r3, r1, r3
 8003268:	3301      	adds	r3, #1
 800326a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800326e:	e051      	b.n	8003314 <HAL_I2C_Init+0x1dc>
 8003270:	2304      	movs	r3, #4
 8003272:	e04f      	b.n	8003314 <HAL_I2C_Init+0x1dc>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d111      	bne.n	80032a0 <HAL_I2C_Init+0x168>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	1e58      	subs	r0, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6859      	ldr	r1, [r3, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	440b      	add	r3, r1
 800328a:	fbb0 f3f3 	udiv	r3, r0, r3
 800328e:	3301      	adds	r3, #1
 8003290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003294:	2b00      	cmp	r3, #0
 8003296:	bf0c      	ite	eq
 8003298:	2301      	moveq	r3, #1
 800329a:	2300      	movne	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	e012      	b.n	80032c6 <HAL_I2C_Init+0x18e>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	1e58      	subs	r0, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6859      	ldr	r1, [r3, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	0099      	lsls	r1, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032b6:	3301      	adds	r3, #1
 80032b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032bc:	2b00      	cmp	r3, #0
 80032be:	bf0c      	ite	eq
 80032c0:	2301      	moveq	r3, #1
 80032c2:	2300      	movne	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_I2C_Init+0x196>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e022      	b.n	8003314 <HAL_I2C_Init+0x1dc>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10e      	bne.n	80032f4 <HAL_I2C_Init+0x1bc>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1e58      	subs	r0, r3, #1
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6859      	ldr	r1, [r3, #4]
 80032de:	460b      	mov	r3, r1
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	440b      	add	r3, r1
 80032e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80032e8:	3301      	adds	r3, #1
 80032ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032f2:	e00f      	b.n	8003314 <HAL_I2C_Init+0x1dc>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	1e58      	subs	r0, r3, #1
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6859      	ldr	r1, [r3, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	0099      	lsls	r1, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	fbb0 f3f3 	udiv	r3, r0, r3
 800330a:	3301      	adds	r3, #1
 800330c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003310:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	6809      	ldr	r1, [r1, #0]
 8003318:	4313      	orrs	r3, r2
 800331a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69da      	ldr	r2, [r3, #28]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003342:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6911      	ldr	r1, [r2, #16]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68d2      	ldr	r2, [r2, #12]
 800334e:	4311      	orrs	r1, r2
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	430b      	orrs	r3, r1
 8003356:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695a      	ldr	r2, [r3, #20]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0201 	orr.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2220      	movs	r2, #32
 800338e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	000186a0 	.word	0x000186a0
 80033b0:	001e847f 	.word	0x001e847f
 80033b4:	003d08ff 	.word	0x003d08ff
 80033b8:	431bde83 	.word	0x431bde83
 80033bc:	10624dd3 	.word	0x10624dd3

080033c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b088      	sub	sp, #32
 80033c4:	af02      	add	r7, sp, #8
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	607a      	str	r2, [r7, #4]
 80033ca:	461a      	mov	r2, r3
 80033cc:	460b      	mov	r3, r1
 80033ce:	817b      	strh	r3, [r7, #10]
 80033d0:	4613      	mov	r3, r2
 80033d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033d4:	f7fe fed0 	bl	8002178 <HAL_GetTick>
 80033d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b20      	cmp	r3, #32
 80033e4:	f040 80e0 	bne.w	80035a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	2319      	movs	r3, #25
 80033ee:	2201      	movs	r2, #1
 80033f0:	4970      	ldr	r1, [pc, #448]	; (80035b4 <HAL_I2C_Master_Transmit+0x1f4>)
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 f964 	bl	80036c0 <I2C_WaitOnFlagUntilTimeout>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80033fe:	2302      	movs	r3, #2
 8003400:	e0d3      	b.n	80035aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_I2C_Master_Transmit+0x50>
 800340c:	2302      	movs	r3, #2
 800340e:	e0cc      	b.n	80035aa <HAL_I2C_Master_Transmit+0x1ea>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b01      	cmp	r3, #1
 8003424:	d007      	beq.n	8003436 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 0201 	orr.w	r2, r2, #1
 8003434:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003444:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2221      	movs	r2, #33	; 0x21
 800344a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2210      	movs	r2, #16
 8003452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	893a      	ldrh	r2, [r7, #8]
 8003466:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346c:	b29a      	uxth	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	4a50      	ldr	r2, [pc, #320]	; (80035b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003476:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003478:	8979      	ldrh	r1, [r7, #10]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	6a3a      	ldr	r2, [r7, #32]
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 f89c 	bl	80035bc <I2C_MasterRequestWrite>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e08d      	b.n	80035aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800348e:	2300      	movs	r3, #0
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	613b      	str	r3, [r7, #16]
 80034a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80034a4:	e066      	b.n	8003574 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	6a39      	ldr	r1, [r7, #32]
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 f9de 	bl	800386c <I2C_WaitOnTXEFlagUntilTimeout>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00d      	beq.n	80034d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d107      	bne.n	80034ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e06b      	b.n	80035aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	781a      	ldrb	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	3b01      	subs	r3, #1
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b04      	cmp	r3, #4
 800350e:	d11b      	bne.n	8003548 <HAL_I2C_Master_Transmit+0x188>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003514:	2b00      	cmp	r3, #0
 8003516:	d017      	beq.n	8003548 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	781a      	ldrb	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003532:	b29b      	uxth	r3, r3
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003540:	3b01      	subs	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	6a39      	ldr	r1, [r7, #32]
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 f9ce 	bl	80038ee <I2C_WaitOnBTFFlagUntilTimeout>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00d      	beq.n	8003574 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	2b04      	cmp	r3, #4
 800355e:	d107      	bne.n	8003570 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800356e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e01a      	b.n	80035aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003578:	2b00      	cmp	r3, #0
 800357a:	d194      	bne.n	80034a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800358a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035a4:	2300      	movs	r3, #0
 80035a6:	e000      	b.n	80035aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80035a8:	2302      	movs	r3, #2
  }
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	00100002 	.word	0x00100002
 80035b8:	ffff0000 	.word	0xffff0000

080035bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b088      	sub	sp, #32
 80035c0:	af02      	add	r7, sp, #8
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	607a      	str	r2, [r7, #4]
 80035c6:	603b      	str	r3, [r7, #0]
 80035c8:	460b      	mov	r3, r1
 80035ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d006      	beq.n	80035e6 <I2C_MasterRequestWrite+0x2a>
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d003      	beq.n	80035e6 <I2C_MasterRequestWrite+0x2a>
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035e4:	d108      	bne.n	80035f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	e00b      	b.n	8003610 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	2b12      	cmp	r3, #18
 80035fe:	d107      	bne.n	8003610 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800360e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 f84f 	bl	80036c0 <I2C_WaitOnFlagUntilTimeout>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00d      	beq.n	8003644 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003636:	d103      	bne.n	8003640 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800363e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e035      	b.n	80036b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800364c:	d108      	bne.n	8003660 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800364e:	897b      	ldrh	r3, [r7, #10]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	461a      	mov	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800365c:	611a      	str	r2, [r3, #16]
 800365e:	e01b      	b.n	8003698 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003660:	897b      	ldrh	r3, [r7, #10]
 8003662:	11db      	asrs	r3, r3, #7
 8003664:	b2db      	uxtb	r3, r3
 8003666:	f003 0306 	and.w	r3, r3, #6
 800366a:	b2db      	uxtb	r3, r3
 800366c:	f063 030f 	orn	r3, r3, #15
 8003670:	b2da      	uxtb	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	490e      	ldr	r1, [pc, #56]	; (80036b8 <I2C_MasterRequestWrite+0xfc>)
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 f875 	bl	800376e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e010      	b.n	80036b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800368e:	897b      	ldrh	r3, [r7, #10]
 8003690:	b2da      	uxtb	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	4907      	ldr	r1, [pc, #28]	; (80036bc <I2C_MasterRequestWrite+0x100>)
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f865 	bl	800376e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	00010008 	.word	0x00010008
 80036bc:	00010002 	.word	0x00010002

080036c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	4613      	mov	r3, r2
 80036ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036d0:	e025      	b.n	800371e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d8:	d021      	beq.n	800371e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036da:	f7fe fd4d 	bl	8002178 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d302      	bcc.n	80036f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d116      	bne.n	800371e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2220      	movs	r2, #32
 80036fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	f043 0220 	orr.w	r2, r3, #32
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e023      	b.n	8003766 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	0c1b      	lsrs	r3, r3, #16
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b01      	cmp	r3, #1
 8003726:	d10d      	bne.n	8003744 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	43da      	mvns	r2, r3
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	4013      	ands	r3, r2
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	bf0c      	ite	eq
 800373a:	2301      	moveq	r3, #1
 800373c:	2300      	movne	r3, #0
 800373e:	b2db      	uxtb	r3, r3
 8003740:	461a      	mov	r2, r3
 8003742:	e00c      	b.n	800375e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	43da      	mvns	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4013      	ands	r3, r2
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	bf0c      	ite	eq
 8003756:	2301      	moveq	r3, #1
 8003758:	2300      	movne	r3, #0
 800375a:	b2db      	uxtb	r3, r3
 800375c:	461a      	mov	r2, r3
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	429a      	cmp	r2, r3
 8003762:	d0b6      	beq.n	80036d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b084      	sub	sp, #16
 8003772:	af00      	add	r7, sp, #0
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	607a      	str	r2, [r7, #4]
 800377a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800377c:	e051      	b.n	8003822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800378c:	d123      	bne.n	80037d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800379c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	f043 0204 	orr.w	r2, r3, #4
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e046      	b.n	8003864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037dc:	d021      	beq.n	8003822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037de:	f7fe fccb 	bl	8002178 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d302      	bcc.n	80037f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d116      	bne.n	8003822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2220      	movs	r2, #32
 80037fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	f043 0220 	orr.w	r2, r3, #32
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e020      	b.n	8003864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	0c1b      	lsrs	r3, r3, #16
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b01      	cmp	r3, #1
 800382a:	d10c      	bne.n	8003846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	43da      	mvns	r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	4013      	ands	r3, r2
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	bf14      	ite	ne
 800383e:	2301      	movne	r3, #1
 8003840:	2300      	moveq	r3, #0
 8003842:	b2db      	uxtb	r3, r3
 8003844:	e00b      	b.n	800385e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	43da      	mvns	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	4013      	ands	r3, r2
 8003852:	b29b      	uxth	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	bf14      	ite	ne
 8003858:	2301      	movne	r3, #1
 800385a:	2300      	moveq	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d18d      	bne.n	800377e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003878:	e02d      	b.n	80038d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 f878 	bl	8003970 <I2C_IsAcknowledgeFailed>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e02d      	b.n	80038e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003890:	d021      	beq.n	80038d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003892:	f7fe fc71 	bl	8002178 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d302      	bcc.n	80038a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d116      	bne.n	80038d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f043 0220 	orr.w	r2, r3, #32
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e007      	b.n	80038e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e0:	2b80      	cmp	r3, #128	; 0x80
 80038e2:	d1ca      	bne.n	800387a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b084      	sub	sp, #16
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038fa:	e02d      	b.n	8003958 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f837 	bl	8003970 <I2C_IsAcknowledgeFailed>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e02d      	b.n	8003968 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003912:	d021      	beq.n	8003958 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003914:	f7fe fc30 	bl	8002178 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	429a      	cmp	r2, r3
 8003922:	d302      	bcc.n	800392a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d116      	bne.n	8003958 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	f043 0220 	orr.w	r2, r3, #32
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e007      	b.n	8003968 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b04      	cmp	r3, #4
 8003964:	d1ca      	bne.n	80038fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003986:	d11b      	bne.n	80039c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003990:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2220      	movs	r2, #32
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	f043 0204 	orr.w	r2, r3, #4
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e000      	b.n	80039c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr

080039cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e272      	b.n	8003ec4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 8087 	beq.w	8003afa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039ec:	4b92      	ldr	r3, [pc, #584]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f003 030c 	and.w	r3, r3, #12
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d00c      	beq.n	8003a12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039f8:	4b8f      	ldr	r3, [pc, #572]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f003 030c 	and.w	r3, r3, #12
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d112      	bne.n	8003a2a <HAL_RCC_OscConfig+0x5e>
 8003a04:	4b8c      	ldr	r3, [pc, #560]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a10:	d10b      	bne.n	8003a2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a12:	4b89      	ldr	r3, [pc, #548]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d06c      	beq.n	8003af8 <HAL_RCC_OscConfig+0x12c>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d168      	bne.n	8003af8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e24c      	b.n	8003ec4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a32:	d106      	bne.n	8003a42 <HAL_RCC_OscConfig+0x76>
 8003a34:	4b80      	ldr	r3, [pc, #512]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a7f      	ldr	r2, [pc, #508]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a3e:	6013      	str	r3, [r2, #0]
 8003a40:	e02e      	b.n	8003aa0 <HAL_RCC_OscConfig+0xd4>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10c      	bne.n	8003a64 <HAL_RCC_OscConfig+0x98>
 8003a4a:	4b7b      	ldr	r3, [pc, #492]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a7a      	ldr	r2, [pc, #488]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	4b78      	ldr	r3, [pc, #480]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a77      	ldr	r2, [pc, #476]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	e01d      	b.n	8003aa0 <HAL_RCC_OscConfig+0xd4>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a6c:	d10c      	bne.n	8003a88 <HAL_RCC_OscConfig+0xbc>
 8003a6e:	4b72      	ldr	r3, [pc, #456]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a71      	ldr	r2, [pc, #452]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	4b6f      	ldr	r3, [pc, #444]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a6e      	ldr	r2, [pc, #440]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a84:	6013      	str	r3, [r2, #0]
 8003a86:	e00b      	b.n	8003aa0 <HAL_RCC_OscConfig+0xd4>
 8003a88:	4b6b      	ldr	r3, [pc, #428]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a6a      	ldr	r2, [pc, #424]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	4b68      	ldr	r3, [pc, #416]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a67      	ldr	r2, [pc, #412]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d013      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa8:	f7fe fb66 	bl	8002178 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ab0:	f7fe fb62 	bl	8002178 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b64      	cmp	r3, #100	; 0x64
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e200      	b.n	8003ec4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac2:	4b5d      	ldr	r3, [pc, #372]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0f0      	beq.n	8003ab0 <HAL_RCC_OscConfig+0xe4>
 8003ace:	e014      	b.n	8003afa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad0:	f7fe fb52 	bl	8002178 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad8:	f7fe fb4e 	bl	8002178 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b64      	cmp	r3, #100	; 0x64
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e1ec      	b.n	8003ec4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aea:	4b53      	ldr	r3, [pc, #332]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x10c>
 8003af6:	e000      	b.n	8003afa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d063      	beq.n	8003bce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b06:	4b4c      	ldr	r3, [pc, #304]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f003 030c 	and.w	r3, r3, #12
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00b      	beq.n	8003b2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b12:	4b49      	ldr	r3, [pc, #292]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f003 030c 	and.w	r3, r3, #12
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d11c      	bne.n	8003b58 <HAL_RCC_OscConfig+0x18c>
 8003b1e:	4b46      	ldr	r3, [pc, #280]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d116      	bne.n	8003b58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b2a:	4b43      	ldr	r3, [pc, #268]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d005      	beq.n	8003b42 <HAL_RCC_OscConfig+0x176>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d001      	beq.n	8003b42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e1c0      	b.n	8003ec4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b42:	4b3d      	ldr	r3, [pc, #244]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	4939      	ldr	r1, [pc, #228]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b56:	e03a      	b.n	8003bce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d020      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b60:	4b36      	ldr	r3, [pc, #216]	; (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003b62:	2201      	movs	r2, #1
 8003b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b66:	f7fe fb07 	bl	8002178 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b6e:	f7fe fb03 	bl	8002178 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e1a1      	b.n	8003ec4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b80:	4b2d      	ldr	r3, [pc, #180]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0f0      	beq.n	8003b6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b8c:	4b2a      	ldr	r3, [pc, #168]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	4927      	ldr	r1, [pc, #156]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	600b      	str	r3, [r1, #0]
 8003ba0:	e015      	b.n	8003bce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ba2:	4b26      	ldr	r3, [pc, #152]	; (8003c3c <HAL_RCC_OscConfig+0x270>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba8:	f7fe fae6 	bl	8002178 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bb0:	f7fe fae2 	bl	8002178 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e180      	b.n	8003ec4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bc2:	4b1d      	ldr	r3, [pc, #116]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f0      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d03a      	beq.n	8003c50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d019      	beq.n	8003c16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003be2:	4b17      	ldr	r3, [pc, #92]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003be4:	2201      	movs	r2, #1
 8003be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be8:	f7fe fac6 	bl	8002178 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bf0:	f7fe fac2 	bl	8002178 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e160      	b.n	8003ec4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c02:	4b0d      	ldr	r3, [pc, #52]	; (8003c38 <HAL_RCC_OscConfig+0x26c>)
 8003c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0f0      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c0e:	2001      	movs	r0, #1
 8003c10:	f000 fad8 	bl	80041c4 <RCC_Delay>
 8003c14:	e01c      	b.n	8003c50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c16:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c1c:	f7fe faac 	bl	8002178 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c22:	e00f      	b.n	8003c44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c24:	f7fe faa8 	bl	8002178 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d908      	bls.n	8003c44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e146      	b.n	8003ec4 <HAL_RCC_OscConfig+0x4f8>
 8003c36:	bf00      	nop
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	42420000 	.word	0x42420000
 8003c40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c44:	4b92      	ldr	r3, [pc, #584]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1e9      	bne.n	8003c24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 80a6 	beq.w	8003daa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c62:	4b8b      	ldr	r3, [pc, #556]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10d      	bne.n	8003c8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c6e:	4b88      	ldr	r3, [pc, #544]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	4a87      	ldr	r2, [pc, #540]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c78:	61d3      	str	r3, [r2, #28]
 8003c7a:	4b85      	ldr	r3, [pc, #532]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c82:	60bb      	str	r3, [r7, #8]
 8003c84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c86:	2301      	movs	r3, #1
 8003c88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8a:	4b82      	ldr	r3, [pc, #520]	; (8003e94 <HAL_RCC_OscConfig+0x4c8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d118      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c96:	4b7f      	ldr	r3, [pc, #508]	; (8003e94 <HAL_RCC_OscConfig+0x4c8>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a7e      	ldr	r2, [pc, #504]	; (8003e94 <HAL_RCC_OscConfig+0x4c8>)
 8003c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ca2:	f7fe fa69 	bl	8002178 <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003caa:	f7fe fa65 	bl	8002178 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b64      	cmp	r3, #100	; 0x64
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e103      	b.n	8003ec4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cbc:	4b75      	ldr	r3, [pc, #468]	; (8003e94 <HAL_RCC_OscConfig+0x4c8>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0f0      	beq.n	8003caa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d106      	bne.n	8003cde <HAL_RCC_OscConfig+0x312>
 8003cd0:	4b6f      	ldr	r3, [pc, #444]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	4a6e      	ldr	r2, [pc, #440]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003cd6:	f043 0301 	orr.w	r3, r3, #1
 8003cda:	6213      	str	r3, [r2, #32]
 8003cdc:	e02d      	b.n	8003d3a <HAL_RCC_OscConfig+0x36e>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10c      	bne.n	8003d00 <HAL_RCC_OscConfig+0x334>
 8003ce6:	4b6a      	ldr	r3, [pc, #424]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	4a69      	ldr	r2, [pc, #420]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003cec:	f023 0301 	bic.w	r3, r3, #1
 8003cf0:	6213      	str	r3, [r2, #32]
 8003cf2:	4b67      	ldr	r3, [pc, #412]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	4a66      	ldr	r2, [pc, #408]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003cf8:	f023 0304 	bic.w	r3, r3, #4
 8003cfc:	6213      	str	r3, [r2, #32]
 8003cfe:	e01c      	b.n	8003d3a <HAL_RCC_OscConfig+0x36e>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	2b05      	cmp	r3, #5
 8003d06:	d10c      	bne.n	8003d22 <HAL_RCC_OscConfig+0x356>
 8003d08:	4b61      	ldr	r3, [pc, #388]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	4a60      	ldr	r2, [pc, #384]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003d0e:	f043 0304 	orr.w	r3, r3, #4
 8003d12:	6213      	str	r3, [r2, #32]
 8003d14:	4b5e      	ldr	r3, [pc, #376]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	4a5d      	ldr	r2, [pc, #372]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003d1a:	f043 0301 	orr.w	r3, r3, #1
 8003d1e:	6213      	str	r3, [r2, #32]
 8003d20:	e00b      	b.n	8003d3a <HAL_RCC_OscConfig+0x36e>
 8003d22:	4b5b      	ldr	r3, [pc, #364]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	4a5a      	ldr	r2, [pc, #360]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003d28:	f023 0301 	bic.w	r3, r3, #1
 8003d2c:	6213      	str	r3, [r2, #32]
 8003d2e:	4b58      	ldr	r3, [pc, #352]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	4a57      	ldr	r2, [pc, #348]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003d34:	f023 0304 	bic.w	r3, r3, #4
 8003d38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d015      	beq.n	8003d6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d42:	f7fe fa19 	bl	8002178 <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d48:	e00a      	b.n	8003d60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d4a:	f7fe fa15 	bl	8002178 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e0b1      	b.n	8003ec4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d60:	4b4b      	ldr	r3, [pc, #300]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0ee      	beq.n	8003d4a <HAL_RCC_OscConfig+0x37e>
 8003d6c:	e014      	b.n	8003d98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d6e:	f7fe fa03 	bl	8002178 <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d74:	e00a      	b.n	8003d8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d76:	f7fe f9ff 	bl	8002178 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e09b      	b.n	8003ec4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d8c:	4b40      	ldr	r3, [pc, #256]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1ee      	bne.n	8003d76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d98:	7dfb      	ldrb	r3, [r7, #23]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d105      	bne.n	8003daa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d9e:	4b3c      	ldr	r3, [pc, #240]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	4a3b      	ldr	r2, [pc, #236]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003da4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003da8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 8087 	beq.w	8003ec2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003db4:	4b36      	ldr	r3, [pc, #216]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f003 030c 	and.w	r3, r3, #12
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d061      	beq.n	8003e84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d146      	bne.n	8003e56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc8:	4b33      	ldr	r3, [pc, #204]	; (8003e98 <HAL_RCC_OscConfig+0x4cc>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dce:	f7fe f9d3 	bl	8002178 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd6:	f7fe f9cf 	bl	8002178 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e06d      	b.n	8003ec4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003de8:	4b29      	ldr	r3, [pc, #164]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1f0      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dfc:	d108      	bne.n	8003e10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003dfe:	4b24      	ldr	r3, [pc, #144]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	4921      	ldr	r1, [pc, #132]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e10:	4b1f      	ldr	r3, [pc, #124]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a19      	ldr	r1, [r3, #32]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	430b      	orrs	r3, r1
 8003e22:	491b      	ldr	r1, [pc, #108]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e28:	4b1b      	ldr	r3, [pc, #108]	; (8003e98 <HAL_RCC_OscConfig+0x4cc>)
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2e:	f7fe f9a3 	bl	8002178 <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e36:	f7fe f99f 	bl	8002178 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e03d      	b.n	8003ec4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e48:	4b11      	ldr	r3, [pc, #68]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0f0      	beq.n	8003e36 <HAL_RCC_OscConfig+0x46a>
 8003e54:	e035      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e56:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <HAL_RCC_OscConfig+0x4cc>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5c:	f7fe f98c 	bl	8002178 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e64:	f7fe f988 	bl	8002178 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e026      	b.n	8003ec4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e76:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <HAL_RCC_OscConfig+0x4c4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f0      	bne.n	8003e64 <HAL_RCC_OscConfig+0x498>
 8003e82:	e01e      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d107      	bne.n	8003e9c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e019      	b.n	8003ec4 <HAL_RCC_OscConfig+0x4f8>
 8003e90:	40021000 	.word	0x40021000
 8003e94:	40007000 	.word	0x40007000
 8003e98:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <HAL_RCC_OscConfig+0x500>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d106      	bne.n	8003ebe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d001      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3718      	adds	r7, #24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40021000 	.word	0x40021000

08003ed0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0d0      	b.n	8004086 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ee4:	4b6a      	ldr	r3, [pc, #424]	; (8004090 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d910      	bls.n	8003f14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef2:	4b67      	ldr	r3, [pc, #412]	; (8004090 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f023 0207 	bic.w	r2, r3, #7
 8003efa:	4965      	ldr	r1, [pc, #404]	; (8004090 <HAL_RCC_ClockConfig+0x1c0>)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f02:	4b63      	ldr	r3, [pc, #396]	; (8004090 <HAL_RCC_ClockConfig+0x1c0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d001      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0b8      	b.n	8004086 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d020      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f2c:	4b59      	ldr	r3, [pc, #356]	; (8004094 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	4a58      	ldr	r2, [pc, #352]	; (8004094 <HAL_RCC_ClockConfig+0x1c4>)
 8003f32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0308 	and.w	r3, r3, #8
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d005      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f44:	4b53      	ldr	r3, [pc, #332]	; (8004094 <HAL_RCC_ClockConfig+0x1c4>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	4a52      	ldr	r2, [pc, #328]	; (8004094 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f50:	4b50      	ldr	r3, [pc, #320]	; (8004094 <HAL_RCC_ClockConfig+0x1c4>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	494d      	ldr	r1, [pc, #308]	; (8004094 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d040      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d107      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f76:	4b47      	ldr	r3, [pc, #284]	; (8004094 <HAL_RCC_ClockConfig+0x1c4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d115      	bne.n	8003fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e07f      	b.n	8004086 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d107      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f8e:	4b41      	ldr	r3, [pc, #260]	; (8004094 <HAL_RCC_ClockConfig+0x1c4>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d109      	bne.n	8003fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e073      	b.n	8004086 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f9e:	4b3d      	ldr	r3, [pc, #244]	; (8004094 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e06b      	b.n	8004086 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fae:	4b39      	ldr	r3, [pc, #228]	; (8004094 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f023 0203 	bic.w	r2, r3, #3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	4936      	ldr	r1, [pc, #216]	; (8004094 <HAL_RCC_ClockConfig+0x1c4>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fc0:	f7fe f8da 	bl	8002178 <HAL_GetTick>
 8003fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc6:	e00a      	b.n	8003fde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc8:	f7fe f8d6 	bl	8002178 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e053      	b.n	8004086 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fde:	4b2d      	ldr	r3, [pc, #180]	; (8004094 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f003 020c 	and.w	r2, r3, #12
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d1eb      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff0:	4b27      	ldr	r3, [pc, #156]	; (8004090 <HAL_RCC_ClockConfig+0x1c0>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0307 	and.w	r3, r3, #7
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d210      	bcs.n	8004020 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffe:	4b24      	ldr	r3, [pc, #144]	; (8004090 <HAL_RCC_ClockConfig+0x1c0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f023 0207 	bic.w	r2, r3, #7
 8004006:	4922      	ldr	r1, [pc, #136]	; (8004090 <HAL_RCC_ClockConfig+0x1c0>)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	4313      	orrs	r3, r2
 800400c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800400e:	4b20      	ldr	r3, [pc, #128]	; (8004090 <HAL_RCC_ClockConfig+0x1c0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	429a      	cmp	r2, r3
 800401a:	d001      	beq.n	8004020 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e032      	b.n	8004086 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b00      	cmp	r3, #0
 800402a:	d008      	beq.n	800403e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800402c:	4b19      	ldr	r3, [pc, #100]	; (8004094 <HAL_RCC_ClockConfig+0x1c4>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	4916      	ldr	r1, [pc, #88]	; (8004094 <HAL_RCC_ClockConfig+0x1c4>)
 800403a:	4313      	orrs	r3, r2
 800403c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b00      	cmp	r3, #0
 8004048:	d009      	beq.n	800405e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800404a:	4b12      	ldr	r3, [pc, #72]	; (8004094 <HAL_RCC_ClockConfig+0x1c4>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	490e      	ldr	r1, [pc, #56]	; (8004094 <HAL_RCC_ClockConfig+0x1c4>)
 800405a:	4313      	orrs	r3, r2
 800405c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800405e:	f000 f821 	bl	80040a4 <HAL_RCC_GetSysClockFreq>
 8004062:	4602      	mov	r2, r0
 8004064:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <HAL_RCC_ClockConfig+0x1c4>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	091b      	lsrs	r3, r3, #4
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	490a      	ldr	r1, [pc, #40]	; (8004098 <HAL_RCC_ClockConfig+0x1c8>)
 8004070:	5ccb      	ldrb	r3, [r1, r3]
 8004072:	fa22 f303 	lsr.w	r3, r2, r3
 8004076:	4a09      	ldr	r2, [pc, #36]	; (800409c <HAL_RCC_ClockConfig+0x1cc>)
 8004078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800407a:	4b09      	ldr	r3, [pc, #36]	; (80040a0 <HAL_RCC_ClockConfig+0x1d0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f7fe f838 	bl	80020f4 <HAL_InitTick>

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40022000 	.word	0x40022000
 8004094:	40021000 	.word	0x40021000
 8004098:	08005d0c 	.word	0x08005d0c
 800409c:	20000000 	.word	0x20000000
 80040a0:	20000004 	.word	0x20000004

080040a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a4:	b490      	push	{r4, r7}
 80040a6:	b08a      	sub	sp, #40	; 0x28
 80040a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80040aa:	4b29      	ldr	r3, [pc, #164]	; (8004150 <HAL_RCC_GetSysClockFreq+0xac>)
 80040ac:	1d3c      	adds	r4, r7, #4
 80040ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80040b4:	f240 2301 	movw	r3, #513	; 0x201
 80040b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	61fb      	str	r3, [r7, #28]
 80040be:	2300      	movs	r3, #0
 80040c0:	61bb      	str	r3, [r7, #24]
 80040c2:	2300      	movs	r3, #0
 80040c4:	627b      	str	r3, [r7, #36]	; 0x24
 80040c6:	2300      	movs	r3, #0
 80040c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80040ce:	4b21      	ldr	r3, [pc, #132]	; (8004154 <HAL_RCC_GetSysClockFreq+0xb0>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f003 030c 	and.w	r3, r3, #12
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d002      	beq.n	80040e4 <HAL_RCC_GetSysClockFreq+0x40>
 80040de:	2b08      	cmp	r3, #8
 80040e0:	d003      	beq.n	80040ea <HAL_RCC_GetSysClockFreq+0x46>
 80040e2:	e02b      	b.n	800413c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040e4:	4b1c      	ldr	r3, [pc, #112]	; (8004158 <HAL_RCC_GetSysClockFreq+0xb4>)
 80040e6:	623b      	str	r3, [r7, #32]
      break;
 80040e8:	e02b      	b.n	8004142 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	0c9b      	lsrs	r3, r3, #18
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	3328      	adds	r3, #40	; 0x28
 80040f4:	443b      	add	r3, r7
 80040f6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80040fa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d012      	beq.n	800412c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004106:	4b13      	ldr	r3, [pc, #76]	; (8004154 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	0c5b      	lsrs	r3, r3, #17
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	3328      	adds	r3, #40	; 0x28
 8004112:	443b      	add	r3, r7
 8004114:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004118:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	4a0e      	ldr	r2, [pc, #56]	; (8004158 <HAL_RCC_GetSysClockFreq+0xb4>)
 800411e:	fb03 f202 	mul.w	r2, r3, r2
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	fbb2 f3f3 	udiv	r3, r2, r3
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
 800412a:	e004      	b.n	8004136 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	4a0b      	ldr	r2, [pc, #44]	; (800415c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004130:	fb02 f303 	mul.w	r3, r2, r3
 8004134:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	623b      	str	r3, [r7, #32]
      break;
 800413a:	e002      	b.n	8004142 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800413c:	4b06      	ldr	r3, [pc, #24]	; (8004158 <HAL_RCC_GetSysClockFreq+0xb4>)
 800413e:	623b      	str	r3, [r7, #32]
      break;
 8004140:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004142:	6a3b      	ldr	r3, [r7, #32]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3728      	adds	r7, #40	; 0x28
 8004148:	46bd      	mov	sp, r7
 800414a:	bc90      	pop	{r4, r7}
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	08005cec 	.word	0x08005cec
 8004154:	40021000 	.word	0x40021000
 8004158:	007a1200 	.word	0x007a1200
 800415c:	003d0900 	.word	0x003d0900

08004160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004164:	4b02      	ldr	r3, [pc, #8]	; (8004170 <HAL_RCC_GetHCLKFreq+0x10>)
 8004166:	681b      	ldr	r3, [r3, #0]
}
 8004168:	4618      	mov	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr
 8004170:	20000000 	.word	0x20000000

08004174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004178:	f7ff fff2 	bl	8004160 <HAL_RCC_GetHCLKFreq>
 800417c:	4602      	mov	r2, r0
 800417e:	4b05      	ldr	r3, [pc, #20]	; (8004194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	0a1b      	lsrs	r3, r3, #8
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	4903      	ldr	r1, [pc, #12]	; (8004198 <HAL_RCC_GetPCLK1Freq+0x24>)
 800418a:	5ccb      	ldrb	r3, [r1, r3]
 800418c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004190:	4618      	mov	r0, r3
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40021000 	.word	0x40021000
 8004198:	08005d1c 	.word	0x08005d1c

0800419c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041a0:	f7ff ffde 	bl	8004160 <HAL_RCC_GetHCLKFreq>
 80041a4:	4602      	mov	r2, r0
 80041a6:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	0adb      	lsrs	r3, r3, #11
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	4903      	ldr	r1, [pc, #12]	; (80041c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041b2:	5ccb      	ldrb	r3, [r1, r3]
 80041b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40021000 	.word	0x40021000
 80041c0:	08005d1c 	.word	0x08005d1c

080041c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80041cc:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <RCC_Delay+0x34>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <RCC_Delay+0x38>)
 80041d2:	fba2 2303 	umull	r2, r3, r2, r3
 80041d6:	0a5b      	lsrs	r3, r3, #9
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	fb02 f303 	mul.w	r3, r2, r3
 80041de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80041e0:	bf00      	nop
  }
  while (Delay --);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	1e5a      	subs	r2, r3, #1
 80041e6:	60fa      	str	r2, [r7, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1f9      	bne.n	80041e0 <RCC_Delay+0x1c>
}
 80041ec:	bf00      	nop
 80041ee:	bf00      	nop
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr
 80041f8:	20000000 	.word	0x20000000
 80041fc:	10624dd3 	.word	0x10624dd3

08004200 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	613b      	str	r3, [r7, #16]
 800420c:	2300      	movs	r3, #0
 800420e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d07d      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800421c:	2300      	movs	r3, #0
 800421e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004220:	4b4f      	ldr	r3, [pc, #316]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10d      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800422c:	4b4c      	ldr	r3, [pc, #304]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	4a4b      	ldr	r2, [pc, #300]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004236:	61d3      	str	r3, [r2, #28]
 8004238:	4b49      	ldr	r3, [pc, #292]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004244:	2301      	movs	r3, #1
 8004246:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004248:	4b46      	ldr	r3, [pc, #280]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004250:	2b00      	cmp	r3, #0
 8004252:	d118      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004254:	4b43      	ldr	r3, [pc, #268]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a42      	ldr	r2, [pc, #264]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800425a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800425e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004260:	f7fd ff8a 	bl	8002178 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004266:	e008      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004268:	f7fd ff86 	bl	8002178 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b64      	cmp	r3, #100	; 0x64
 8004274:	d901      	bls.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e06d      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800427a:	4b3a      	ldr	r3, [pc, #232]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f0      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004286:	4b36      	ldr	r3, [pc, #216]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800428e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d02e      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d027      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042a4:	4b2e      	ldr	r3, [pc, #184]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042ae:	4b2e      	ldr	r3, [pc, #184]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042b0:	2201      	movs	r2, #1
 80042b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042b4:	4b2c      	ldr	r3, [pc, #176]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042ba:	4a29      	ldr	r2, [pc, #164]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d014      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ca:	f7fd ff55 	bl	8002178 <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d0:	e00a      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d2:	f7fd ff51 	bl	8002178 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e036      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e8:	4b1d      	ldr	r3, [pc, #116]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0ee      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042f4:	4b1a      	ldr	r3, [pc, #104]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4917      	ldr	r1, [pc, #92]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004302:	4313      	orrs	r3, r2
 8004304:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004306:	7dfb      	ldrb	r3, [r7, #23]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d105      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800430c:	4b14      	ldr	r3, [pc, #80]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	4a13      	ldr	r2, [pc, #76]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004312:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004316:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d008      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004324:	4b0e      	ldr	r3, [pc, #56]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	490b      	ldr	r1, [pc, #44]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004332:	4313      	orrs	r3, r2
 8004334:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0310 	and.w	r3, r3, #16
 800433e:	2b00      	cmp	r3, #0
 8004340:	d008      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004342:	4b07      	ldr	r3, [pc, #28]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	4904      	ldr	r1, [pc, #16]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004350:	4313      	orrs	r3, r2
 8004352:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	40021000 	.word	0x40021000
 8004364:	40007000 	.word	0x40007000
 8004368:	42420440 	.word	0x42420440

0800436c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800436c:	b590      	push	{r4, r7, lr}
 800436e:	b08d      	sub	sp, #52	; 0x34
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004374:	4b58      	ldr	r3, [pc, #352]	; (80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004376:	f107 040c 	add.w	r4, r7, #12
 800437a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800437c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004380:	f240 2301 	movw	r3, #513	; 0x201
 8004384:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	627b      	str	r3, [r7, #36]	; 0x24
 800438a:	2300      	movs	r3, #0
 800438c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800438e:	2300      	movs	r3, #0
 8004390:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	61fb      	str	r3, [r7, #28]
 8004396:	2300      	movs	r3, #0
 8004398:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b10      	cmp	r3, #16
 800439e:	d00a      	beq.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b10      	cmp	r3, #16
 80043a4:	f200 808e 	bhi.w	80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d049      	beq.n	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d079      	beq.n	80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80043b4:	e086      	b.n	80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80043b6:	4b49      	ldr	r3, [pc, #292]	; (80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80043bc:	4b47      	ldr	r3, [pc, #284]	; (80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d07f      	beq.n	80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	0c9b      	lsrs	r3, r3, #18
 80043cc:	f003 030f 	and.w	r3, r3, #15
 80043d0:	3330      	adds	r3, #48	; 0x30
 80043d2:	443b      	add	r3, r7
 80043d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80043d8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d017      	beq.n	8004414 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80043e4:	4b3d      	ldr	r3, [pc, #244]	; (80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	0c5b      	lsrs	r3, r3, #17
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	3330      	adds	r3, #48	; 0x30
 80043f0:	443b      	add	r3, r7
 80043f2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00d      	beq.n	800441e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004402:	4a37      	ldr	r2, [pc, #220]	; (80044e0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	fbb2 f2f3 	udiv	r2, r2, r3
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	fb02 f303 	mul.w	r3, r2, r3
 8004410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004412:	e004      	b.n	800441e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	4a33      	ldr	r2, [pc, #204]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004418:	fb02 f303 	mul.w	r3, r2, r3
 800441c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800441e:	4b2f      	ldr	r3, [pc, #188]	; (80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004426:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800442a:	d102      	bne.n	8004432 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 800442c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004430:	e04a      	b.n	80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8004432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	4a2c      	ldr	r2, [pc, #176]	; (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8004438:	fba2 2303 	umull	r2, r3, r2, r3
 800443c:	085b      	lsrs	r3, r3, #1
 800443e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004440:	e042      	b.n	80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8004442:	4b26      	ldr	r3, [pc, #152]	; (80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800444e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004452:	d108      	bne.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 800445e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004462:	62bb      	str	r3, [r7, #40]	; 0x28
 8004464:	e01f      	b.n	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800446c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004470:	d109      	bne.n	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004472:	4b1a      	ldr	r3, [pc, #104]	; (80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800447e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004482:	62bb      	str	r3, [r7, #40]	; 0x28
 8004484:	e00f      	b.n	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004490:	d11c      	bne.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8004492:	4b12      	ldr	r3, [pc, #72]	; (80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d016      	beq.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800449e:	f24f 4324 	movw	r3, #62500	; 0xf424
 80044a2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80044a4:	e012      	b.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80044a6:	e011      	b.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80044a8:	f7ff fe78 	bl	800419c <HAL_RCC_GetPCLK2Freq>
 80044ac:	4602      	mov	r2, r0
 80044ae:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	0b9b      	lsrs	r3, r3, #14
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	3301      	adds	r3, #1
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80044c2:	e004      	b.n	80044ce <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80044c4:	bf00      	nop
 80044c6:	e002      	b.n	80044ce <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80044c8:	bf00      	nop
 80044ca:	e000      	b.n	80044ce <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80044cc:	bf00      	nop
    }
  }
  return (frequency);
 80044ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3734      	adds	r7, #52	; 0x34
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd90      	pop	{r4, r7, pc}
 80044d8:	08005cfc 	.word	0x08005cfc
 80044dc:	40021000 	.word	0x40021000
 80044e0:	007a1200 	.word	0x007a1200
 80044e4:	003d0900 	.word	0x003d0900
 80044e8:	aaaaaaab 	.word	0xaaaaaaab

080044ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e041      	b.n	8004582 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fd fcd0 	bl	8001eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	3304      	adds	r3, #4
 8004528:	4619      	mov	r1, r3
 800452a:	4610      	mov	r0, r2
 800452c:	f000 f93c 	bl	80047a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b01      	cmp	r3, #1
 800459e:	d001      	beq.n	80045a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e032      	b.n	800460a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2202      	movs	r2, #2
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a18      	ldr	r2, [pc, #96]	; (8004614 <HAL_TIM_Base_Start+0x88>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00e      	beq.n	80045d4 <HAL_TIM_Base_Start+0x48>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045be:	d009      	beq.n	80045d4 <HAL_TIM_Base_Start+0x48>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a14      	ldr	r2, [pc, #80]	; (8004618 <HAL_TIM_Base_Start+0x8c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d004      	beq.n	80045d4 <HAL_TIM_Base_Start+0x48>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a13      	ldr	r2, [pc, #76]	; (800461c <HAL_TIM_Base_Start+0x90>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d111      	bne.n	80045f8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b06      	cmp	r3, #6
 80045e4:	d010      	beq.n	8004608 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f042 0201 	orr.w	r2, r2, #1
 80045f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f6:	e007      	b.n	8004608 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0201 	orr.w	r2, r2, #1
 8004606:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	bc80      	pop	{r7}
 8004612:	4770      	bx	lr
 8004614:	40012c00 	.word	0x40012c00
 8004618:	40000400 	.word	0x40000400
 800461c:	40000800 	.word	0x40000800

08004620 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <HAL_TIM_ConfigClockSource+0x18>
 8004634:	2302      	movs	r3, #2
 8004636:	e0b3      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x180>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004656:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800465e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004670:	d03e      	beq.n	80046f0 <HAL_TIM_ConfigClockSource+0xd0>
 8004672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004676:	f200 8087 	bhi.w	8004788 <HAL_TIM_ConfigClockSource+0x168>
 800467a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467e:	f000 8085 	beq.w	800478c <HAL_TIM_ConfigClockSource+0x16c>
 8004682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004686:	d87f      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 8004688:	2b70      	cmp	r3, #112	; 0x70
 800468a:	d01a      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0xa2>
 800468c:	2b70      	cmp	r3, #112	; 0x70
 800468e:	d87b      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 8004690:	2b60      	cmp	r3, #96	; 0x60
 8004692:	d050      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0x116>
 8004694:	2b60      	cmp	r3, #96	; 0x60
 8004696:	d877      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 8004698:	2b50      	cmp	r3, #80	; 0x50
 800469a:	d03c      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0xf6>
 800469c:	2b50      	cmp	r3, #80	; 0x50
 800469e:	d873      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 80046a0:	2b40      	cmp	r3, #64	; 0x40
 80046a2:	d058      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x136>
 80046a4:	2b40      	cmp	r3, #64	; 0x40
 80046a6:	d86f      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 80046a8:	2b30      	cmp	r3, #48	; 0x30
 80046aa:	d064      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x156>
 80046ac:	2b30      	cmp	r3, #48	; 0x30
 80046ae:	d86b      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	d060      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x156>
 80046b4:	2b20      	cmp	r3, #32
 80046b6:	d867      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d05c      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x156>
 80046bc:	2b10      	cmp	r3, #16
 80046be:	d05a      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80046c0:	e062      	b.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6818      	ldr	r0, [r3, #0]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	6899      	ldr	r1, [r3, #8]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f000 f942 	bl	800495a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	609a      	str	r2, [r3, #8]
      break;
 80046ee:	e04e      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	6899      	ldr	r1, [r3, #8]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f000 f92b 	bl	800495a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004712:	609a      	str	r2, [r3, #8]
      break;
 8004714:	e03b      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6818      	ldr	r0, [r3, #0]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	6859      	ldr	r1, [r3, #4]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	461a      	mov	r2, r3
 8004724:	f000 f8a2 	bl	800486c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2150      	movs	r1, #80	; 0x50
 800472e:	4618      	mov	r0, r3
 8004730:	f000 f8f9 	bl	8004926 <TIM_ITRx_SetConfig>
      break;
 8004734:	e02b      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	6859      	ldr	r1, [r3, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	461a      	mov	r2, r3
 8004744:	f000 f8c0 	bl	80048c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2160      	movs	r1, #96	; 0x60
 800474e:	4618      	mov	r0, r3
 8004750:	f000 f8e9 	bl	8004926 <TIM_ITRx_SetConfig>
      break;
 8004754:	e01b      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6818      	ldr	r0, [r3, #0]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	6859      	ldr	r1, [r3, #4]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	461a      	mov	r2, r3
 8004764:	f000 f882 	bl	800486c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2140      	movs	r1, #64	; 0x40
 800476e:	4618      	mov	r0, r3
 8004770:	f000 f8d9 	bl	8004926 <TIM_ITRx_SetConfig>
      break;
 8004774:	e00b      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4619      	mov	r1, r3
 8004780:	4610      	mov	r0, r2
 8004782:	f000 f8d0 	bl	8004926 <TIM_ITRx_SetConfig>
        break;
 8004786:	e002      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004788:	bf00      	nop
 800478a:	e000      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800478c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a29      	ldr	r2, [pc, #164]	; (8004860 <TIM_Base_SetConfig+0xb8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d00b      	beq.n	80047d8 <TIM_Base_SetConfig+0x30>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c6:	d007      	beq.n	80047d8 <TIM_Base_SetConfig+0x30>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a26      	ldr	r2, [pc, #152]	; (8004864 <TIM_Base_SetConfig+0xbc>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d003      	beq.n	80047d8 <TIM_Base_SetConfig+0x30>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a25      	ldr	r2, [pc, #148]	; (8004868 <TIM_Base_SetConfig+0xc0>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d108      	bne.n	80047ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a1c      	ldr	r2, [pc, #112]	; (8004860 <TIM_Base_SetConfig+0xb8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00b      	beq.n	800480a <TIM_Base_SetConfig+0x62>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f8:	d007      	beq.n	800480a <TIM_Base_SetConfig+0x62>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a19      	ldr	r2, [pc, #100]	; (8004864 <TIM_Base_SetConfig+0xbc>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d003      	beq.n	800480a <TIM_Base_SetConfig+0x62>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a18      	ldr	r2, [pc, #96]	; (8004868 <TIM_Base_SetConfig+0xc0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d108      	bne.n	800481c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4313      	orrs	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a07      	ldr	r2, [pc, #28]	; (8004860 <TIM_Base_SetConfig+0xb8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d103      	bne.n	8004850 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	691a      	ldr	r2, [r3, #16]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	615a      	str	r2, [r3, #20]
}
 8004856:	bf00      	nop
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr
 8004860:	40012c00 	.word	0x40012c00
 8004864:	40000400 	.word	0x40000400
 8004868:	40000800 	.word	0x40000800

0800486c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	f023 0201 	bic.w	r2, r3, #1
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	011b      	lsls	r3, r3, #4
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	4313      	orrs	r3, r2
 80048a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f023 030a 	bic.w	r3, r3, #10
 80048a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	621a      	str	r2, [r3, #32]
}
 80048be:	bf00      	nop
 80048c0:	371c      	adds	r7, #28
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr

080048c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	f023 0210 	bic.w	r2, r3, #16
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	031b      	lsls	r3, r3, #12
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004904:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	621a      	str	r2, [r3, #32]
}
 800491c:	bf00      	nop
 800491e:	371c      	adds	r7, #28
 8004920:	46bd      	mov	sp, r7
 8004922:	bc80      	pop	{r7}
 8004924:	4770      	bx	lr

08004926 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004926:	b480      	push	{r7}
 8004928:	b085      	sub	sp, #20
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	f043 0307 	orr.w	r3, r3, #7
 8004948:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	609a      	str	r2, [r3, #8]
}
 8004950:	bf00      	nop
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	bc80      	pop	{r7}
 8004958:	4770      	bx	lr

0800495a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800495a:	b480      	push	{r7}
 800495c:	b087      	sub	sp, #28
 800495e:	af00      	add	r7, sp, #0
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	607a      	str	r2, [r7, #4]
 8004966:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004974:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	021a      	lsls	r2, r3, #8
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	431a      	orrs	r2, r3
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	4313      	orrs	r3, r2
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	4313      	orrs	r3, r2
 8004986:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	609a      	str	r2, [r3, #8]
}
 800498e:	bf00      	nop
 8004990:	371c      	adds	r7, #28
 8004992:	46bd      	mov	sp, r7
 8004994:	bc80      	pop	{r7}
 8004996:	4770      	bx	lr

08004998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d101      	bne.n	80049b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049ac:	2302      	movs	r3, #2
 80049ae:	e046      	b.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a16      	ldr	r2, [pc, #88]	; (8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d00e      	beq.n	8004a12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049fc:	d009      	beq.n	8004a12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a12      	ldr	r2, [pc, #72]	; (8004a4c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d004      	beq.n	8004a12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a10      	ldr	r2, [pc, #64]	; (8004a50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d10c      	bne.n	8004a2c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr
 8004a48:	40012c00 	.word	0x40012c00
 8004a4c:	40000400 	.word	0x40000400
 8004a50:	40000800 	.word	0x40000800

08004a54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e03f      	b.n	8004ae6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d106      	bne.n	8004a80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7fd fa3a 	bl	8001ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2224      	movs	r2, #36	; 0x24
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 fb49 	bl	8005130 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004aac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	695a      	ldr	r2, [r3, #20]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004abc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004acc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
	...

08004af0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08a      	sub	sp, #40	; 0x28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004b14:	2300      	movs	r3, #0
 8004b16:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10d      	bne.n	8004b42 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	f003 0320 	and.w	r3, r3, #32
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d008      	beq.n	8004b42 <HAL_UART_IRQHandler+0x52>
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	f003 0320 	and.w	r3, r3, #32
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d003      	beq.n	8004b42 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fa4f 	bl	8004fde <UART_Receive_IT>
      return;
 8004b40:	e17b      	b.n	8004e3a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 80b1 	beq.w	8004cac <HAL_UART_IRQHandler+0x1bc>
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d105      	bne.n	8004b60 <HAL_UART_IRQHandler+0x70>
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 80a6 	beq.w	8004cac <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <HAL_UART_IRQHandler+0x90>
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b78:	f043 0201 	orr.w	r2, r3, #1
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	f003 0304 	and.w	r3, r3, #4
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00a      	beq.n	8004ba0 <HAL_UART_IRQHandler+0xb0>
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d005      	beq.n	8004ba0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b98:	f043 0202 	orr.w	r2, r3, #2
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00a      	beq.n	8004bc0 <HAL_UART_IRQHandler+0xd0>
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb8:	f043 0204 	orr.w	r2, r3, #4
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	f003 0308 	and.w	r3, r3, #8
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00f      	beq.n	8004bea <HAL_UART_IRQHandler+0xfa>
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	f003 0320 	and.w	r3, r3, #32
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d104      	bne.n	8004bde <HAL_UART_IRQHandler+0xee>
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d005      	beq.n	8004bea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	f043 0208 	orr.w	r2, r3, #8
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 811e 	beq.w	8004e30 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d007      	beq.n	8004c0e <HAL_UART_IRQHandler+0x11e>
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	f003 0320 	and.w	r3, r3, #32
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d002      	beq.n	8004c0e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f9e8 	bl	8004fde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	bf14      	ite	ne
 8004c1c:	2301      	movne	r3, #1
 8004c1e:	2300      	moveq	r3, #0
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	f003 0308 	and.w	r3, r3, #8
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d102      	bne.n	8004c36 <HAL_UART_IRQHandler+0x146>
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d031      	beq.n	8004c9a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f92a 	bl	8004e90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d023      	beq.n	8004c92 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	695a      	ldr	r2, [r3, #20]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c58:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d013      	beq.n	8004c8a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c66:	4a76      	ldr	r2, [pc, #472]	; (8004e40 <HAL_UART_IRQHandler+0x350>)
 8004c68:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fe f850 	bl	8002d14 <HAL_DMA_Abort_IT>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d016      	beq.n	8004ca8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c84:	4610      	mov	r0, r2
 8004c86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c88:	e00e      	b.n	8004ca8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f8ec 	bl	8004e68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c90:	e00a      	b.n	8004ca8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f8e8 	bl	8004e68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c98:	e006      	b.n	8004ca8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f8e4 	bl	8004e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004ca6:	e0c3      	b.n	8004e30 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca8:	bf00      	nop
    return;
 8004caa:	e0c1      	b.n	8004e30 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	f040 80a1 	bne.w	8004df8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	f003 0310 	and.w	r3, r3, #16
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 809b 	beq.w	8004df8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	f003 0310 	and.w	r3, r3, #16
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 8095 	beq.w	8004df8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	60fb      	str	r3, [r7, #12]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	60fb      	str	r3, [r7, #12]
 8004ce2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d04e      	beq.n	8004d90 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004cfc:	8a3b      	ldrh	r3, [r7, #16]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 8098 	beq.w	8004e34 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d08:	8a3a      	ldrh	r2, [r7, #16]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	f080 8092 	bcs.w	8004e34 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	8a3a      	ldrh	r2, [r7, #16]
 8004d14:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	2b20      	cmp	r3, #32
 8004d1e:	d02b      	beq.n	8004d78 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d2e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695a      	ldr	r2, [r3, #20]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 0201 	bic.w	r2, r2, #1
 8004d3e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	695a      	ldr	r2, [r3, #20]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d4e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68da      	ldr	r2, [r3, #12]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 0210 	bic.w	r2, r2, #16
 8004d6c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fd ff93 	bl	8002c9e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	4619      	mov	r1, r3
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f876 	bl	8004e7a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004d8e:	e051      	b.n	8004e34 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d047      	beq.n	8004e38 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004da8:	8a7b      	ldrh	r3, [r7, #18]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d044      	beq.n	8004e38 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68da      	ldr	r2, [r3, #12]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004dbc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	695a      	ldr	r2, [r3, #20]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 0201 	bic.w	r2, r2, #1
 8004dcc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0210 	bic.w	r2, r2, #16
 8004dea:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004dec:	8a7b      	ldrh	r3, [r7, #18]
 8004dee:	4619      	mov	r1, r3
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f842 	bl	8004e7a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004df6:	e01f      	b.n	8004e38 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d008      	beq.n	8004e14 <HAL_UART_IRQHandler+0x324>
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f87f 	bl	8004f10 <UART_Transmit_IT>
    return;
 8004e12:	e012      	b.n	8004e3a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00d      	beq.n	8004e3a <HAL_UART_IRQHandler+0x34a>
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d008      	beq.n	8004e3a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f8c0 	bl	8004fae <UART_EndTransmit_IT>
    return;
 8004e2e:	e004      	b.n	8004e3a <HAL_UART_IRQHandler+0x34a>
    return;
 8004e30:	bf00      	nop
 8004e32:	e002      	b.n	8004e3a <HAL_UART_IRQHandler+0x34a>
      return;
 8004e34:	bf00      	nop
 8004e36:	e000      	b.n	8004e3a <HAL_UART_IRQHandler+0x34a>
      return;
 8004e38:	bf00      	nop
  }
}
 8004e3a:	3728      	adds	r7, #40	; 0x28
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	08004ee9 	.word	0x08004ee9

08004e44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bc80      	pop	{r7}
 8004e54:	4770      	bx	lr

08004e56 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bc80      	pop	{r7}
 8004e66:	4770      	bx	lr

08004e68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bc80      	pop	{r7}
 8004e78:	4770      	bx	lr

08004e7a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	460b      	mov	r3, r1
 8004e84:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bc80      	pop	{r7}
 8004e8e:	4770      	bx	lr

08004e90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ea6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	695a      	ldr	r2, [r3, #20]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f022 0201 	bic.w	r2, r2, #1
 8004eb6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d107      	bne.n	8004ed0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 0210 	bic.w	r2, r2, #16
 8004ece:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ede:	bf00      	nop
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bc80      	pop	{r7}
 8004ee6:	4770      	bx	lr

08004ee8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f7ff ffb0 	bl	8004e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f08:	bf00      	nop
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b21      	cmp	r3, #33	; 0x21
 8004f22:	d13e      	bne.n	8004fa2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f2c:	d114      	bne.n	8004f58 <UART_Transmit_IT+0x48>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d110      	bne.n	8004f58 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	461a      	mov	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f4a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	1c9a      	adds	r2, r3, #2
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	621a      	str	r2, [r3, #32]
 8004f56:	e008      	b.n	8004f6a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	1c59      	adds	r1, r3, #1
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6211      	str	r1, [r2, #32]
 8004f62:	781a      	ldrb	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	3b01      	subs	r3, #1
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	4619      	mov	r1, r3
 8004f78:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10f      	bne.n	8004f9e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f8c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68da      	ldr	r2, [r3, #12]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f9c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	e000      	b.n	8004fa4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004fa2:	2302      	movs	r3, #2
  }
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bc80      	pop	{r7}
 8004fac:	4770      	bx	lr

08004fae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b082      	sub	sp, #8
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fc4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7ff ff38 	bl	8004e44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b086      	sub	sp, #24
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b22      	cmp	r3, #34	; 0x22
 8004ff0:	f040 8099 	bne.w	8005126 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ffc:	d117      	bne.n	800502e <UART_Receive_IT+0x50>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d113      	bne.n	800502e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005006:	2300      	movs	r3, #0
 8005008:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	b29b      	uxth	r3, r3
 8005018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800501c:	b29a      	uxth	r2, r3
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005026:	1c9a      	adds	r2, r3, #2
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	629a      	str	r2, [r3, #40]	; 0x28
 800502c:	e026      	b.n	800507c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005032:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005034:	2300      	movs	r3, #0
 8005036:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005040:	d007      	beq.n	8005052 <UART_Receive_IT+0x74>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10a      	bne.n	8005060 <UART_Receive_IT+0x82>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d106      	bne.n	8005060 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	b2da      	uxtb	r2, r3
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	701a      	strb	r2, [r3, #0]
 800505e:	e008      	b.n	8005072 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	b2db      	uxtb	r3, r3
 8005068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800506c:	b2da      	uxtb	r2, r3
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005076:	1c5a      	adds	r2, r3, #1
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005080:	b29b      	uxth	r3, r3
 8005082:	3b01      	subs	r3, #1
 8005084:	b29b      	uxth	r3, r3
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	4619      	mov	r1, r3
 800508a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800508c:	2b00      	cmp	r3, #0
 800508e:	d148      	bne.n	8005122 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 0220 	bic.w	r2, r2, #32
 800509e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68da      	ldr	r2, [r3, #12]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	695a      	ldr	r2, [r3, #20]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0201 	bic.w	r2, r2, #1
 80050be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2220      	movs	r2, #32
 80050c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d123      	bne.n	8005118 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68da      	ldr	r2, [r3, #12]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0210 	bic.w	r2, r2, #16
 80050e4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0310 	and.w	r3, r3, #16
 80050f0:	2b10      	cmp	r3, #16
 80050f2:	d10a      	bne.n	800510a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050f4:	2300      	movs	r3, #0
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800510e:	4619      	mov	r1, r3
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7ff feb2 	bl	8004e7a <HAL_UARTEx_RxEventCallback>
 8005116:	e002      	b.n	800511e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7ff fe9c 	bl	8004e56 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800511e:	2300      	movs	r3, #0
 8005120:	e002      	b.n	8005128 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005122:	2300      	movs	r3, #0
 8005124:	e000      	b.n	8005128 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005126:	2302      	movs	r3, #2
  }
}
 8005128:	4618      	mov	r0, r3
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689a      	ldr	r2, [r3, #8]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	431a      	orrs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	4313      	orrs	r3, r2
 800515e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800516a:	f023 030c 	bic.w	r3, r3, #12
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6812      	ldr	r2, [r2, #0]
 8005172:	68b9      	ldr	r1, [r7, #8]
 8005174:	430b      	orrs	r3, r1
 8005176:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	699a      	ldr	r2, [r3, #24]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a2c      	ldr	r2, [pc, #176]	; (8005244 <UART_SetConfig+0x114>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d103      	bne.n	80051a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005198:	f7ff f800 	bl	800419c <HAL_RCC_GetPCLK2Freq>
 800519c:	60f8      	str	r0, [r7, #12]
 800519e:	e002      	b.n	80051a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80051a0:	f7fe ffe8 	bl	8004174 <HAL_RCC_GetPCLK1Freq>
 80051a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4613      	mov	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4413      	add	r3, r2
 80051ae:	009a      	lsls	r2, r3, #2
 80051b0:	441a      	add	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051bc:	4a22      	ldr	r2, [pc, #136]	; (8005248 <UART_SetConfig+0x118>)
 80051be:	fba2 2303 	umull	r2, r3, r2, r3
 80051c2:	095b      	lsrs	r3, r3, #5
 80051c4:	0119      	lsls	r1, r3, #4
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4613      	mov	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	009a      	lsls	r2, r3, #2
 80051d0:	441a      	add	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80051dc:	4b1a      	ldr	r3, [pc, #104]	; (8005248 <UART_SetConfig+0x118>)
 80051de:	fba3 0302 	umull	r0, r3, r3, r2
 80051e2:	095b      	lsrs	r3, r3, #5
 80051e4:	2064      	movs	r0, #100	; 0x64
 80051e6:	fb00 f303 	mul.w	r3, r0, r3
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	011b      	lsls	r3, r3, #4
 80051ee:	3332      	adds	r3, #50	; 0x32
 80051f0:	4a15      	ldr	r2, [pc, #84]	; (8005248 <UART_SetConfig+0x118>)
 80051f2:	fba2 2303 	umull	r2, r3, r2, r3
 80051f6:	095b      	lsrs	r3, r3, #5
 80051f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051fc:	4419      	add	r1, r3
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	4613      	mov	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	009a      	lsls	r2, r3, #2
 8005208:	441a      	add	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	fbb2 f2f3 	udiv	r2, r2, r3
 8005214:	4b0c      	ldr	r3, [pc, #48]	; (8005248 <UART_SetConfig+0x118>)
 8005216:	fba3 0302 	umull	r0, r3, r3, r2
 800521a:	095b      	lsrs	r3, r3, #5
 800521c:	2064      	movs	r0, #100	; 0x64
 800521e:	fb00 f303 	mul.w	r3, r0, r3
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	011b      	lsls	r3, r3, #4
 8005226:	3332      	adds	r3, #50	; 0x32
 8005228:	4a07      	ldr	r2, [pc, #28]	; (8005248 <UART_SetConfig+0x118>)
 800522a:	fba2 2303 	umull	r2, r3, r2, r3
 800522e:	095b      	lsrs	r3, r3, #5
 8005230:	f003 020f 	and.w	r2, r3, #15
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	440a      	add	r2, r1
 800523a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800523c:	bf00      	nop
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	40013800 	.word	0x40013800
 8005248:	51eb851f 	.word	0x51eb851f

0800524c <__errno>:
 800524c:	4b01      	ldr	r3, [pc, #4]	; (8005254 <__errno+0x8>)
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	2000000c 	.word	0x2000000c

08005258 <__libc_init_array>:
 8005258:	b570      	push	{r4, r5, r6, lr}
 800525a:	2600      	movs	r6, #0
 800525c:	4d0c      	ldr	r5, [pc, #48]	; (8005290 <__libc_init_array+0x38>)
 800525e:	4c0d      	ldr	r4, [pc, #52]	; (8005294 <__libc_init_array+0x3c>)
 8005260:	1b64      	subs	r4, r4, r5
 8005262:	10a4      	asrs	r4, r4, #2
 8005264:	42a6      	cmp	r6, r4
 8005266:	d109      	bne.n	800527c <__libc_init_array+0x24>
 8005268:	f000 fc9c 	bl	8005ba4 <_init>
 800526c:	2600      	movs	r6, #0
 800526e:	4d0a      	ldr	r5, [pc, #40]	; (8005298 <__libc_init_array+0x40>)
 8005270:	4c0a      	ldr	r4, [pc, #40]	; (800529c <__libc_init_array+0x44>)
 8005272:	1b64      	subs	r4, r4, r5
 8005274:	10a4      	asrs	r4, r4, #2
 8005276:	42a6      	cmp	r6, r4
 8005278:	d105      	bne.n	8005286 <__libc_init_array+0x2e>
 800527a:	bd70      	pop	{r4, r5, r6, pc}
 800527c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005280:	4798      	blx	r3
 8005282:	3601      	adds	r6, #1
 8005284:	e7ee      	b.n	8005264 <__libc_init_array+0xc>
 8005286:	f855 3b04 	ldr.w	r3, [r5], #4
 800528a:	4798      	blx	r3
 800528c:	3601      	adds	r6, #1
 800528e:	e7f2      	b.n	8005276 <__libc_init_array+0x1e>
 8005290:	08005d58 	.word	0x08005d58
 8005294:	08005d58 	.word	0x08005d58
 8005298:	08005d58 	.word	0x08005d58
 800529c:	08005d5c 	.word	0x08005d5c

080052a0 <memset>:
 80052a0:	4603      	mov	r3, r0
 80052a2:	4402      	add	r2, r0
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d100      	bne.n	80052aa <memset+0xa>
 80052a8:	4770      	bx	lr
 80052aa:	f803 1b01 	strb.w	r1, [r3], #1
 80052ae:	e7f9      	b.n	80052a4 <memset+0x4>

080052b0 <siprintf>:
 80052b0:	b40e      	push	{r1, r2, r3}
 80052b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80052b6:	b500      	push	{lr}
 80052b8:	b09c      	sub	sp, #112	; 0x70
 80052ba:	ab1d      	add	r3, sp, #116	; 0x74
 80052bc:	9002      	str	r0, [sp, #8]
 80052be:	9006      	str	r0, [sp, #24]
 80052c0:	9107      	str	r1, [sp, #28]
 80052c2:	9104      	str	r1, [sp, #16]
 80052c4:	4808      	ldr	r0, [pc, #32]	; (80052e8 <siprintf+0x38>)
 80052c6:	4909      	ldr	r1, [pc, #36]	; (80052ec <siprintf+0x3c>)
 80052c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80052cc:	9105      	str	r1, [sp, #20]
 80052ce:	6800      	ldr	r0, [r0, #0]
 80052d0:	a902      	add	r1, sp, #8
 80052d2:	9301      	str	r3, [sp, #4]
 80052d4:	f000 f868 	bl	80053a8 <_svfiprintf_r>
 80052d8:	2200      	movs	r2, #0
 80052da:	9b02      	ldr	r3, [sp, #8]
 80052dc:	701a      	strb	r2, [r3, #0]
 80052de:	b01c      	add	sp, #112	; 0x70
 80052e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80052e4:	b003      	add	sp, #12
 80052e6:	4770      	bx	lr
 80052e8:	2000000c 	.word	0x2000000c
 80052ec:	ffff0208 	.word	0xffff0208

080052f0 <__ssputs_r>:
 80052f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052f4:	688e      	ldr	r6, [r1, #8]
 80052f6:	4682      	mov	sl, r0
 80052f8:	429e      	cmp	r6, r3
 80052fa:	460c      	mov	r4, r1
 80052fc:	4690      	mov	r8, r2
 80052fe:	461f      	mov	r7, r3
 8005300:	d838      	bhi.n	8005374 <__ssputs_r+0x84>
 8005302:	898a      	ldrh	r2, [r1, #12]
 8005304:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005308:	d032      	beq.n	8005370 <__ssputs_r+0x80>
 800530a:	6825      	ldr	r5, [r4, #0]
 800530c:	6909      	ldr	r1, [r1, #16]
 800530e:	3301      	adds	r3, #1
 8005310:	eba5 0901 	sub.w	r9, r5, r1
 8005314:	6965      	ldr	r5, [r4, #20]
 8005316:	444b      	add	r3, r9
 8005318:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800531c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005320:	106d      	asrs	r5, r5, #1
 8005322:	429d      	cmp	r5, r3
 8005324:	bf38      	it	cc
 8005326:	461d      	movcc	r5, r3
 8005328:	0553      	lsls	r3, r2, #21
 800532a:	d531      	bpl.n	8005390 <__ssputs_r+0xa0>
 800532c:	4629      	mov	r1, r5
 800532e:	f000 fb6f 	bl	8005a10 <_malloc_r>
 8005332:	4606      	mov	r6, r0
 8005334:	b950      	cbnz	r0, 800534c <__ssputs_r+0x5c>
 8005336:	230c      	movs	r3, #12
 8005338:	f04f 30ff 	mov.w	r0, #4294967295
 800533c:	f8ca 3000 	str.w	r3, [sl]
 8005340:	89a3      	ldrh	r3, [r4, #12]
 8005342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005346:	81a3      	strh	r3, [r4, #12]
 8005348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800534c:	464a      	mov	r2, r9
 800534e:	6921      	ldr	r1, [r4, #16]
 8005350:	f000 face 	bl	80058f0 <memcpy>
 8005354:	89a3      	ldrh	r3, [r4, #12]
 8005356:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800535a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800535e:	81a3      	strh	r3, [r4, #12]
 8005360:	6126      	str	r6, [r4, #16]
 8005362:	444e      	add	r6, r9
 8005364:	6026      	str	r6, [r4, #0]
 8005366:	463e      	mov	r6, r7
 8005368:	6165      	str	r5, [r4, #20]
 800536a:	eba5 0509 	sub.w	r5, r5, r9
 800536e:	60a5      	str	r5, [r4, #8]
 8005370:	42be      	cmp	r6, r7
 8005372:	d900      	bls.n	8005376 <__ssputs_r+0x86>
 8005374:	463e      	mov	r6, r7
 8005376:	4632      	mov	r2, r6
 8005378:	4641      	mov	r1, r8
 800537a:	6820      	ldr	r0, [r4, #0]
 800537c:	f000 fac6 	bl	800590c <memmove>
 8005380:	68a3      	ldr	r3, [r4, #8]
 8005382:	2000      	movs	r0, #0
 8005384:	1b9b      	subs	r3, r3, r6
 8005386:	60a3      	str	r3, [r4, #8]
 8005388:	6823      	ldr	r3, [r4, #0]
 800538a:	4433      	add	r3, r6
 800538c:	6023      	str	r3, [r4, #0]
 800538e:	e7db      	b.n	8005348 <__ssputs_r+0x58>
 8005390:	462a      	mov	r2, r5
 8005392:	f000 fbb1 	bl	8005af8 <_realloc_r>
 8005396:	4606      	mov	r6, r0
 8005398:	2800      	cmp	r0, #0
 800539a:	d1e1      	bne.n	8005360 <__ssputs_r+0x70>
 800539c:	4650      	mov	r0, sl
 800539e:	6921      	ldr	r1, [r4, #16]
 80053a0:	f000 face 	bl	8005940 <_free_r>
 80053a4:	e7c7      	b.n	8005336 <__ssputs_r+0x46>
	...

080053a8 <_svfiprintf_r>:
 80053a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ac:	4698      	mov	r8, r3
 80053ae:	898b      	ldrh	r3, [r1, #12]
 80053b0:	4607      	mov	r7, r0
 80053b2:	061b      	lsls	r3, r3, #24
 80053b4:	460d      	mov	r5, r1
 80053b6:	4614      	mov	r4, r2
 80053b8:	b09d      	sub	sp, #116	; 0x74
 80053ba:	d50e      	bpl.n	80053da <_svfiprintf_r+0x32>
 80053bc:	690b      	ldr	r3, [r1, #16]
 80053be:	b963      	cbnz	r3, 80053da <_svfiprintf_r+0x32>
 80053c0:	2140      	movs	r1, #64	; 0x40
 80053c2:	f000 fb25 	bl	8005a10 <_malloc_r>
 80053c6:	6028      	str	r0, [r5, #0]
 80053c8:	6128      	str	r0, [r5, #16]
 80053ca:	b920      	cbnz	r0, 80053d6 <_svfiprintf_r+0x2e>
 80053cc:	230c      	movs	r3, #12
 80053ce:	603b      	str	r3, [r7, #0]
 80053d0:	f04f 30ff 	mov.w	r0, #4294967295
 80053d4:	e0d1      	b.n	800557a <_svfiprintf_r+0x1d2>
 80053d6:	2340      	movs	r3, #64	; 0x40
 80053d8:	616b      	str	r3, [r5, #20]
 80053da:	2300      	movs	r3, #0
 80053dc:	9309      	str	r3, [sp, #36]	; 0x24
 80053de:	2320      	movs	r3, #32
 80053e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053e4:	2330      	movs	r3, #48	; 0x30
 80053e6:	f04f 0901 	mov.w	r9, #1
 80053ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80053ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005594 <_svfiprintf_r+0x1ec>
 80053f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053f6:	4623      	mov	r3, r4
 80053f8:	469a      	mov	sl, r3
 80053fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053fe:	b10a      	cbz	r2, 8005404 <_svfiprintf_r+0x5c>
 8005400:	2a25      	cmp	r2, #37	; 0x25
 8005402:	d1f9      	bne.n	80053f8 <_svfiprintf_r+0x50>
 8005404:	ebba 0b04 	subs.w	fp, sl, r4
 8005408:	d00b      	beq.n	8005422 <_svfiprintf_r+0x7a>
 800540a:	465b      	mov	r3, fp
 800540c:	4622      	mov	r2, r4
 800540e:	4629      	mov	r1, r5
 8005410:	4638      	mov	r0, r7
 8005412:	f7ff ff6d 	bl	80052f0 <__ssputs_r>
 8005416:	3001      	adds	r0, #1
 8005418:	f000 80aa 	beq.w	8005570 <_svfiprintf_r+0x1c8>
 800541c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800541e:	445a      	add	r2, fp
 8005420:	9209      	str	r2, [sp, #36]	; 0x24
 8005422:	f89a 3000 	ldrb.w	r3, [sl]
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 80a2 	beq.w	8005570 <_svfiprintf_r+0x1c8>
 800542c:	2300      	movs	r3, #0
 800542e:	f04f 32ff 	mov.w	r2, #4294967295
 8005432:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005436:	f10a 0a01 	add.w	sl, sl, #1
 800543a:	9304      	str	r3, [sp, #16]
 800543c:	9307      	str	r3, [sp, #28]
 800543e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005442:	931a      	str	r3, [sp, #104]	; 0x68
 8005444:	4654      	mov	r4, sl
 8005446:	2205      	movs	r2, #5
 8005448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800544c:	4851      	ldr	r0, [pc, #324]	; (8005594 <_svfiprintf_r+0x1ec>)
 800544e:	f000 fa41 	bl	80058d4 <memchr>
 8005452:	9a04      	ldr	r2, [sp, #16]
 8005454:	b9d8      	cbnz	r0, 800548e <_svfiprintf_r+0xe6>
 8005456:	06d0      	lsls	r0, r2, #27
 8005458:	bf44      	itt	mi
 800545a:	2320      	movmi	r3, #32
 800545c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005460:	0711      	lsls	r1, r2, #28
 8005462:	bf44      	itt	mi
 8005464:	232b      	movmi	r3, #43	; 0x2b
 8005466:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800546a:	f89a 3000 	ldrb.w	r3, [sl]
 800546e:	2b2a      	cmp	r3, #42	; 0x2a
 8005470:	d015      	beq.n	800549e <_svfiprintf_r+0xf6>
 8005472:	4654      	mov	r4, sl
 8005474:	2000      	movs	r0, #0
 8005476:	f04f 0c0a 	mov.w	ip, #10
 800547a:	9a07      	ldr	r2, [sp, #28]
 800547c:	4621      	mov	r1, r4
 800547e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005482:	3b30      	subs	r3, #48	; 0x30
 8005484:	2b09      	cmp	r3, #9
 8005486:	d94e      	bls.n	8005526 <_svfiprintf_r+0x17e>
 8005488:	b1b0      	cbz	r0, 80054b8 <_svfiprintf_r+0x110>
 800548a:	9207      	str	r2, [sp, #28]
 800548c:	e014      	b.n	80054b8 <_svfiprintf_r+0x110>
 800548e:	eba0 0308 	sub.w	r3, r0, r8
 8005492:	fa09 f303 	lsl.w	r3, r9, r3
 8005496:	4313      	orrs	r3, r2
 8005498:	46a2      	mov	sl, r4
 800549a:	9304      	str	r3, [sp, #16]
 800549c:	e7d2      	b.n	8005444 <_svfiprintf_r+0x9c>
 800549e:	9b03      	ldr	r3, [sp, #12]
 80054a0:	1d19      	adds	r1, r3, #4
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	9103      	str	r1, [sp, #12]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	bfbb      	ittet	lt
 80054aa:	425b      	neglt	r3, r3
 80054ac:	f042 0202 	orrlt.w	r2, r2, #2
 80054b0:	9307      	strge	r3, [sp, #28]
 80054b2:	9307      	strlt	r3, [sp, #28]
 80054b4:	bfb8      	it	lt
 80054b6:	9204      	strlt	r2, [sp, #16]
 80054b8:	7823      	ldrb	r3, [r4, #0]
 80054ba:	2b2e      	cmp	r3, #46	; 0x2e
 80054bc:	d10c      	bne.n	80054d8 <_svfiprintf_r+0x130>
 80054be:	7863      	ldrb	r3, [r4, #1]
 80054c0:	2b2a      	cmp	r3, #42	; 0x2a
 80054c2:	d135      	bne.n	8005530 <_svfiprintf_r+0x188>
 80054c4:	9b03      	ldr	r3, [sp, #12]
 80054c6:	3402      	adds	r4, #2
 80054c8:	1d1a      	adds	r2, r3, #4
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	9203      	str	r2, [sp, #12]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	bfb8      	it	lt
 80054d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80054d6:	9305      	str	r3, [sp, #20]
 80054d8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005598 <_svfiprintf_r+0x1f0>
 80054dc:	2203      	movs	r2, #3
 80054de:	4650      	mov	r0, sl
 80054e0:	7821      	ldrb	r1, [r4, #0]
 80054e2:	f000 f9f7 	bl	80058d4 <memchr>
 80054e6:	b140      	cbz	r0, 80054fa <_svfiprintf_r+0x152>
 80054e8:	2340      	movs	r3, #64	; 0x40
 80054ea:	eba0 000a 	sub.w	r0, r0, sl
 80054ee:	fa03 f000 	lsl.w	r0, r3, r0
 80054f2:	9b04      	ldr	r3, [sp, #16]
 80054f4:	3401      	adds	r4, #1
 80054f6:	4303      	orrs	r3, r0
 80054f8:	9304      	str	r3, [sp, #16]
 80054fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054fe:	2206      	movs	r2, #6
 8005500:	4826      	ldr	r0, [pc, #152]	; (800559c <_svfiprintf_r+0x1f4>)
 8005502:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005506:	f000 f9e5 	bl	80058d4 <memchr>
 800550a:	2800      	cmp	r0, #0
 800550c:	d038      	beq.n	8005580 <_svfiprintf_r+0x1d8>
 800550e:	4b24      	ldr	r3, [pc, #144]	; (80055a0 <_svfiprintf_r+0x1f8>)
 8005510:	bb1b      	cbnz	r3, 800555a <_svfiprintf_r+0x1b2>
 8005512:	9b03      	ldr	r3, [sp, #12]
 8005514:	3307      	adds	r3, #7
 8005516:	f023 0307 	bic.w	r3, r3, #7
 800551a:	3308      	adds	r3, #8
 800551c:	9303      	str	r3, [sp, #12]
 800551e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005520:	4433      	add	r3, r6
 8005522:	9309      	str	r3, [sp, #36]	; 0x24
 8005524:	e767      	b.n	80053f6 <_svfiprintf_r+0x4e>
 8005526:	460c      	mov	r4, r1
 8005528:	2001      	movs	r0, #1
 800552a:	fb0c 3202 	mla	r2, ip, r2, r3
 800552e:	e7a5      	b.n	800547c <_svfiprintf_r+0xd4>
 8005530:	2300      	movs	r3, #0
 8005532:	f04f 0c0a 	mov.w	ip, #10
 8005536:	4619      	mov	r1, r3
 8005538:	3401      	adds	r4, #1
 800553a:	9305      	str	r3, [sp, #20]
 800553c:	4620      	mov	r0, r4
 800553e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005542:	3a30      	subs	r2, #48	; 0x30
 8005544:	2a09      	cmp	r2, #9
 8005546:	d903      	bls.n	8005550 <_svfiprintf_r+0x1a8>
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0c5      	beq.n	80054d8 <_svfiprintf_r+0x130>
 800554c:	9105      	str	r1, [sp, #20]
 800554e:	e7c3      	b.n	80054d8 <_svfiprintf_r+0x130>
 8005550:	4604      	mov	r4, r0
 8005552:	2301      	movs	r3, #1
 8005554:	fb0c 2101 	mla	r1, ip, r1, r2
 8005558:	e7f0      	b.n	800553c <_svfiprintf_r+0x194>
 800555a:	ab03      	add	r3, sp, #12
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	462a      	mov	r2, r5
 8005560:	4638      	mov	r0, r7
 8005562:	4b10      	ldr	r3, [pc, #64]	; (80055a4 <_svfiprintf_r+0x1fc>)
 8005564:	a904      	add	r1, sp, #16
 8005566:	f3af 8000 	nop.w
 800556a:	1c42      	adds	r2, r0, #1
 800556c:	4606      	mov	r6, r0
 800556e:	d1d6      	bne.n	800551e <_svfiprintf_r+0x176>
 8005570:	89ab      	ldrh	r3, [r5, #12]
 8005572:	065b      	lsls	r3, r3, #25
 8005574:	f53f af2c 	bmi.w	80053d0 <_svfiprintf_r+0x28>
 8005578:	9809      	ldr	r0, [sp, #36]	; 0x24
 800557a:	b01d      	add	sp, #116	; 0x74
 800557c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005580:	ab03      	add	r3, sp, #12
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	462a      	mov	r2, r5
 8005586:	4638      	mov	r0, r7
 8005588:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <_svfiprintf_r+0x1fc>)
 800558a:	a904      	add	r1, sp, #16
 800558c:	f000 f87c 	bl	8005688 <_printf_i>
 8005590:	e7eb      	b.n	800556a <_svfiprintf_r+0x1c2>
 8005592:	bf00      	nop
 8005594:	08005d24 	.word	0x08005d24
 8005598:	08005d2a 	.word	0x08005d2a
 800559c:	08005d2e 	.word	0x08005d2e
 80055a0:	00000000 	.word	0x00000000
 80055a4:	080052f1 	.word	0x080052f1

080055a8 <_printf_common>:
 80055a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055ac:	4616      	mov	r6, r2
 80055ae:	4699      	mov	r9, r3
 80055b0:	688a      	ldr	r2, [r1, #8]
 80055b2:	690b      	ldr	r3, [r1, #16]
 80055b4:	4607      	mov	r7, r0
 80055b6:	4293      	cmp	r3, r2
 80055b8:	bfb8      	it	lt
 80055ba:	4613      	movlt	r3, r2
 80055bc:	6033      	str	r3, [r6, #0]
 80055be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055c2:	460c      	mov	r4, r1
 80055c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055c8:	b10a      	cbz	r2, 80055ce <_printf_common+0x26>
 80055ca:	3301      	adds	r3, #1
 80055cc:	6033      	str	r3, [r6, #0]
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	0699      	lsls	r1, r3, #26
 80055d2:	bf42      	ittt	mi
 80055d4:	6833      	ldrmi	r3, [r6, #0]
 80055d6:	3302      	addmi	r3, #2
 80055d8:	6033      	strmi	r3, [r6, #0]
 80055da:	6825      	ldr	r5, [r4, #0]
 80055dc:	f015 0506 	ands.w	r5, r5, #6
 80055e0:	d106      	bne.n	80055f0 <_printf_common+0x48>
 80055e2:	f104 0a19 	add.w	sl, r4, #25
 80055e6:	68e3      	ldr	r3, [r4, #12]
 80055e8:	6832      	ldr	r2, [r6, #0]
 80055ea:	1a9b      	subs	r3, r3, r2
 80055ec:	42ab      	cmp	r3, r5
 80055ee:	dc28      	bgt.n	8005642 <_printf_common+0x9a>
 80055f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055f4:	1e13      	subs	r3, r2, #0
 80055f6:	6822      	ldr	r2, [r4, #0]
 80055f8:	bf18      	it	ne
 80055fa:	2301      	movne	r3, #1
 80055fc:	0692      	lsls	r2, r2, #26
 80055fe:	d42d      	bmi.n	800565c <_printf_common+0xb4>
 8005600:	4649      	mov	r1, r9
 8005602:	4638      	mov	r0, r7
 8005604:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005608:	47c0      	blx	r8
 800560a:	3001      	adds	r0, #1
 800560c:	d020      	beq.n	8005650 <_printf_common+0xa8>
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	68e5      	ldr	r5, [r4, #12]
 8005612:	f003 0306 	and.w	r3, r3, #6
 8005616:	2b04      	cmp	r3, #4
 8005618:	bf18      	it	ne
 800561a:	2500      	movne	r5, #0
 800561c:	6832      	ldr	r2, [r6, #0]
 800561e:	f04f 0600 	mov.w	r6, #0
 8005622:	68a3      	ldr	r3, [r4, #8]
 8005624:	bf08      	it	eq
 8005626:	1aad      	subeq	r5, r5, r2
 8005628:	6922      	ldr	r2, [r4, #16]
 800562a:	bf08      	it	eq
 800562c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005630:	4293      	cmp	r3, r2
 8005632:	bfc4      	itt	gt
 8005634:	1a9b      	subgt	r3, r3, r2
 8005636:	18ed      	addgt	r5, r5, r3
 8005638:	341a      	adds	r4, #26
 800563a:	42b5      	cmp	r5, r6
 800563c:	d11a      	bne.n	8005674 <_printf_common+0xcc>
 800563e:	2000      	movs	r0, #0
 8005640:	e008      	b.n	8005654 <_printf_common+0xac>
 8005642:	2301      	movs	r3, #1
 8005644:	4652      	mov	r2, sl
 8005646:	4649      	mov	r1, r9
 8005648:	4638      	mov	r0, r7
 800564a:	47c0      	blx	r8
 800564c:	3001      	adds	r0, #1
 800564e:	d103      	bne.n	8005658 <_printf_common+0xb0>
 8005650:	f04f 30ff 	mov.w	r0, #4294967295
 8005654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005658:	3501      	adds	r5, #1
 800565a:	e7c4      	b.n	80055e6 <_printf_common+0x3e>
 800565c:	2030      	movs	r0, #48	; 0x30
 800565e:	18e1      	adds	r1, r4, r3
 8005660:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800566a:	4422      	add	r2, r4
 800566c:	3302      	adds	r3, #2
 800566e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005672:	e7c5      	b.n	8005600 <_printf_common+0x58>
 8005674:	2301      	movs	r3, #1
 8005676:	4622      	mov	r2, r4
 8005678:	4649      	mov	r1, r9
 800567a:	4638      	mov	r0, r7
 800567c:	47c0      	blx	r8
 800567e:	3001      	adds	r0, #1
 8005680:	d0e6      	beq.n	8005650 <_printf_common+0xa8>
 8005682:	3601      	adds	r6, #1
 8005684:	e7d9      	b.n	800563a <_printf_common+0x92>
	...

08005688 <_printf_i>:
 8005688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800568c:	7e0f      	ldrb	r7, [r1, #24]
 800568e:	4691      	mov	r9, r2
 8005690:	2f78      	cmp	r7, #120	; 0x78
 8005692:	4680      	mov	r8, r0
 8005694:	460c      	mov	r4, r1
 8005696:	469a      	mov	sl, r3
 8005698:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800569a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800569e:	d807      	bhi.n	80056b0 <_printf_i+0x28>
 80056a0:	2f62      	cmp	r7, #98	; 0x62
 80056a2:	d80a      	bhi.n	80056ba <_printf_i+0x32>
 80056a4:	2f00      	cmp	r7, #0
 80056a6:	f000 80d9 	beq.w	800585c <_printf_i+0x1d4>
 80056aa:	2f58      	cmp	r7, #88	; 0x58
 80056ac:	f000 80a4 	beq.w	80057f8 <_printf_i+0x170>
 80056b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056b8:	e03a      	b.n	8005730 <_printf_i+0xa8>
 80056ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056be:	2b15      	cmp	r3, #21
 80056c0:	d8f6      	bhi.n	80056b0 <_printf_i+0x28>
 80056c2:	a101      	add	r1, pc, #4	; (adr r1, 80056c8 <_printf_i+0x40>)
 80056c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056c8:	08005721 	.word	0x08005721
 80056cc:	08005735 	.word	0x08005735
 80056d0:	080056b1 	.word	0x080056b1
 80056d4:	080056b1 	.word	0x080056b1
 80056d8:	080056b1 	.word	0x080056b1
 80056dc:	080056b1 	.word	0x080056b1
 80056e0:	08005735 	.word	0x08005735
 80056e4:	080056b1 	.word	0x080056b1
 80056e8:	080056b1 	.word	0x080056b1
 80056ec:	080056b1 	.word	0x080056b1
 80056f0:	080056b1 	.word	0x080056b1
 80056f4:	08005843 	.word	0x08005843
 80056f8:	08005765 	.word	0x08005765
 80056fc:	08005825 	.word	0x08005825
 8005700:	080056b1 	.word	0x080056b1
 8005704:	080056b1 	.word	0x080056b1
 8005708:	08005865 	.word	0x08005865
 800570c:	080056b1 	.word	0x080056b1
 8005710:	08005765 	.word	0x08005765
 8005714:	080056b1 	.word	0x080056b1
 8005718:	080056b1 	.word	0x080056b1
 800571c:	0800582d 	.word	0x0800582d
 8005720:	682b      	ldr	r3, [r5, #0]
 8005722:	1d1a      	adds	r2, r3, #4
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	602a      	str	r2, [r5, #0]
 8005728:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800572c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005730:	2301      	movs	r3, #1
 8005732:	e0a4      	b.n	800587e <_printf_i+0x1f6>
 8005734:	6820      	ldr	r0, [r4, #0]
 8005736:	6829      	ldr	r1, [r5, #0]
 8005738:	0606      	lsls	r6, r0, #24
 800573a:	f101 0304 	add.w	r3, r1, #4
 800573e:	d50a      	bpl.n	8005756 <_printf_i+0xce>
 8005740:	680e      	ldr	r6, [r1, #0]
 8005742:	602b      	str	r3, [r5, #0]
 8005744:	2e00      	cmp	r6, #0
 8005746:	da03      	bge.n	8005750 <_printf_i+0xc8>
 8005748:	232d      	movs	r3, #45	; 0x2d
 800574a:	4276      	negs	r6, r6
 800574c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005750:	230a      	movs	r3, #10
 8005752:	485e      	ldr	r0, [pc, #376]	; (80058cc <_printf_i+0x244>)
 8005754:	e019      	b.n	800578a <_printf_i+0x102>
 8005756:	680e      	ldr	r6, [r1, #0]
 8005758:	f010 0f40 	tst.w	r0, #64	; 0x40
 800575c:	602b      	str	r3, [r5, #0]
 800575e:	bf18      	it	ne
 8005760:	b236      	sxthne	r6, r6
 8005762:	e7ef      	b.n	8005744 <_printf_i+0xbc>
 8005764:	682b      	ldr	r3, [r5, #0]
 8005766:	6820      	ldr	r0, [r4, #0]
 8005768:	1d19      	adds	r1, r3, #4
 800576a:	6029      	str	r1, [r5, #0]
 800576c:	0601      	lsls	r1, r0, #24
 800576e:	d501      	bpl.n	8005774 <_printf_i+0xec>
 8005770:	681e      	ldr	r6, [r3, #0]
 8005772:	e002      	b.n	800577a <_printf_i+0xf2>
 8005774:	0646      	lsls	r6, r0, #25
 8005776:	d5fb      	bpl.n	8005770 <_printf_i+0xe8>
 8005778:	881e      	ldrh	r6, [r3, #0]
 800577a:	2f6f      	cmp	r7, #111	; 0x6f
 800577c:	bf0c      	ite	eq
 800577e:	2308      	moveq	r3, #8
 8005780:	230a      	movne	r3, #10
 8005782:	4852      	ldr	r0, [pc, #328]	; (80058cc <_printf_i+0x244>)
 8005784:	2100      	movs	r1, #0
 8005786:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800578a:	6865      	ldr	r5, [r4, #4]
 800578c:	2d00      	cmp	r5, #0
 800578e:	bfa8      	it	ge
 8005790:	6821      	ldrge	r1, [r4, #0]
 8005792:	60a5      	str	r5, [r4, #8]
 8005794:	bfa4      	itt	ge
 8005796:	f021 0104 	bicge.w	r1, r1, #4
 800579a:	6021      	strge	r1, [r4, #0]
 800579c:	b90e      	cbnz	r6, 80057a2 <_printf_i+0x11a>
 800579e:	2d00      	cmp	r5, #0
 80057a0:	d04d      	beq.n	800583e <_printf_i+0x1b6>
 80057a2:	4615      	mov	r5, r2
 80057a4:	fbb6 f1f3 	udiv	r1, r6, r3
 80057a8:	fb03 6711 	mls	r7, r3, r1, r6
 80057ac:	5dc7      	ldrb	r7, [r0, r7]
 80057ae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057b2:	4637      	mov	r7, r6
 80057b4:	42bb      	cmp	r3, r7
 80057b6:	460e      	mov	r6, r1
 80057b8:	d9f4      	bls.n	80057a4 <_printf_i+0x11c>
 80057ba:	2b08      	cmp	r3, #8
 80057bc:	d10b      	bne.n	80057d6 <_printf_i+0x14e>
 80057be:	6823      	ldr	r3, [r4, #0]
 80057c0:	07de      	lsls	r6, r3, #31
 80057c2:	d508      	bpl.n	80057d6 <_printf_i+0x14e>
 80057c4:	6923      	ldr	r3, [r4, #16]
 80057c6:	6861      	ldr	r1, [r4, #4]
 80057c8:	4299      	cmp	r1, r3
 80057ca:	bfde      	ittt	le
 80057cc:	2330      	movle	r3, #48	; 0x30
 80057ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057d6:	1b52      	subs	r2, r2, r5
 80057d8:	6122      	str	r2, [r4, #16]
 80057da:	464b      	mov	r3, r9
 80057dc:	4621      	mov	r1, r4
 80057de:	4640      	mov	r0, r8
 80057e0:	f8cd a000 	str.w	sl, [sp]
 80057e4:	aa03      	add	r2, sp, #12
 80057e6:	f7ff fedf 	bl	80055a8 <_printf_common>
 80057ea:	3001      	adds	r0, #1
 80057ec:	d14c      	bne.n	8005888 <_printf_i+0x200>
 80057ee:	f04f 30ff 	mov.w	r0, #4294967295
 80057f2:	b004      	add	sp, #16
 80057f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f8:	4834      	ldr	r0, [pc, #208]	; (80058cc <_printf_i+0x244>)
 80057fa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80057fe:	6829      	ldr	r1, [r5, #0]
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	f851 6b04 	ldr.w	r6, [r1], #4
 8005806:	6029      	str	r1, [r5, #0]
 8005808:	061d      	lsls	r5, r3, #24
 800580a:	d514      	bpl.n	8005836 <_printf_i+0x1ae>
 800580c:	07df      	lsls	r7, r3, #31
 800580e:	bf44      	itt	mi
 8005810:	f043 0320 	orrmi.w	r3, r3, #32
 8005814:	6023      	strmi	r3, [r4, #0]
 8005816:	b91e      	cbnz	r6, 8005820 <_printf_i+0x198>
 8005818:	6823      	ldr	r3, [r4, #0]
 800581a:	f023 0320 	bic.w	r3, r3, #32
 800581e:	6023      	str	r3, [r4, #0]
 8005820:	2310      	movs	r3, #16
 8005822:	e7af      	b.n	8005784 <_printf_i+0xfc>
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	f043 0320 	orr.w	r3, r3, #32
 800582a:	6023      	str	r3, [r4, #0]
 800582c:	2378      	movs	r3, #120	; 0x78
 800582e:	4828      	ldr	r0, [pc, #160]	; (80058d0 <_printf_i+0x248>)
 8005830:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005834:	e7e3      	b.n	80057fe <_printf_i+0x176>
 8005836:	0659      	lsls	r1, r3, #25
 8005838:	bf48      	it	mi
 800583a:	b2b6      	uxthmi	r6, r6
 800583c:	e7e6      	b.n	800580c <_printf_i+0x184>
 800583e:	4615      	mov	r5, r2
 8005840:	e7bb      	b.n	80057ba <_printf_i+0x132>
 8005842:	682b      	ldr	r3, [r5, #0]
 8005844:	6826      	ldr	r6, [r4, #0]
 8005846:	1d18      	adds	r0, r3, #4
 8005848:	6961      	ldr	r1, [r4, #20]
 800584a:	6028      	str	r0, [r5, #0]
 800584c:	0635      	lsls	r5, r6, #24
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	d501      	bpl.n	8005856 <_printf_i+0x1ce>
 8005852:	6019      	str	r1, [r3, #0]
 8005854:	e002      	b.n	800585c <_printf_i+0x1d4>
 8005856:	0670      	lsls	r0, r6, #25
 8005858:	d5fb      	bpl.n	8005852 <_printf_i+0x1ca>
 800585a:	8019      	strh	r1, [r3, #0]
 800585c:	2300      	movs	r3, #0
 800585e:	4615      	mov	r5, r2
 8005860:	6123      	str	r3, [r4, #16]
 8005862:	e7ba      	b.n	80057da <_printf_i+0x152>
 8005864:	682b      	ldr	r3, [r5, #0]
 8005866:	2100      	movs	r1, #0
 8005868:	1d1a      	adds	r2, r3, #4
 800586a:	602a      	str	r2, [r5, #0]
 800586c:	681d      	ldr	r5, [r3, #0]
 800586e:	6862      	ldr	r2, [r4, #4]
 8005870:	4628      	mov	r0, r5
 8005872:	f000 f82f 	bl	80058d4 <memchr>
 8005876:	b108      	cbz	r0, 800587c <_printf_i+0x1f4>
 8005878:	1b40      	subs	r0, r0, r5
 800587a:	6060      	str	r0, [r4, #4]
 800587c:	6863      	ldr	r3, [r4, #4]
 800587e:	6123      	str	r3, [r4, #16]
 8005880:	2300      	movs	r3, #0
 8005882:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005886:	e7a8      	b.n	80057da <_printf_i+0x152>
 8005888:	462a      	mov	r2, r5
 800588a:	4649      	mov	r1, r9
 800588c:	4640      	mov	r0, r8
 800588e:	6923      	ldr	r3, [r4, #16]
 8005890:	47d0      	blx	sl
 8005892:	3001      	adds	r0, #1
 8005894:	d0ab      	beq.n	80057ee <_printf_i+0x166>
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	079b      	lsls	r3, r3, #30
 800589a:	d413      	bmi.n	80058c4 <_printf_i+0x23c>
 800589c:	68e0      	ldr	r0, [r4, #12]
 800589e:	9b03      	ldr	r3, [sp, #12]
 80058a0:	4298      	cmp	r0, r3
 80058a2:	bfb8      	it	lt
 80058a4:	4618      	movlt	r0, r3
 80058a6:	e7a4      	b.n	80057f2 <_printf_i+0x16a>
 80058a8:	2301      	movs	r3, #1
 80058aa:	4632      	mov	r2, r6
 80058ac:	4649      	mov	r1, r9
 80058ae:	4640      	mov	r0, r8
 80058b0:	47d0      	blx	sl
 80058b2:	3001      	adds	r0, #1
 80058b4:	d09b      	beq.n	80057ee <_printf_i+0x166>
 80058b6:	3501      	adds	r5, #1
 80058b8:	68e3      	ldr	r3, [r4, #12]
 80058ba:	9903      	ldr	r1, [sp, #12]
 80058bc:	1a5b      	subs	r3, r3, r1
 80058be:	42ab      	cmp	r3, r5
 80058c0:	dcf2      	bgt.n	80058a8 <_printf_i+0x220>
 80058c2:	e7eb      	b.n	800589c <_printf_i+0x214>
 80058c4:	2500      	movs	r5, #0
 80058c6:	f104 0619 	add.w	r6, r4, #25
 80058ca:	e7f5      	b.n	80058b8 <_printf_i+0x230>
 80058cc:	08005d35 	.word	0x08005d35
 80058d0:	08005d46 	.word	0x08005d46

080058d4 <memchr>:
 80058d4:	4603      	mov	r3, r0
 80058d6:	b510      	push	{r4, lr}
 80058d8:	b2c9      	uxtb	r1, r1
 80058da:	4402      	add	r2, r0
 80058dc:	4293      	cmp	r3, r2
 80058de:	4618      	mov	r0, r3
 80058e0:	d101      	bne.n	80058e6 <memchr+0x12>
 80058e2:	2000      	movs	r0, #0
 80058e4:	e003      	b.n	80058ee <memchr+0x1a>
 80058e6:	7804      	ldrb	r4, [r0, #0]
 80058e8:	3301      	adds	r3, #1
 80058ea:	428c      	cmp	r4, r1
 80058ec:	d1f6      	bne.n	80058dc <memchr+0x8>
 80058ee:	bd10      	pop	{r4, pc}

080058f0 <memcpy>:
 80058f0:	440a      	add	r2, r1
 80058f2:	4291      	cmp	r1, r2
 80058f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80058f8:	d100      	bne.n	80058fc <memcpy+0xc>
 80058fa:	4770      	bx	lr
 80058fc:	b510      	push	{r4, lr}
 80058fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005902:	4291      	cmp	r1, r2
 8005904:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005908:	d1f9      	bne.n	80058fe <memcpy+0xe>
 800590a:	bd10      	pop	{r4, pc}

0800590c <memmove>:
 800590c:	4288      	cmp	r0, r1
 800590e:	b510      	push	{r4, lr}
 8005910:	eb01 0402 	add.w	r4, r1, r2
 8005914:	d902      	bls.n	800591c <memmove+0x10>
 8005916:	4284      	cmp	r4, r0
 8005918:	4623      	mov	r3, r4
 800591a:	d807      	bhi.n	800592c <memmove+0x20>
 800591c:	1e43      	subs	r3, r0, #1
 800591e:	42a1      	cmp	r1, r4
 8005920:	d008      	beq.n	8005934 <memmove+0x28>
 8005922:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005926:	f803 2f01 	strb.w	r2, [r3, #1]!
 800592a:	e7f8      	b.n	800591e <memmove+0x12>
 800592c:	4601      	mov	r1, r0
 800592e:	4402      	add	r2, r0
 8005930:	428a      	cmp	r2, r1
 8005932:	d100      	bne.n	8005936 <memmove+0x2a>
 8005934:	bd10      	pop	{r4, pc}
 8005936:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800593a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800593e:	e7f7      	b.n	8005930 <memmove+0x24>

08005940 <_free_r>:
 8005940:	b538      	push	{r3, r4, r5, lr}
 8005942:	4605      	mov	r5, r0
 8005944:	2900      	cmp	r1, #0
 8005946:	d040      	beq.n	80059ca <_free_r+0x8a>
 8005948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800594c:	1f0c      	subs	r4, r1, #4
 800594e:	2b00      	cmp	r3, #0
 8005950:	bfb8      	it	lt
 8005952:	18e4      	addlt	r4, r4, r3
 8005954:	f000 f910 	bl	8005b78 <__malloc_lock>
 8005958:	4a1c      	ldr	r2, [pc, #112]	; (80059cc <_free_r+0x8c>)
 800595a:	6813      	ldr	r3, [r2, #0]
 800595c:	b933      	cbnz	r3, 800596c <_free_r+0x2c>
 800595e:	6063      	str	r3, [r4, #4]
 8005960:	6014      	str	r4, [r2, #0]
 8005962:	4628      	mov	r0, r5
 8005964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005968:	f000 b90c 	b.w	8005b84 <__malloc_unlock>
 800596c:	42a3      	cmp	r3, r4
 800596e:	d908      	bls.n	8005982 <_free_r+0x42>
 8005970:	6820      	ldr	r0, [r4, #0]
 8005972:	1821      	adds	r1, r4, r0
 8005974:	428b      	cmp	r3, r1
 8005976:	bf01      	itttt	eq
 8005978:	6819      	ldreq	r1, [r3, #0]
 800597a:	685b      	ldreq	r3, [r3, #4]
 800597c:	1809      	addeq	r1, r1, r0
 800597e:	6021      	streq	r1, [r4, #0]
 8005980:	e7ed      	b.n	800595e <_free_r+0x1e>
 8005982:	461a      	mov	r2, r3
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	b10b      	cbz	r3, 800598c <_free_r+0x4c>
 8005988:	42a3      	cmp	r3, r4
 800598a:	d9fa      	bls.n	8005982 <_free_r+0x42>
 800598c:	6811      	ldr	r1, [r2, #0]
 800598e:	1850      	adds	r0, r2, r1
 8005990:	42a0      	cmp	r0, r4
 8005992:	d10b      	bne.n	80059ac <_free_r+0x6c>
 8005994:	6820      	ldr	r0, [r4, #0]
 8005996:	4401      	add	r1, r0
 8005998:	1850      	adds	r0, r2, r1
 800599a:	4283      	cmp	r3, r0
 800599c:	6011      	str	r1, [r2, #0]
 800599e:	d1e0      	bne.n	8005962 <_free_r+0x22>
 80059a0:	6818      	ldr	r0, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	4401      	add	r1, r0
 80059a6:	6011      	str	r1, [r2, #0]
 80059a8:	6053      	str	r3, [r2, #4]
 80059aa:	e7da      	b.n	8005962 <_free_r+0x22>
 80059ac:	d902      	bls.n	80059b4 <_free_r+0x74>
 80059ae:	230c      	movs	r3, #12
 80059b0:	602b      	str	r3, [r5, #0]
 80059b2:	e7d6      	b.n	8005962 <_free_r+0x22>
 80059b4:	6820      	ldr	r0, [r4, #0]
 80059b6:	1821      	adds	r1, r4, r0
 80059b8:	428b      	cmp	r3, r1
 80059ba:	bf01      	itttt	eq
 80059bc:	6819      	ldreq	r1, [r3, #0]
 80059be:	685b      	ldreq	r3, [r3, #4]
 80059c0:	1809      	addeq	r1, r1, r0
 80059c2:	6021      	streq	r1, [r4, #0]
 80059c4:	6063      	str	r3, [r4, #4]
 80059c6:	6054      	str	r4, [r2, #4]
 80059c8:	e7cb      	b.n	8005962 <_free_r+0x22>
 80059ca:	bd38      	pop	{r3, r4, r5, pc}
 80059cc:	20000284 	.word	0x20000284

080059d0 <sbrk_aligned>:
 80059d0:	b570      	push	{r4, r5, r6, lr}
 80059d2:	4e0e      	ldr	r6, [pc, #56]	; (8005a0c <sbrk_aligned+0x3c>)
 80059d4:	460c      	mov	r4, r1
 80059d6:	6831      	ldr	r1, [r6, #0]
 80059d8:	4605      	mov	r5, r0
 80059da:	b911      	cbnz	r1, 80059e2 <sbrk_aligned+0x12>
 80059dc:	f000 f8bc 	bl	8005b58 <_sbrk_r>
 80059e0:	6030      	str	r0, [r6, #0]
 80059e2:	4621      	mov	r1, r4
 80059e4:	4628      	mov	r0, r5
 80059e6:	f000 f8b7 	bl	8005b58 <_sbrk_r>
 80059ea:	1c43      	adds	r3, r0, #1
 80059ec:	d00a      	beq.n	8005a04 <sbrk_aligned+0x34>
 80059ee:	1cc4      	adds	r4, r0, #3
 80059f0:	f024 0403 	bic.w	r4, r4, #3
 80059f4:	42a0      	cmp	r0, r4
 80059f6:	d007      	beq.n	8005a08 <sbrk_aligned+0x38>
 80059f8:	1a21      	subs	r1, r4, r0
 80059fa:	4628      	mov	r0, r5
 80059fc:	f000 f8ac 	bl	8005b58 <_sbrk_r>
 8005a00:	3001      	adds	r0, #1
 8005a02:	d101      	bne.n	8005a08 <sbrk_aligned+0x38>
 8005a04:	f04f 34ff 	mov.w	r4, #4294967295
 8005a08:	4620      	mov	r0, r4
 8005a0a:	bd70      	pop	{r4, r5, r6, pc}
 8005a0c:	20000288 	.word	0x20000288

08005a10 <_malloc_r>:
 8005a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a14:	1ccd      	adds	r5, r1, #3
 8005a16:	f025 0503 	bic.w	r5, r5, #3
 8005a1a:	3508      	adds	r5, #8
 8005a1c:	2d0c      	cmp	r5, #12
 8005a1e:	bf38      	it	cc
 8005a20:	250c      	movcc	r5, #12
 8005a22:	2d00      	cmp	r5, #0
 8005a24:	4607      	mov	r7, r0
 8005a26:	db01      	blt.n	8005a2c <_malloc_r+0x1c>
 8005a28:	42a9      	cmp	r1, r5
 8005a2a:	d905      	bls.n	8005a38 <_malloc_r+0x28>
 8005a2c:	230c      	movs	r3, #12
 8005a2e:	2600      	movs	r6, #0
 8005a30:	603b      	str	r3, [r7, #0]
 8005a32:	4630      	mov	r0, r6
 8005a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a38:	4e2e      	ldr	r6, [pc, #184]	; (8005af4 <_malloc_r+0xe4>)
 8005a3a:	f000 f89d 	bl	8005b78 <__malloc_lock>
 8005a3e:	6833      	ldr	r3, [r6, #0]
 8005a40:	461c      	mov	r4, r3
 8005a42:	bb34      	cbnz	r4, 8005a92 <_malloc_r+0x82>
 8005a44:	4629      	mov	r1, r5
 8005a46:	4638      	mov	r0, r7
 8005a48:	f7ff ffc2 	bl	80059d0 <sbrk_aligned>
 8005a4c:	1c43      	adds	r3, r0, #1
 8005a4e:	4604      	mov	r4, r0
 8005a50:	d14d      	bne.n	8005aee <_malloc_r+0xde>
 8005a52:	6834      	ldr	r4, [r6, #0]
 8005a54:	4626      	mov	r6, r4
 8005a56:	2e00      	cmp	r6, #0
 8005a58:	d140      	bne.n	8005adc <_malloc_r+0xcc>
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	4631      	mov	r1, r6
 8005a5e:	4638      	mov	r0, r7
 8005a60:	eb04 0803 	add.w	r8, r4, r3
 8005a64:	f000 f878 	bl	8005b58 <_sbrk_r>
 8005a68:	4580      	cmp	r8, r0
 8005a6a:	d13a      	bne.n	8005ae2 <_malloc_r+0xd2>
 8005a6c:	6821      	ldr	r1, [r4, #0]
 8005a6e:	3503      	adds	r5, #3
 8005a70:	1a6d      	subs	r5, r5, r1
 8005a72:	f025 0503 	bic.w	r5, r5, #3
 8005a76:	3508      	adds	r5, #8
 8005a78:	2d0c      	cmp	r5, #12
 8005a7a:	bf38      	it	cc
 8005a7c:	250c      	movcc	r5, #12
 8005a7e:	4638      	mov	r0, r7
 8005a80:	4629      	mov	r1, r5
 8005a82:	f7ff ffa5 	bl	80059d0 <sbrk_aligned>
 8005a86:	3001      	adds	r0, #1
 8005a88:	d02b      	beq.n	8005ae2 <_malloc_r+0xd2>
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	442b      	add	r3, r5
 8005a8e:	6023      	str	r3, [r4, #0]
 8005a90:	e00e      	b.n	8005ab0 <_malloc_r+0xa0>
 8005a92:	6822      	ldr	r2, [r4, #0]
 8005a94:	1b52      	subs	r2, r2, r5
 8005a96:	d41e      	bmi.n	8005ad6 <_malloc_r+0xc6>
 8005a98:	2a0b      	cmp	r2, #11
 8005a9a:	d916      	bls.n	8005aca <_malloc_r+0xba>
 8005a9c:	1961      	adds	r1, r4, r5
 8005a9e:	42a3      	cmp	r3, r4
 8005aa0:	6025      	str	r5, [r4, #0]
 8005aa2:	bf18      	it	ne
 8005aa4:	6059      	strne	r1, [r3, #4]
 8005aa6:	6863      	ldr	r3, [r4, #4]
 8005aa8:	bf08      	it	eq
 8005aaa:	6031      	streq	r1, [r6, #0]
 8005aac:	5162      	str	r2, [r4, r5]
 8005aae:	604b      	str	r3, [r1, #4]
 8005ab0:	4638      	mov	r0, r7
 8005ab2:	f104 060b 	add.w	r6, r4, #11
 8005ab6:	f000 f865 	bl	8005b84 <__malloc_unlock>
 8005aba:	f026 0607 	bic.w	r6, r6, #7
 8005abe:	1d23      	adds	r3, r4, #4
 8005ac0:	1af2      	subs	r2, r6, r3
 8005ac2:	d0b6      	beq.n	8005a32 <_malloc_r+0x22>
 8005ac4:	1b9b      	subs	r3, r3, r6
 8005ac6:	50a3      	str	r3, [r4, r2]
 8005ac8:	e7b3      	b.n	8005a32 <_malloc_r+0x22>
 8005aca:	6862      	ldr	r2, [r4, #4]
 8005acc:	42a3      	cmp	r3, r4
 8005ace:	bf0c      	ite	eq
 8005ad0:	6032      	streq	r2, [r6, #0]
 8005ad2:	605a      	strne	r2, [r3, #4]
 8005ad4:	e7ec      	b.n	8005ab0 <_malloc_r+0xa0>
 8005ad6:	4623      	mov	r3, r4
 8005ad8:	6864      	ldr	r4, [r4, #4]
 8005ada:	e7b2      	b.n	8005a42 <_malloc_r+0x32>
 8005adc:	4634      	mov	r4, r6
 8005ade:	6876      	ldr	r6, [r6, #4]
 8005ae0:	e7b9      	b.n	8005a56 <_malloc_r+0x46>
 8005ae2:	230c      	movs	r3, #12
 8005ae4:	4638      	mov	r0, r7
 8005ae6:	603b      	str	r3, [r7, #0]
 8005ae8:	f000 f84c 	bl	8005b84 <__malloc_unlock>
 8005aec:	e7a1      	b.n	8005a32 <_malloc_r+0x22>
 8005aee:	6025      	str	r5, [r4, #0]
 8005af0:	e7de      	b.n	8005ab0 <_malloc_r+0xa0>
 8005af2:	bf00      	nop
 8005af4:	20000284 	.word	0x20000284

08005af8 <_realloc_r>:
 8005af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005afc:	4680      	mov	r8, r0
 8005afe:	4614      	mov	r4, r2
 8005b00:	460e      	mov	r6, r1
 8005b02:	b921      	cbnz	r1, 8005b0e <_realloc_r+0x16>
 8005b04:	4611      	mov	r1, r2
 8005b06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b0a:	f7ff bf81 	b.w	8005a10 <_malloc_r>
 8005b0e:	b92a      	cbnz	r2, 8005b1c <_realloc_r+0x24>
 8005b10:	f7ff ff16 	bl	8005940 <_free_r>
 8005b14:	4625      	mov	r5, r4
 8005b16:	4628      	mov	r0, r5
 8005b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b1c:	f000 f838 	bl	8005b90 <_malloc_usable_size_r>
 8005b20:	4284      	cmp	r4, r0
 8005b22:	4607      	mov	r7, r0
 8005b24:	d802      	bhi.n	8005b2c <_realloc_r+0x34>
 8005b26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005b2a:	d812      	bhi.n	8005b52 <_realloc_r+0x5a>
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	4640      	mov	r0, r8
 8005b30:	f7ff ff6e 	bl	8005a10 <_malloc_r>
 8005b34:	4605      	mov	r5, r0
 8005b36:	2800      	cmp	r0, #0
 8005b38:	d0ed      	beq.n	8005b16 <_realloc_r+0x1e>
 8005b3a:	42bc      	cmp	r4, r7
 8005b3c:	4622      	mov	r2, r4
 8005b3e:	4631      	mov	r1, r6
 8005b40:	bf28      	it	cs
 8005b42:	463a      	movcs	r2, r7
 8005b44:	f7ff fed4 	bl	80058f0 <memcpy>
 8005b48:	4631      	mov	r1, r6
 8005b4a:	4640      	mov	r0, r8
 8005b4c:	f7ff fef8 	bl	8005940 <_free_r>
 8005b50:	e7e1      	b.n	8005b16 <_realloc_r+0x1e>
 8005b52:	4635      	mov	r5, r6
 8005b54:	e7df      	b.n	8005b16 <_realloc_r+0x1e>
	...

08005b58 <_sbrk_r>:
 8005b58:	b538      	push	{r3, r4, r5, lr}
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	4d05      	ldr	r5, [pc, #20]	; (8005b74 <_sbrk_r+0x1c>)
 8005b5e:	4604      	mov	r4, r0
 8005b60:	4608      	mov	r0, r1
 8005b62:	602b      	str	r3, [r5, #0]
 8005b64:	f7fc fa4e 	bl	8002004 <_sbrk>
 8005b68:	1c43      	adds	r3, r0, #1
 8005b6a:	d102      	bne.n	8005b72 <_sbrk_r+0x1a>
 8005b6c:	682b      	ldr	r3, [r5, #0]
 8005b6e:	b103      	cbz	r3, 8005b72 <_sbrk_r+0x1a>
 8005b70:	6023      	str	r3, [r4, #0]
 8005b72:	bd38      	pop	{r3, r4, r5, pc}
 8005b74:	2000028c 	.word	0x2000028c

08005b78 <__malloc_lock>:
 8005b78:	4801      	ldr	r0, [pc, #4]	; (8005b80 <__malloc_lock+0x8>)
 8005b7a:	f000 b811 	b.w	8005ba0 <__retarget_lock_acquire_recursive>
 8005b7e:	bf00      	nop
 8005b80:	20000290 	.word	0x20000290

08005b84 <__malloc_unlock>:
 8005b84:	4801      	ldr	r0, [pc, #4]	; (8005b8c <__malloc_unlock+0x8>)
 8005b86:	f000 b80c 	b.w	8005ba2 <__retarget_lock_release_recursive>
 8005b8a:	bf00      	nop
 8005b8c:	20000290 	.word	0x20000290

08005b90 <_malloc_usable_size_r>:
 8005b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b94:	1f18      	subs	r0, r3, #4
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	bfbc      	itt	lt
 8005b9a:	580b      	ldrlt	r3, [r1, r0]
 8005b9c:	18c0      	addlt	r0, r0, r3
 8005b9e:	4770      	bx	lr

08005ba0 <__retarget_lock_acquire_recursive>:
 8005ba0:	4770      	bx	lr

08005ba2 <__retarget_lock_release_recursive>:
 8005ba2:	4770      	bx	lr

08005ba4 <_init>:
 8005ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba6:	bf00      	nop
 8005ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005baa:	bc08      	pop	{r3}
 8005bac:	469e      	mov	lr, r3
 8005bae:	4770      	bx	lr

08005bb0 <_fini>:
 8005bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb2:	bf00      	nop
 8005bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bb6:	bc08      	pop	{r3}
 8005bb8:	469e      	mov	lr, r3
 8005bba:	4770      	bx	lr
